
AVR32 Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b20  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004c00  80004c00  00005000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000158  80004e00  80004e00  00005200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000005d0  00000008  80004f58  00005408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f0  000005d8  000005d8  00000000  2**2
                  ALLOC
  8 .heap         0000e338  00000cc8  00000cc8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  000059d8  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b00  00000000  00000000  00005a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000018e7  00000000  00000000  00006508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00022d00  00000000  00000000  00007def  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040c2  00000000  00000000  0002aaef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e48b  00000000  00000000  0002ebb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001b6c  00000000  00000000  0003d03c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007a80  00000000  00000000  0003eba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000046af  00000000  00000000  00046628  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0104b597  00000000  00000000  0004acd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00001030  00000000  00000000  0109626e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f1 3c 	sub	pc,pc,-3780

Disassembly of section .text:

80002004 <board_init>:
#endif



void board_init (void)
{
80002004:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	32 3c       	mov	r12,35
8000200a:	c2 3c       	rcall	80002050 <gpio_configure_pin>
8000200c:	30 3b       	mov	r11,3
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	34 9c       	mov	r12,73
80002010:	c2 0c       	rcall	80002050 <gpio_configure_pin>
80002012:	30 3b       	mov	r11,3
80002014:	32 2c       	mov	r12,34
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	c1 dc       	rcall	80002050 <gpio_configure_pin>
80002018:	30 3b       	mov	r11,3
8000201a:	32 6c       	mov	r12,38
8000201c:	c1 ac       	rcall	80002050 <gpio_configure_pin>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 4b       	mov	r11,4
80002020:	32 1c       	mov	r12,33
80002022:	c1 7c       	rcall	80002050 <gpio_configure_pin>
80002024:	d8 02       	popm	pc

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
80002026:	d7 03       	nop

80002028 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80002028:	e0 68 50 ff 	mov	r8,20735
8000202c:	ea 18 02 25 	orh	r8,0x225
80002030:	10 3c       	cp.w	r12,r8
80002032:	e0 88 00 07 	brls	80002040 <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002036:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
8000203a:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000203c:	70 09       	ld.w	r9,r8[0x0]
8000203e:	c0 58       	rjmp	80002048 <flashc_set_bus_freq+0x20>
80002040:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002044:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002046:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002048:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000204c:	91 09       	st.w	r8[0x0],r9
8000204e:	5e fc       	retal	r12

80002050 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002050:	f8 08 16 05 	lsr	r8,r12,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002054:	16 9a       	mov	r10,r11

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002056:	a9 68       	lsl	r8,0x8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002058:	e2 1a 00 04 	andl	r10,0x4,COH

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000205c:	e0 28 f0 00 	sub	r8,61440
80002060:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002064:	58 0a       	cp.w	r10,0
80002066:	c0 70       	breq	80002074 <gpio_configure_pin+0x24>
            gpio_port->puers = 1 << (pin & 0x1F);
80002068:	30 1a       	mov	r10,1
8000206a:	f4 09 09 49 	lsl	r9,r10,r9
8000206e:	f1 49 00 74 	st.w	r8[116],r9
80002072:	c0 68       	rjmp	8000207e <gpio_configure_pin+0x2e>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80002074:	30 1a       	mov	r10,1
80002076:	f4 09 09 49 	lsl	r9,r10,r9
8000207a:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
8000207e:	ed bb 00 07 	bld	r11,0x7
80002082:	c2 21       	brne	800020c6 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80002084:	16 99       	mov	r9,r11
80002086:	e2 19 01 80 	andl	r9,0x180,COH
8000208a:	c0 70       	breq	80002098 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000208c:	30 19       	mov	r9,1
8000208e:	f2 0c 09 49 	lsl	r9,r9,r12
80002092:	f1 49 00 a8 	st.w	r8[168],r9
80002096:	c0 a8       	rjmp	800020aa <gpio_configure_pin+0x5a>
                   gpio_port->imr1c = 1 << (pin & 0x1F);
            }
            else if (flags & GPIO_RISING)
80002098:	16 99       	mov	r9,r11
8000209a:	e2 19 02 80 	andl	r9,0x280,COH
8000209e:	c0 90       	breq	800020b0 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800020a0:	30 19       	mov	r9,1
800020a2:	f2 0c 09 49 	lsl	r9,r9,r12
800020a6:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800020aa:	f1 49 00 b8 	st.w	r8[184],r9
800020ae:	c0 c8       	rjmp	800020c6 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
800020b0:	16 99       	mov	r9,r11
800020b2:	e2 19 03 80 	andl	r9,0x380,COH
800020b6:	c0 80       	breq	800020c6 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800020b8:	30 19       	mov	r9,1
800020ba:	f2 0c 09 49 	lsl	r9,r9,r12
800020be:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800020c2:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800020c6:	ed bb 00 00 	bld	r11,0x0
800020ca:	c1 81       	brne	800020fa <gpio_configure_pin+0xaa>
            if (flags & GPIO_INIT_HIGH)
800020cc:	e2 1b 00 02 	andl	r11,0x2,COH
800020d0:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
800020d4:	58 0b       	cp.w	r11,0
800020d6:	c0 70       	breq	800020e4 <gpio_configure_pin+0x94>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800020d8:	30 1a       	mov	r10,1
800020da:	f4 09 09 49 	lsl	r9,r10,r9
800020de:	f1 49 00 54 	st.w	r8[84],r9
800020e2:	c0 68       	rjmp	800020ee <gpio_configure_pin+0x9e>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800020e4:	30 1a       	mov	r10,1
800020e6:	f4 09 09 49 	lsl	r9,r10,r9
800020ea:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800020ee:	30 19       	mov	r9,1
800020f0:	f2 0c 09 49 	lsl	r9,r9,r12
800020f4:	f1 49 00 44 	st.w	r8[68],r9
800020f8:	c0 68       	rjmp	80002104 <gpio_configure_pin+0xb4>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800020fa:	30 19       	mov	r9,1
800020fc:	f2 0c 09 49 	lsl	r9,r9,r12
80002100:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 4c 	lsl	r12,r9,r12
8000210a:	91 1c       	st.w	r8[0x4],r12
}
8000210c:	5e fc       	retal	r12

8000210e <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000210e:	f8 08 16 05 	lsr	r8,r12,0x5
80002112:	a9 68       	lsl	r8,0x8
80002114:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002118:	71 88       	ld.w	r8,r8[0x60]
8000211a:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000211e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002122:	5e fc       	retal	r12

80002124 <gpio_set_pin_high>:
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002124:	30 18       	mov	r8,1
80002126:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000212a:	a5 9c       	lsr	r12,0x5
8000212c:	a9 6c       	lsl	r12,0x8
8000212e:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002132:	f9 48 00 54 	st.w	r12[84],r8
}
80002136:	5e fc       	retal	r12

80002138 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002138:	30 18       	mov	r8,1
8000213a:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000213e:	a5 9c       	lsr	r12,0x5
80002140:	a9 6c       	lsl	r12,0x8
80002142:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002146:	f9 48 00 58 	st.w	r12[88],r8
}
8000214a:	5e fc       	retal	r12

8000214c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000214c:	c0 08       	rjmp	8000214c <_unhandled_interrupt>
8000214e:	d7 03       	nop

80002150 <INTC_register_interrupt>:
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002150:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80002154:	48 98       	lddpc	r8,80002178 <INTC_register_interrupt+0x28>


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002156:	a5 9b       	lsr	r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002158:	f0 0b 00 38 	add	r8,r8,r11<<0x3
8000215c:	70 18       	ld.w	r8,r8[0x4]
8000215e:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002162:	fe c8 d4 26 	sub	r8,pc,-11226
80002166:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000216a:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
8000216e:	fe 78 08 00 	mov	r8,-63488
80002172:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
}
80002176:	5e fc       	retal	r12
80002178:	80 00       	ld.sh	r0,r0[0x0]
8000217a:	4e 00       	lddpc	r0,800022f8 <udd_ep_clear_halt+0x18>

8000217c <INTC_init_interrupts>:
8000217c:	d4 21       	pushm	r4-r7,lr
8000217e:	fe c8 d5 7e 	sub	r8,pc,-10882
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002182:	e3 b8 00 01 	mtsr	0x4,r8
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002186:	fe c8 d4 4a 	sub	r8,pc,-11190
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000218a:	48 d9       	lddpc	r9,800021bc <INTC_init_interrupts+0x40>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000218c:	70 0e       	ld.w	lr,r8[0x0]
8000218e:	fe cc 00 42 	sub	r12,pc,66
80002192:	30 08       	mov	r8,0
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002194:	fe 7b 08 00 	mov	r11,-63488
80002198:	c0 e8       	rjmp	800021b4 <INTC_init_interrupts+0x38>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000219a:	72 16       	ld.w	r6,r9[0x4]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000219c:	ec 0a 00 26 	add	r6,r6,r10<<0x2

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800021a0:	2f fa       	sub	r10,-1
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800021a2:	8d 0c       	st.w	r6[0x0],r12
800021a4:	0e 3a       	cp.w	r10,r7
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800021a6:	cf a3       	brcs	8000219a <INTC_init_interrupts+0x1e>
800021a8:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
800021ac:	2f 89       	sub	r9,-8
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800021ae:	2f f8       	sub	r8,-1
800021b0:	59 e8       	cp.w	r8,30
800021b2:	c0 40       	breq	800021ba <INTC_init_interrupts+0x3e>
800021b4:	72 07       	ld.w	r7,r9[0x0]
800021b6:	30 0a       	mov	r10,0
800021b8:	cf 6b       	rjmp	800021a4 <INTC_init_interrupts+0x28>
800021ba:	d8 22       	popm	r4-r7,pc
800021bc:	80 00       	ld.sh	r0,r0[0x0]
800021be:	4e 00       	lddpc	r0,8000233c <udd_ep_clear_halt+0x5c>

800021c0 <_get_interrupt_handler>:
800021c0:	e0 68 00 83 	mov	r8,131
800021c4:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800021c8:	f0 0c 01 0c 	sub	r12,r8,r12
800021cc:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800021d0:	f0 ca ff c0 	sub	r10,r8,-64
800021d4:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800021d8:	58 0c       	cp.w	r12,0
800021da:	5e 0c       	reteq	r12
800021dc:	48 69       	lddpc	r9,800021f4 <_get_interrupt_handler+0x34>
800021de:	f8 0c 12 00 	clz	r12,r12
800021e2:	f2 08 00 38 	add	r8,r9,r8<<0x3
800021e6:	f8 0c 11 1f 	rsub	r12,r12,31
800021ea:	70 18       	ld.w	r8,r8[0x4]
800021ec:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
}
800021f0:	5e fc       	retal	r12
800021f2:	d7 03       	nop
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	4e 00       	lddpc	r0,80002374 <udd_ep_finish_job+0x1c>

800021f8 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
800021f8:	5e ff       	retal	1

800021fa <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
800021fa:	5e fd       	retal	0

800021fc <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800021fc:	fe 68 00 00 	mov	r8,-131072
80002200:	70 09       	ld.w	r9,r8[0x0]
80002202:	a7 d9       	cbr	r9,0x7
80002204:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80002206:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000220a:	70 09       	ld.w	r9,r8[0x0]
8000220c:	e0 19 ff 80 	andl	r9,0xff80
80002210:	f9 e9 10 09 	or	r9,r12,r9
80002214:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002216:	70 09       	ld.w	r9,r8[0x0]
80002218:	a7 b9       	sbr	r9,0x7
8000221a:	91 09       	st.w	r8[0x0],r9
}
8000221c:	5e fc       	retal	r12

8000221e <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
8000221e:	fe 68 00 00 	mov	r8,-131072
80002222:	70 0c       	ld.w	r12,r8[0x0]
}
80002224:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002228:	5e fc       	retal	r12

8000222a <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
8000222a:	fe 68 00 00 	mov	r8,-131072
8000222e:	70 8c       	ld.w	r12,r8[0x20]
}
80002230:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80002234:	5e fc       	retal	r12

80002236 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
80002236:	fe 68 00 00 	mov	r8,-131072
8000223a:	70 8c       	ld.w	r12,r8[0x20]
}
8000223c:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80002240:	5e fc       	retal	r12
80002242:	d7 03       	nop

80002244 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002244:	48 28       	lddpc	r8,8000224c <udd_set_setup_payload+0x8>
	udd_g_ctrlreq.payload_size = payload_size;
80002246:	b0 6b       	st.h	r8[0xc],r11
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002248:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
}
8000224a:	5e fc       	retal	r12
8000224c:	00 00       	add	r0,r0
8000224e:	0c 98       	mov	r8,r6

80002250 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002250:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002254:	a3 6c       	lsl	r12,0x2
80002256:	e0 3c fe 40 	sub	r12,130624
8000225a:	78 0c       	ld.w	r12,r12[0x0]
}
8000225c:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002260:	5e fc       	retal	r12
80002262:	d7 03       	nop

80002264 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80002264:	d4 21       	pushm	r4-r7,lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index)
80002266:	30 39       	mov	r9,3


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002268:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
8000226c:	f2 08 18 00 	cp.b	r8,r9
80002270:	e0 8b 00 35 	brhi	800022da <udd_ep_set_halt+0x76>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002274:	f0 cb 00 01 	sub	r11,r8,1
80002278:	49 99       	lddpc	r9,800022dc <udd_ep_set_halt+0x78>
8000227a:	a5 6b       	lsl	r11,0x4
8000227c:	f2 0b 00 0b 	add	r11,r9,r11
	if (ptr_job->busy == true) {
80002280:	76 0c       	ld.w	r12,r11[0x0]
80002282:	58 0c       	cp.w	r12,0
80002284:	c2 b5       	brlt	800022da <udd_ep_set_halt+0x76>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
80002286:	fe 6e 01 30 	mov	lr,-130768
8000228a:	f0 0a 15 02 	lsl	r10,r8,0x2
8000228e:	f4 0e 00 09 	add	r9,r10,lr
80002292:	72 0e       	ld.w	lr,r9[0x0]
80002294:	fe 67 01 f0 	mov	r7,-130576
80002298:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
8000229c:	f4 07 00 09 	add	r9,r10,r7
800022a0:	58 0e       	cp.w	lr,0
800022a2:	c0 f0       	breq	800022c0 <udd_ep_set_halt+0x5c>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
800022a4:	18 9a       	mov	r10,r12
800022a6:	30 1c       	mov	r12,1
800022a8:	f5 dc d3 81 	bfins	r10,r12,0x1c,0x1
800022ac:	97 0a       	st.w	r11[0x0],r10
		udd_enable_bank_interrupt(index);
800022ae:	e0 6a 10 00 	mov	r10,4096
800022b2:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_interrupt(index);
800022b4:	f4 08 09 48 	lsl	r8,r10,r8
800022b8:	fe 69 00 00 	mov	r9,-131072
800022bc:	93 68       	st.w	r9[0x18],r8
800022be:	d8 22       	popm	r4-r7,pc
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
800022c0:	e0 3a ff 00 	sub	r10,130816
800022c4:	74 08       	ld.w	r8,r10[0x0]
800022c6:	a9 d8       	cbr	r8,0x9
800022c8:	95 08       	st.w	r10[0x0],r8
		udd_enable_stall_handshake(index);
800022ca:	e8 68 00 00 	mov	r8,524288
800022ce:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
800022d0:	30 1c       	mov	r12,1
800022d2:	e4 68 00 00 	mov	r8,262144
800022d6:	93 08       	st.w	r9[0x0],r8
800022d8:	d8 22       	popm	r4-r7,pc
800022da:	d8 2a       	popm	r4-r7,pc,r12=0
800022dc:	00 00       	add	r0,r0
800022de:	06 e8       	st.h	--r3,r8

800022e0 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800022e0:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
800022e2:	30 38       	mov	r8,3

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800022e4:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800022e8:	f0 0c 18 00 	cp.b	r12,r8
800022ec:	e0 88 00 03 	brls	800022f2 <udd_ep_clear_halt+0x12>
800022f0:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800022f2:	fe 6a 01 c0 	mov	r10,-130624
800022f6:	f8 09 15 02 	lsl	r9,r12,0x2
800022fa:	f2 0a 00 08 	add	r8,r9,r10
800022fe:	70 0a       	ld.w	r10,r8[0x0]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002300:	20 1c       	sub	r12,1
80002302:	49 58       	lddpc	r8,80002354 <udd_ep_clear_halt+0x74>
80002304:	a5 6c       	lsl	r12,0x4

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
80002306:	e6 1a 00 08 	andh	r10,0x8,COH
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
	ptr_job = &udd_ep_job[ep - 1];
8000230a:	18 08       	add	r8,r12

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
8000230c:	58 0a       	cp.w	r10,0
8000230e:	c0 51       	brne	80002318 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
80002310:	70 0a       	ld.w	r10,r8[0x0]
80002312:	ed ba 00 1c 	bld	r10,0x1c
80002316:	c1 d1       	brne	80002350 <udd_ep_clear_halt+0x70>
		// Remove request to stall
		ptr_job->stall_requested = false;
80002318:	70 0b       	ld.w	r11,r8[0x0]
		// Remove stall
		udd_disable_stall_handshake(ep);
8000231a:	fe 6c 02 20 	mov	r12,-130528
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
		// Remove request to stall
		ptr_job->stall_requested = false;
8000231e:	30 0a       	mov	r10,0
80002320:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002324:	91 0b       	st.w	r8[0x0],r11
		// Remove stall
		udd_disable_stall_handshake(ep);
80002326:	f2 0c 00 0b 	add	r11,r9,r12
8000232a:	e8 6c 00 00 	mov	r12,524288
8000232e:	97 0c       	st.w	r11[0x0],r12
		udd_enable_endpoint_bank_autoswitch(ep);	
80002330:	fe 6c 01 00 	mov	r12,-130816
80002334:	f2 0c 00 0b 	add	r11,r9,r12
80002338:	76 09       	ld.w	r9,r11[0x0]
8000233a:	a9 b9       	sbr	r9,0x9
8000233c:	97 09       	st.w	r11[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000233e:	70 09       	ld.w	r9,r8[0x0]
80002340:	58 09       	cp.w	r9,0
80002342:	c0 74       	brge	80002350 <udd_ep_clear_halt+0x70>
			ptr_job->busy = false;
80002344:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80002348:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
8000234a:	70 38       	ld.w	r8,r8[0xc]
8000234c:	5d 18       	icall	r8
8000234e:	da 0a       	popm	pc,r12=1
80002350:	da 0a       	popm	pc,r12=1
80002352:	d7 03       	nop
80002354:	00 00       	add	r0,r0
80002356:	06 e8       	st.h	--r3,r8

80002358 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002358:	d4 01       	pushm	lr
8000235a:	18 99       	mov	r9,r12
8000235c:	16 9c       	mov	r12,r11
	if (ptr_job->busy == false)
8000235e:	72 08       	ld.w	r8,r9[0x0]
80002360:	58 08       	cp.w	r8,0
80002362:	c0 a4       	brge	80002376 <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
80002364:	30 0a       	mov	r10,0
80002366:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000236a:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans)
8000236c:	72 38       	ld.w	r8,r9[0xc]
8000236e:	58 08       	cp.w	r8,0
80002370:	c0 30       	breq	80002376 <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80002372:	72 2b       	ld.w	r11,r9[0x8]
80002374:	5d 18       	icall	r8
80002376:	d8 02       	popm	pc

80002378 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002378:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
8000237a:	fe 69 00 00 	mov	r9,-131072
8000237e:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002382:	30 1b       	mov	r11,1
80002384:	72 7c       	ld.w	r12,r9[0x1c]
80002386:	f6 08 09 4a 	lsl	r10,r11,r8
8000238a:	5c da       	com	r10
8000238c:	18 6a       	and	r10,r12
8000238e:	93 7a       	st.w	r9[0x1c],r10

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002390:	f0 c9 00 01 	sub	r9,r8,1
80002394:	a5 69       	lsl	r9,0x4


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80002396:	a3 68       	lsl	r8,0x2

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002398:	48 5c       	lddpc	r12,800023ac <udd_ep_free+0x34>


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
8000239a:	e0 38 ff 00 	sub	r8,130816

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
8000239e:	12 0c       	add	r12,r9


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800023a0:	70 09       	ld.w	r9,r8[0x0]
800023a2:	a1 d9       	cbr	r9,0x1
800023a4:	91 09       	st.w	r8[0x0],r9

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800023a6:	cd 9f       	rcall	80002358 <udd_ep_finish_job>
800023a8:	d8 02       	popm	pc
void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
	udd_ep_abort_job(ep);
}
800023aa:	d7 03       	nop
800023ac:	00 00       	add	r0,r0
800023ae:	06 e8       	st.h	--r3,r8

800023b0 <udd_ep_run>:
800023b0:	d4 31       	pushm	r0-r7,lr
800023b2:	20 1d       	sub	sp,4
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
800023b4:	30 3e       	mov	lr,3
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
800023b6:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800023ba:	0e 96       	mov	r6,r7
800023bc:	fc 07 18 00 	cp.b	r7,lr
800023c0:	e0 8b 00 8c 	brhi	800024d8 <udd_ep_run+0x128>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800023c4:	fe 63 00 00 	mov	r3,-131072
800023c8:	66 7e       	ld.w	lr,r3[0x1c]
800023ca:	30 16       	mov	r6,1
800023cc:	ec 07 09 45 	lsl	r5,r6,r7
800023d0:	eb ee 00 0e 	and	lr,r5,lr
800023d4:	e0 80 00 82 	breq	800024d8 <udd_ep_run+0x128>
			|| Is_udd_endpoint_stall_requested(ep)
800023d8:	ee 0e 15 02 	lsl	lr,r7,0x2
800023dc:	50 0e       	stdsp	sp[0x0],lr
800023de:	e0 3e fe 40 	sub	lr,130624
800023e2:	7c 0e       	ld.w	lr,lr[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800023e4:	e6 1e 00 08 	andh	lr,0x8,COH
800023e8:	c7 81       	brne	800024d8 <udd_ep_run+0x128>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800023ea:	ee c2 00 01 	sub	r2,r7,1
800023ee:	4b d5       	lddpc	r5,800024e0 <udd_ep_run+0x130>
800023f0:	e4 0e 15 04 	lsl	lr,r2,0x4
800023f4:	ea 0e 00 0e 	add	lr,r5,lr

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800023f8:	7c 04       	ld.w	r4,lr[0x0]
800023fa:	e6 14 10 00 	andh	r4,0x1000,COH
800023fe:	c6 d1       	brne	800024d8 <udd_ep_run+0x128>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002400:	e1 b1 00 00 	mfsr	r1,0x0
	cpu_irq_disable();
80002404:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002406:	7c 00       	ld.w	r0,lr[0x0]
80002408:	00 95       	mov	r5,r0
8000240a:	e6 15 80 00 	andh	r5,0x8000,COH
8000240e:	c0 50       	breq	80002418 <udd_ep_run+0x68>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002410:	e3 b1 00 00 	mtsr	0x0,r1
#endif
	barrier();
80002414:	08 9c       	mov	r12,r4
		cpu_irq_restore(flags);
		return false;	// Job already on going
80002416:	c6 28       	rjmp	800024da <udd_ep_run+0x12a>
	}
	ptr_job->busy = true;
80002418:	e1 d6 d3 e1 	bfins	r0,r6,0x1f,0x1
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
8000241c:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
80002420:	9d 00       	st.w	lr[0x0],r0
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002422:	e3 b1 00 00 	mtsr	0x0,r1
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
	ptr_job->call_trans = callback;
80002426:	9d 38       	st.w	lr[0xc],r8
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
80002428:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->call_trans = callback;
	ptr_job->b_raise_dma = false;
8000242a:	7c 08       	ld.w	r8,lr[0x0]
8000242c:	f1 d5 d3 a1 	bfins	r8,r5,0x1d,0x1
80002430:	9d 08       	st.w	lr[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002432:	e0 49 ff ff 	cp.w	r9,65535
80002436:	e0 88 00 07 	brls	80002444 <udd_ep_run+0x94>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
8000243a:	e0 78 00 00 	mov	r8,65536
8000243e:	0a 99       	mov	r9,r5
80002440:	9d 28       	st.w	lr[0x8],r8
80002442:	c2 b8       	rjmp	80002498 <udd_ep_run+0xe8>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
80002444:	9d 29       	st.w	lr[0x8],r9
		if (b_dir_in) {
80002446:	58 0c       	cp.w	r12,0
80002448:	c2 80       	breq	80002498 <udd_ep_run+0xe8>
			if (buf_size==0) {
8000244a:	58 09       	cp.w	r9,0
8000244c:	c1 21       	brne	80002470 <udd_ep_run+0xc0>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
				ptr_job->b_send_zlp = true;
8000244e:	bd b8       	sbr	r8,0x1d
80002450:	f1 d6 d3 c1 	bfins	r8,r6,0x1e,0x1
80002454:	9d 08       	st.w	lr[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002456:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000245a:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
8000245c:	fc 19 02 00 	movh	r9,0x200
80002460:	f2 02 09 42 	lsl	r2,r9,r2
80002464:	87 62       	st.w	r3[0x18],r2
				udd_raise_endpoint_dma_interrupt(ep);
80002466:	87 32       	st.w	r3[0xc],r2
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002468:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
8000246c:	0c 9c       	mov	r12,r6
				cpu_irq_restore(flags);
				return true;
8000246e:	c3 68       	rjmp	800024da <udd_ep_run+0x12a>
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002470:	40 04       	lddsp	r4,sp[0x0]
80002472:	e0 34 ff 00 	sub	r4,130816
80002476:	68 04       	ld.w	r4,r4[0x0]
80002478:	30 83       	mov	r3,8
8000247a:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
8000247e:	e6 04 09 44 	lsl	r4,r3,r4
80002482:	20 14       	sub	r4,1
80002484:	12 64       	and	r4,r9
80002486:	c0 60       	breq	80002492 <udd_ep_run+0xe2>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
80002488:	f1 d5 d3 c1 	bfins	r8,r5,0x1e,0x1
8000248c:	0c 9b       	mov	r11,r6
8000248e:	9d 08       	st.w	lr[0x0],r8
80002490:	c0 48       	rjmp	80002498 <udd_ep_run+0xe8>
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
80002492:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002496:	9d 08       	st.w	lr[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002498:	ee 08 15 04 	lsl	r8,r7,0x4
8000249c:	e0 38 fd 00 	sub	r8,130304
800024a0:	91 1a       	st.w	r8[0x4],r10
	if (b_shortpacket) {
800024a2:	58 0b       	cp.w	r11,0
800024a4:	c0 60       	breq	800024b0 <udd_ep_run+0x100>
		if (b_dir_in) {
800024a6:	58 0c       	cp.w	r12,0
800024a8:	f9 bb 01 08 	movne	r11,8
800024ac:	f9 bb 00 14 	moveq	r11,20
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800024b0:	b1 69       	lsl	r9,0x10
800024b2:	e8 19 00 21 	orl	r9,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800024b6:	16 49       	or	r9,r11
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800024b8:	91 29       	st.w	r8[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024ba:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024be:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800024c0:	fc 19 02 00 	movh	r9,0x200
800024c4:	20 17       	sub	r7,1
800024c6:	f2 07 09 47 	lsl	r7,r9,r7
800024ca:	fe 69 00 00 	mov	r9,-131072
800024ce:	93 67       	st.w	r9[0x18],r7
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800024d0:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800024d4:	30 1c       	mov	r12,1
	cpu_irq_restore(flags);

	return true;
800024d6:	c0 28       	rjmp	800024da <udd_ep_run+0x12a>
800024d8:	30 0c       	mov	r12,0
}
800024da:	2f fd       	sub	sp,-4
800024dc:	d8 32       	popm	r0-r7,pc
800024de:	d7 03       	nop
800024e0:	00 00       	add	r0,r0
800024e2:	06 e8       	st.h	--r3,r8

800024e4 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
800024e4:	49 08       	lddpc	r8,80002524 <udd_sleep_mode+0x40>
	if (!b_idle && udd_b_idle) {
800024e6:	58 0c       	cp.w	r12,0
800024e8:	c0 c1       	brne	80002500 <udd_sleep_mode+0x1c>
800024ea:	11 89       	ld.ub	r9,r8[0x0]
800024ec:	f8 09 18 00 	cp.b	r9,r12
800024f0:	c1 60       	breq	8000251c <udd_sleep_mode+0x38>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024f2:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800024f6:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800024f8:	48 c8       	lddpc	r8,80002528 <udd_sleep_mode+0x44>
800024fa:	11 9a       	ld.ub	r10,r8[0x1]
800024fc:	2f fa       	sub	r10,-1
800024fe:	c0 c8       	rjmp	80002516 <udd_sleep_mode+0x32>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002500:	11 89       	ld.ub	r9,r8[0x0]
80002502:	30 08       	mov	r8,0
80002504:	f0 09 18 00 	cp.b	r9,r8
80002508:	c0 a1       	brne	8000251c <udd_sleep_mode+0x38>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000250a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000250e:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002510:	48 68       	lddpc	r8,80002528 <udd_sleep_mode+0x44>
80002512:	11 9a       	ld.ub	r10,r8[0x1]
80002514:	20 1a       	sub	r10,1
80002516:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002518:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000251c:	48 28       	lddpc	r8,80002524 <udd_sleep_mode+0x40>
8000251e:	b0 8c       	st.b	r8[0x0],r12
}
80002520:	5e fc       	retal	r12
80002522:	d7 03       	nop
80002524:	00 00       	add	r0,r0
80002526:	07 18       	ld.sh	r8,r3++
80002528:	00 00       	add	r0,r0
8000252a:	0c b0       	st.h	r6++,r0

8000252c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
8000252c:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000252e:	fe 68 00 00 	mov	r8,-131072
80002532:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002536:	af c9       	cbr	r9,0xe
80002538:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
8000253c:	70 09       	ld.w	r9,r8[0x0]
8000253e:	a9 a9       	sbr	r9,0x8
	udd_sleep_mode(false);
80002540:	30 0c       	mov	r12,0

void udd_detach(void)
{
	otg_unfreeze_clock();
	// Detach device from the bus
	udd_detach_device();
80002542:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002544:	cd 0f       	rcall	800024e4 <udd_sleep_mode>
80002546:	d8 02       	popm	pc

80002548 <udd_ctrl_init>:
}
80002548:	e1 b8 00 00 	mfsr	r8,0x0
8000254c:	d3 03       	ssrf	0x10
8000254e:	30 1a       	mov	r10,1
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002550:	fe 69 02 20 	mov	r9,-130528
80002554:	93 0a       	st.w	r9[0x0],r10
80002556:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
8000255a:	48 79       	lddpc	r9,80002574 <udd_ctrl_init+0x2c>
8000255c:	30 08       	mov	r8,0
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
8000255e:	b2 68       	st.h	r9[0xc],r8
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
80002560:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002562:	93 58       	st.w	r9[0x14],r8
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002564:	fe 69 01 60 	mov	r9,-130720
80002568:	30 2a       	mov	r10,2
8000256a:	93 0a       	st.w	r9[0x0],r10

	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000256c:	48 39       	lddpc	r9,80002578 <udd_ctrl_init+0x30>
8000256e:	93 08       	st.w	r9[0x0],r8
}
80002570:	5e fc       	retal	r12
80002572:	d7 03       	nop
80002574:	00 00       	add	r0,r0
80002576:	0c 98       	mov	r8,r6
80002578:	00 00       	add	r0,r0
8000257a:	07 1c       	ld.sh	r12,r3++

8000257c <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
8000257c:	d4 31       	pushm	r0-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000257e:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002582:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80002584:	30 1a       	mov	r10,1
80002586:	fe 69 02 20 	mov	r9,-130528
8000258a:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000258c:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002590:	4b a9       	lddpc	r9,80002678 <udd_ctrl_in_sent+0xfc>
80002592:	4b b6       	lddpc	r6,8000267c <udd_ctrl_in_sent+0x100>
80002594:	72 08       	ld.w	r8,r9[0x0]
80002596:	58 38       	cp.w	r8,3
80002598:	c0 71       	brne	800025a6 <udd_ctrl_in_sent+0x2a>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000259a:	6c 48       	ld.w	r8,r6[0x10]
8000259c:	58 08       	cp.w	r8,0
8000259e:	c0 20       	breq	800025a2 <udd_ctrl_in_sent+0x26>
		udd_g_ctrlreq.callback();
800025a0:	5d 18       	icall	r8

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
800025a2:	cd 3f       	rcall	80002548 <udd_ctrl_init>
800025a4:	d8 32       	popm	r0-r7,pc
		return;
800025a6:	8c 68       	ld.sh	r8,r6[0xc]
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800025a8:	4b 64       	lddpc	r4,80002680 <udd_ctrl_in_sent+0x104>
800025aa:	88 07       	ld.sh	r7,r4[0x0]
800025ac:	f0 07 01 07 	sub	r7,r8,r7
800025b0:	5c 87       	casts.h	r7
800025b2:	c2 f1       	brne	80002610 <udd_ctrl_in_sent+0x94>
	if (0 == nb_remain) {
800025b4:	4b 43       	lddpc	r3,80002684 <udd_ctrl_in_sent+0x108>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
800025b6:	07 8b       	ld.ub	r11,r3[0x0]
800025b8:	ee 0b 18 00 	cp.b	r11,r7
800025bc:	c0 e1       	brne	800025d8 <udd_ctrl_in_sent+0x5c>
800025be:	30 48       	mov	r8,4

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800025c0:	93 08       	st.w	r9[0x0],r8
800025c2:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025c6:	d3 03       	ssrf	0x10
	cpu_irq_disable();
800025c8:	31 08       	mov	r8,16
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
800025ca:	fe 6a 01 60 	mov	r10,-130720
800025ce:	95 08       	st.w	r10[0x0],r8
800025d0:	fe 6a 01 f0 	mov	r10,-130576
	udd_enable_nak_in_interrupt(0);
800025d4:	95 08       	st.w	r10[0x0],r8
800025d6:	c4 e8       	rjmp	80002672 <udd_ctrl_in_sent+0xf6>
800025d8:	5c 78       	castu.h	r8
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800025da:	4a c5       	lddpc	r5,80002688 <udd_ctrl_in_sent+0x10c>
800025dc:	8c b9       	ld.uh	r9,r6[0x6]
800025de:	8a 8a       	ld.uh	r10,r5[0x0]
800025e0:	14 08       	add	r8,r10
800025e2:	10 39       	cp.w	r9,r8
800025e4:	e0 89 00 07 	brgt	800025f2 <udd_ctrl_in_sent+0x76>
800025e8:	6c 5c       	ld.w	r12,r6[0x14]
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
800025ea:	58 0c       	cp.w	r12,0
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800025ec:	c0 30       	breq	800025f2 <udd_ctrl_in_sent+0x76>
800025ee:	5d 1c       	icall	r12
800025f0:	c0 51       	brne	800025fa <udd_ctrl_in_sent+0x7e>
800025f2:	30 09       	mov	r9,0
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
800025f4:	4a 48       	lddpc	r8,80002684 <udd_ctrl_in_sent+0x108>
800025f6:	b0 89       	st.b	r8[0x0],r9
800025f8:	c1 18       	rjmp	8000261a <udd_ctrl_in_sent+0x9e>
800025fa:	88 09       	ld.sh	r9,r4[0x0]
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
800025fc:	8a 08       	ld.sh	r8,r5[0x0]
800025fe:	f2 08 00 08 	add	r8,r9,r8
80002602:	a8 07       	st.h	r4[0x0],r7
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
80002604:	aa 08       	st.h	r5[0x0],r8
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
80002606:	8c 67       	ld.sh	r7,r6[0xc]
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
			nb_remain = udd_g_ctrlreq.payload_size;
80002608:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
8000260c:	5f 08       	sreq	r8
8000260e:	a6 88       	st.b	r3[0x0],r8
80002610:	34 08       	mov	r8,64
							USB_DEVICE_EP_CTRL_SIZE)
					== 0);
		}
	}
	// Continue transfer and send next data
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
80002612:	ee 08 19 00 	cp.h	r8,r7
80002616:	f9 b7 03 40 	movlo	r7,64
8000261a:	49 98       	lddpc	r8,8000267c <udd_ctrl_in_sent+0x100>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000261c:	70 2b       	ld.w	r11,r8[0x8]
8000261e:	49 98       	lddpc	r8,80002680 <udd_ctrl_in_sent+0x104>
80002620:	90 0a       	ld.sh	r10,r8[0x0]
80002622:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002626:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80002628:	fe 68 01 30 	mov	r8,-130768
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000262c:	70 08       	ld.w	r8,r8[0x0]
8000262e:	ed b8 00 01 	bld	r8,0x1
80002632:	c0 70       	breq	80002640 <udd_ctrl_in_sent+0xc4>
80002634:	5c 7a       	castu.h	r10
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002636:	fc 18 e0 00 	movh	r8,0xe000
8000263a:	f6 0a 00 0a 	add	r10,r11,r10
8000263e:	c0 98       	rjmp	80002650 <udd_ctrl_in_sent+0xd4>
80002640:	e3 b9 00 00 	mtsr	0x0,r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002644:	30 49       	mov	r9,4
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002646:	48 d8       	lddpc	r8,80002678 <udd_ctrl_in_sent+0xfc>
80002648:	91 09       	st.w	r8[0x0],r9
8000264a:	d8 32       	popm	r0-r7,pc
		return;	// Exit of IN DATA phase
8000264c:	15 3b       	ld.ub	r11,r10++
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
8000264e:	10 cb       	st.b	r8++,r11
80002650:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002654:	ee 0b 19 00 	cp.h	r11,r7
80002658:	cf a3       	brcs	8000264c <udd_ctrl_in_sent+0xd0>
8000265a:	30 1a       	mov	r10,1
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000265c:	fe 68 01 60 	mov	r8,-130720
80002660:	91 0a       	st.w	r8[0x0],r10
80002662:	fe 6b 01 f0 	mov	r11,-130576
	udd_enable_in_send_interrupt(0);
80002666:	48 78       	lddpc	r8,80002680 <udd_ctrl_in_sent+0x104>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80002668:	97 0a       	st.w	r11[0x0],r10

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
8000266a:	90 0a       	ld.sh	r10,r8[0x0]
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000266c:	f4 07 00 07 	add	r7,r10,r7
80002670:	b0 07       	st.h	r8[0x0],r7
80002672:	e3 b9 00 00 	mtsr	0x0,r9
80002676:	d8 32       	popm	r0-r7,pc
#endif
	barrier();
80002678:	00 00       	add	r0,r0
8000267a:	07 1c       	ld.sh	r12,r3++
8000267c:	00 00       	add	r0,r0
8000267e:	0c 98       	mov	r8,r6
80002680:	00 00       	add	r0,r0
80002682:	07 1a       	ld.sh	r10,r3++
80002684:	00 00       	add	r0,r0
80002686:	07 20       	ld.uh	r0,r3++
80002688:	00 00       	add	r0,r0
8000268a:	06 e4       	st.h	--r3,r4

8000268c <udd_ep_alloc>:
8000268c:	d4 21       	pushm	r4-r7,lr
8000268e:	30 39       	mov	r9,3
80002690:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP)
80002694:	f2 08 18 00 	cp.b	r8,r9
80002698:	e0 8b 00 88 	brhi	800027a8 <udd_ep_alloc+0x11c>
		return false;
	if (Is_udd_endpoint_enabled(ep))
8000269c:	fe 69 00 00 	mov	r9,-131072
800026a0:	72 76       	ld.w	r6,r9[0x1c]
800026a2:	30 17       	mov	r7,1
800026a4:	ee 08 09 4e 	lsl	lr,r7,r8
800026a8:	fd e6 00 06 	and	r6,lr,r6
800026ac:	c7 e1       	brne	800027a8 <udd_ep_alloc+0x11c>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
800026ae:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
800026b2:	0e 39       	cp.w	r9,r7
800026b4:	c7 a5       	brlt	800027a8 <udd_ep_alloc+0x11c>
800026b6:	58 29       	cp.w	r9,2
800026b8:	e0 8a 00 05 	brle	800026c2 <udd_ep_alloc+0x36>
800026bc:	58 39       	cp.w	r9,3
800026be:	c7 51       	brne	800027a8 <udd_ep_alloc+0x11c>
800026c0:	c0 28       	rjmp	800026c4 <udd_ep_alloc+0x38>
800026c2:	0e 96       	mov	r6,r7
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
800026c4:	5c 7a       	castu.h	r10
800026c6:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
800026ca:	ab 7b       	lsl	r11,0xb
800026cc:	a3 66       	lsl	r6,0x2
800026ce:	e2 1b 18 00 	andl	r11,0x1800,COH
800026d2:	e2 16 00 0c 	andl	r6,0xc,COH
800026d6:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
800026da:	f0 09 15 02 	lsl	r9,r8,0x2
800026de:	30 8c       	mov	r12,8
800026e0:	e0 39 ff 00 	sub	r9,130816
800026e4:	f4 0c 0c 4c 	max	r12,r10,r12
800026e8:	72 07       	ld.w	r7,r9[0x0]
800026ea:	e0 6a 04 00 	mov	r10,1024
800026ee:	e0 17 e6 83 	andl	r7,0xe683
800026f2:	f8 0a 0d 4c 	min	r12,r12,r10
800026f6:	a1 7c       	lsl	r12,0x1
800026f8:	20 1c       	sub	r12,1
800026fa:	f8 0c 12 00 	clz	r12,r12
800026fe:	f8 0c 11 1c 	rsub	r12,r12,28
80002702:	f7 ec 10 4b 	or	r11,r11,r12<<0x4
80002706:	0c 4b       	or	r11,r6
80002708:	e2 1b 19 7c 	andl	r11,0x197c,COH
8000270c:	f7 e7 10 07 	or	r7,r11,r7
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002710:	5c 8e       	casts.h	lr
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002712:	93 07       	st.w	r9[0x0],r7
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002714:	fe 6a 01 0c 	mov	r10,-130804
80002718:	30 39       	mov	r9,3

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
8000271a:	fe 6b 00 00 	mov	r11,-131072
8000271e:	30 17       	mov	r7,1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002720:	c1 58       	rjmp	8000274a <udd_ep_alloc+0xbe>
		if (Is_udd_endpoint_enabled(i)) {
80002722:	76 76       	ld.w	r6,r11[0x1c]
80002724:	ee 09 09 4c 	lsl	r12,r7,r9
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
80002728:	f8 05 11 ff 	rsub	r5,r12,-1
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
8000272c:	f9 e6 00 06 	and	r6,r12,r6
80002730:	c0 b0       	breq	80002746 <udd_ep_alloc+0xba>
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
80002732:	76 76       	ld.w	r6,r11[0x1c]
80002734:	eb e6 00 06 	and	r6,r5,r6
80002738:	97 76       	st.w	r11[0x1c],r6
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
8000273a:	f9 ee 10 0e 	or	lr,r12,lr
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
8000273e:	74 0c       	ld.w	r12,r10[0x0]
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
80002740:	5c 8e       	casts.h	lr
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
80002742:	a1 dc       	cbr	r12,0x1
80002744:	95 0c       	st.w	r10[0x0],r12
80002746:	20 19       	sub	r9,1
80002748:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000274a:	f0 09 18 00 	cp.b	r9,r8
8000274e:	fe 9b ff ea 	brhi	80002722 <udd_ep_alloc+0x96>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80002752:	5c 7e       	castu.h	lr
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
80002754:	fe 6a 00 00 	mov	r10,-131072
80002758:	30 17       	mov	r7,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000275a:	30 3c       	mov	r12,3
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
8000275c:	fe 66 01 00 	mov	r6,-130816
80002760:	f0 0b 15 02 	lsl	r11,r8,0x2
			udd_enable_endpoint(i);
80002764:	ee 08 09 45 	lsl	r5,r7,r8
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
80002768:	f6 06 00 09 	add	r9,r11,r6
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000276c:	f0 c6 ff ff 	sub	r6,r8,-1
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i))
80002770:	e0 3b fe d0 	sub	r11,130768
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80002774:	fc 08 08 48 	asr	r8,lr,r8
80002778:	ed b8 00 00 	bld	r8,0x0
8000277c:	c0 f1       	brne	8000279a <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
8000277e:	72 08       	ld.w	r8,r9[0x0]
80002780:	a1 b8       	sbr	r8,0x1
80002782:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint(i);
80002784:	74 78       	ld.w	r8,r10[0x1c]
80002786:	eb e8 10 08 	or	r8,r5,r8
8000278a:	95 78       	st.w	r10[0x1c],r8
			if (!Is_udd_endpoint_configured(i))
8000278c:	76 08       	ld.w	r8,r11[0x0]
8000278e:	ed b8 00 12 	bld	r8,0x12
80002792:	c0 b1       	brne	800027a8 <udd_ep_alloc+0x11c>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002794:	72 08       	ld.w	r8,r9[0x0]
80002796:	a9 b8       	sbr	r8,0x9
80002798:	93 08       	st.w	r9[0x0],r8
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000279a:	f1 d6 c0 08 	bfextu	r8,r6,0x0,0x8
8000279e:	f8 08 18 00 	cp.b	r8,r12
800027a2:	fe 98 ff dd 	brls	8000275c <udd_ep_alloc+0xd0>
800027a6:	da 2a       	popm	r4-r7,pc,r12=1
800027a8:	d8 2a       	popm	r4-r7,pc,r12=0

800027aa <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
800027aa:	fe 68 00 00 	mov	r8,-131072
800027ae:	70 09       	ld.w	r9,r8[0x0]
800027b0:	e0 19 ff 80 	andl	r9,0xff80
800027b4:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800027b6:	30 8c       	mov	r12,8
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
	udd_enable_address();
800027b8:	70 09       	ld.w	r9,r8[0x0]
800027ba:	a7 b9       	sbr	r9,0x7
800027bc:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800027be:	34 0b       	mov	r11,64
800027c0:	fe 69 01 00 	mov	r9,-130816
800027c4:	f6 0c 0c 4b 	max	r11,r11,r12
800027c8:	72 0a       	ld.w	r10,r9[0x0]
800027ca:	e0 6c 04 00 	mov	r12,1024
800027ce:	e0 1a e6 83 	andl	r10,0xe683
800027d2:	f6 0c 0d 4b 	min	r11,r11,r12
800027d6:	a1 7b       	lsl	r11,0x1
800027d8:	20 1b       	sub	r11,1
800027da:	f6 0b 12 00 	clz	r11,r11
800027de:	f6 0b 11 1c 	rsub	r11,r11,28
800027e2:	a5 6b       	lsl	r11,0x4
800027e4:	e2 1b 19 7c 	andl	r11,0x197c,COH
800027e8:	f7 ea 10 0a 	or	r10,r11,r10
800027ec:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
800027ee:	72 0a       	ld.w	r10,r9[0x0]
800027f0:	a1 ba       	sbr	r10,0x1
800027f2:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
800027f4:	70 79       	ld.w	r9,r8[0x1c]
800027f6:	a1 a9       	sbr	r9,0x0
800027f8:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027fa:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800027fe:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002800:	fe 69 01 f0 	mov	r9,-130576
80002804:	30 4b       	mov	r11,4
80002806:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002808:	30 2b       	mov	r11,2
8000280a:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
8000280c:	e0 69 10 00 	mov	r9,4096
80002810:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002812:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002816:	5e fc       	retal	r12

80002818 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002818:	d4 21       	pushm	r4-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000281a:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000281e:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
	otg_unfreeze_clock();
80002820:	fe 67 00 00 	mov	r7,-131072
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002824:	30 1c       	mov	r12,1
80002826:	c5 fe       	rcall	800024e4 <udd_sleep_mode>
80002828:	ee f8 08 00 	ld.w	r8,r7[2048]
	otg_unfreeze_clock();
8000282c:	af c8       	cbr	r8,0xe
8000282e:	ef 48 08 00 	st.w	r7[2048],r8
80002832:	6e 08       	ld.w	r8,r7[0x0]
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002834:	a9 c8       	cbr	r8,0x8
80002836:	8f 08       	st.w	r7[0x0],r8
80002838:	e0 a0 06 e6 	rcall	80003604 <udc_reset>

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
8000283c:	cb 7f       	rcall	800027aa <udd_reset_ep_ctrl>
	udd_reset_ep_ctrl();	// Reset endpoint control
8000283e:	c8 5e       	rcall	80002548 <udd_ctrl_init>
80002840:	30 8b       	mov	r11,8
	udd_ctrl_init();	// Reset endpoint control management
80002842:	8f 6b       	st.w	r7[0x18],r11
80002844:	30 19       	mov	r9,1

	// Enable USB line events
	udd_enable_reset_interrupt();
80002846:	8f 69       	st.w	r7[0x18],r9
80002848:	31 08       	mov	r8,16
	udd_enable_suspend_interrupt();
8000284a:	8f 68       	st.w	r7[0x18],r8
8000284c:	30 4a       	mov	r10,4
	udd_enable_wake_up_interrupt();
8000284e:	8f 6a       	st.w	r7[0x18],r10
80002850:	8f 2b       	st.w	r7[0x8],r11
	udd_enable_sof_interrupt();
80002852:	8f 2a       	st.w	r7[0x8],r10
80002854:	30 2a       	mov	r10,2
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002856:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_sof();
80002858:	8f 29       	st.w	r7[0x8],r9
	udd_ack_msof();
8000285a:	8f 28       	st.w	r7[0x8],r8
8000285c:	ee f8 08 00 	ld.w	r8,r7[2048]
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002860:	af a8       	sbr	r8,0xe
	otg_freeze_clock();
80002862:	ef 48 08 00 	st.w	r7[2048],r8
80002866:	e3 b6 00 00 	mtsr	0x0,r6
8000286a:	d8 22       	popm	r4-r7,pc

8000286c <udd_enable>:
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000286c:	d4 21       	pushm	r4-r7,lr
8000286e:	e0 a0 03 bd 	rcall	80002fe8 <sysclk_enable_usb>
	cpu_irq_restore(flags);
}
80002872:	e1 b6 00 00 	mfsr	r6,0x0
80002876:	d3 03       	ssrf	0x10
80002878:	fe 67 00 00 	mov	r7,-131072
8000287c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002880:	af d8       	cbr	r8,0xf
80002882:	ef 48 08 00 	st.w	r7[2048],r8

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
	(void)Is_otg_enabled();
80002886:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
8000288a:	30 0a       	mov	r10,0
8000288c:	e0 6b 02 20 	mov	r11,544
80002890:	fe cc ff 34 	sub	r12,pc,-204
80002894:	fe b0 fc 5e 	rcall	80002150 <INTC_register_interrupt>
	otg_force_device_mode();
80002898:	ee f8 08 00 	ld.w	r8,r7[2048]
8000289c:	b9 b8       	sbr	r8,0x19
8000289e:	ef 48 08 00 	st.w	r7[2048],r8
800028a2:	ee f8 08 00 	ld.w	r8,r7[2048]
800028a6:	b9 c8       	cbr	r8,0x18
800028a8:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
800028ac:	ee f8 08 00 	ld.w	r8,r7[2048]
800028b0:	ad c8       	cbr	r8,0xc
800028b2:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
800028b6:	ee f8 08 00 	ld.w	r8,r7[2048]
800028ba:	ad a8       	sbr	r8,0xc
800028bc:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
800028c0:	ee f8 08 00 	ld.w	r8,r7[2048]
800028c4:	af b8       	sbr	r8,0xf
800028c6:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
800028ca:	ee f8 08 00 	ld.w	r8,r7[2048]
800028ce:	af c8       	cbr	r8,0xe
800028d0:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
800028d4:	ee f8 08 00 	ld.w	r8,r7[2048]

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
800028d8:	6e 08       	ld.w	r8,r7[0x0]
800028da:	ad c8       	cbr	r8,0xc
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
800028dc:	8f 08       	st.w	r7[0x0],r8
800028de:	6e 08       	ld.w	r8,r7[0x0]
800028e0:	e8 18 0c 00 	orl	r8,0xc00
#  endif
#endif
	udd_enable_vbus_interrupt();
800028e4:	8f 08       	st.w	r7[0x0],r8
800028e6:	ee f8 08 00 	ld.w	r8,r7[2048]
800028ea:	a1 b8       	sbr	r8,0x1
800028ec:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
800028f0:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
800028f4:	af a8       	sbr	r8,0xe
#  else
	udd_high_speed_disable();
#  endif
#endif
	udd_enable_vbus_interrupt();
	otg_freeze_clock();
800028f6:	30 09       	mov	r9,0
800028f8:	ef 48 08 00 	st.w	r7[2048],r8

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
800028fc:	49 58       	lddpc	r8,80002950 <udd_enable+0xe4>
		udd_ep_job[i].stall_requested = false;
800028fe:	70 0a       	ld.w	r10,r8[0x0]
80002900:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002904:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002908:	91 0a       	st.w	r8[0x0],r10
		udd_ep_job[i].stall_requested = false;
8000290a:	70 4a       	ld.w	r10,r8[0x10]
8000290c:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002910:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002914:	91 4a       	st.w	r8[0x10],r10
		udd_ep_job[i].stall_requested = false;
80002916:	70 8a       	ld.w	r10,r8[0x20]
80002918:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
8000291c:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
#  endif
#endif
	udd_enable_vbus_interrupt();
	otg_freeze_clock();
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002920:	91 8a       	st.w	r8[0x20],r10
80002922:	fe 78 0c 00 	mov	r8,-62464
80002926:	30 1b       	mov	r11,1
80002928:	f0 fa 01 44 	ld.w	r10,r8[324]
8000292c:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002930:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002934:	48 88       	lddpc	r8,80002954 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002936:	b0 89       	st.b	r8[0x0],r9
80002938:	e1 b9 00 00 	mfsr	r9,0x0
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
8000293c:	d3 03       	ssrf	0x10
8000293e:	48 78       	lddpc	r8,80002958 <udd_enable+0xec>
80002940:	11 ba       	ld.ub	r10,r8[0x3]
80002942:	2f fa       	sub	r10,-1
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002944:	b0 ba       	st.b	r8[0x3],r10
80002946:	e3 b9 00 00 	mtsr	0x0,r9
8000294a:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
8000294e:	d8 22       	popm	r4-r7,pc
80002950:	00 00       	add	r0,r0
80002952:	06 e8       	st.h	--r3,r8
80002954:	00 00       	add	r0,r0
80002956:	07 18       	ld.sh	r8,r3++
80002958:	00 00       	add	r0,r0
8000295a:	0c b0       	st.h	r6++,r0

8000295c <udd_interrupt>:
8000295c:	eb cd 40 fe 	pushm	r1-r7,lr
80002960:	fe 68 00 00 	mov	r8,-131072
80002964:	70 19       	ld.w	r9,r8[0x4]
80002966:	ed b9 00 02 	bld	r9,0x2
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
	if (Is_udd_sof()) {
8000296a:	c0 a1       	brne	8000297e <udd_interrupt+0x22>
		udd_ack_sof();
8000296c:	30 49       	mov	r9,4
8000296e:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002970:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002974:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002978:	e0 81 02 98 	brne	80002ea8 <udd_interrupt+0x54c>
8000297c:	c0 78       	rjmp	8000298a <udd_interrupt+0x2e>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
8000297e:	70 19       	ld.w	r9,r8[0x4]
80002980:	ed b9 00 01 	bld	r9,0x1
80002984:	c0 71       	brne	80002992 <udd_interrupt+0x36>
		udd_ack_msof();
80002986:	30 29       	mov	r9,2
80002988:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
8000298a:	e0 a0 05 8f 	rcall	800034a8 <udc_sof_notify>
		goto udd_interrupt_end;
8000298e:	e0 8f 02 8d 	bral	80002ea8 <udd_interrupt+0x54c>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002992:	70 18       	ld.w	r8,r8[0x4]
80002994:	ed b8 00 0c 	bld	r8,0xc
80002998:	e0 81 01 79 	brne	80002c8a <udd_interrupt+0x32e>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000299c:	fe 68 02 20 	mov	r8,-130528
800029a0:	31 09       	mov	r9,16
800029a2:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
800029a4:	30 89       	mov	r9,8
800029a6:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
800029a8:	fe 69 01 30 	mov	r9,-130768
800029ac:	72 08       	ld.w	r8,r9[0x0]
800029ae:	ed b8 00 02 	bld	r8,0x2
800029b2:	c7 51       	brne	80002a9c <udd_interrupt+0x140>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
800029b4:	4c 18       	lddpc	r8,80002ab8 <udd_interrupt+0x15c>
800029b6:	70 08       	ld.w	r8,r8[0x0]
800029b8:	58 08       	cp.w	r8,0
800029ba:	c0 80       	breq	800029ca <udd_interrupt+0x6e>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
800029bc:	4c 08       	lddpc	r8,80002abc <udd_interrupt+0x160>
800029be:	70 48       	ld.w	r8,r8[0x10]
800029c0:	58 08       	cp.w	r8,0
800029c2:	c0 20       	breq	800029c6 <udd_interrupt+0x6a>
		udd_g_ctrlreq.callback();
800029c4:	5d 18       	icall	r8
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
800029c6:	fe b0 fd c1 	rcall	80002548 <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
800029ca:	fe 68 01 30 	mov	r8,-130768
800029ce:	70 08       	ld.w	r8,r8[0x0]
800029d0:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
800029d4:	58 88       	cp.w	r8,8
800029d6:	c2 61       	brne	80002a22 <udd_interrupt+0xc6>
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
800029d8:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
800029dc:	4b 8a       	lddpc	r10,80002abc <udd_interrupt+0x160>
800029de:	fc 19 20 00 	movh	r9,0x2000
800029e2:	f0 0a 00 0b 	add	r11,r8,r10
800029e6:	11 3c       	ld.ub	r12,r8++
800029e8:	f6 09 0b 0c 	st.b	r11[r9],r12
800029ec:	4b 47       	lddpc	r7,80002abc <udd_interrupt+0x160>
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
800029ee:	30 8e       	mov	lr,8
800029f0:	ea 1e e0 00 	orh	lr,0xe000
800029f4:	1c 38       	cp.w	r8,lr
800029f6:	cf 61       	brne	800029e2 <udd_interrupt+0x86>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
800029f8:	8e 9a       	ld.uh	r10,r7[0x2]
800029fa:	f4 0b 16 08 	lsr	r11,r10,0x8
800029fe:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a02:	8e a9       	ld.uh	r9,r7[0x4]
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002a04:	ae 1a       	st.h	r7[0x2],r10
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a06:	f2 0a 16 08 	lsr	r10,r9,0x8
80002a0a:	f5 e9 10 89 	or	r9,r10,r9<<0x8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002a0e:	8e b8       	ld.uh	r8,r7[0x6]
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a10:	ae 29       	st.h	r7[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002a12:	f0 09 16 08 	lsr	r9,r8,0x8
80002a16:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80002a1a:	ae 38       	st.h	r7[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80002a1c:	e0 a0 06 18 	rcall	8000364c <udc_process_setup>
80002a20:	c0 b1       	brne	80002a36 <udd_interrupt+0xda>

static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
	udd_enable_stall_handshake(0);
80002a22:	e8 69 00 00 	mov	r9,524288
80002a26:	fe 68 01 f0 	mov	r8,-130576
80002a2a:	91 09       	st.w	r8[0x0],r9


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002a2c:	30 59       	mov	r9,5
80002a2e:	4a 38       	lddpc	r8,80002ab8 <udd_interrupt+0x15c>
80002a30:	91 09       	st.w	r8[0x0],r9

	// Decode setup request
	if (udc_process_setup() == false) {
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
80002a32:	30 49       	mov	r9,4
80002a34:	cc c8       	rjmp	80002bcc <udd_interrupt+0x270>
		return;
	}
	udd_ack_setup_received(0);
80002a36:	30 49       	mov	r9,4
80002a38:	fe 68 01 60 	mov	r8,-130720
80002a3c:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002a3e:	30 09       	mov	r9,0
80002a40:	0f 8a       	ld.ub	r10,r7[0x0]
80002a42:	f2 0a 18 00 	cp.b	r10,r9
80002a46:	c1 04       	brge	80002a66 <udd_interrupt+0x10a>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002a48:	49 e9       	lddpc	r9,80002ac0 <udd_interrupt+0x164>
80002a4a:	8e e8       	ld.uh	r8,r7[0xc]
80002a4c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002a50:	5f 0a       	sreq	r10
80002a52:	b2 8a       	st.b	r9[0x0],r10
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002a54:	49 c9       	lddpc	r9,80002ac4 <udd_interrupt+0x168>
80002a56:	30 08       	mov	r8,0
80002a58:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002a5a:	49 c9       	lddpc	r9,80002ac8 <udd_interrupt+0x16c>
80002a5c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002a5e:	30 29       	mov	r9,2
80002a60:	49 68       	lddpc	r8,80002ab8 <udd_interrupt+0x15c>
80002a62:	91 09       	st.w	r8[0x0],r9
80002a64:	c2 68       	rjmp	80002ab0 <udd_interrupt+0x154>
		udd_ctrl_in_sent();	// Send first data transfer
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002a66:	8e 3b       	ld.sh	r11,r7[0x6]
80002a68:	30 09       	mov	r9,0
80002a6a:	49 4a       	lddpc	r10,80002ab8 <udd_interrupt+0x15c>
80002a6c:	f2 0b 19 00 	cp.h	r11,r9
80002a70:	c0 41       	brne	80002a78 <udd_interrupt+0x11c>

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002a72:	30 39       	mov	r9,3
80002a74:	95 09       	st.w	r10[0x0],r9
80002a76:	c8 f8       	rjmp	80002b94 <udd_interrupt+0x238>
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002a78:	49 3b       	lddpc	r11,80002ac4 <udd_interrupt+0x168>
80002a7a:	b6 09       	st.h	r11[0x0],r9
		udd_ctrl_payload_nb_trans = 0;
80002a7c:	49 3b       	lddpc	r11,80002ac8 <udd_interrupt+0x16c>
80002a7e:	b6 09       	st.h	r11[0x0],r9
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002a80:	30 19       	mov	r9,1
80002a82:	95 09       	st.w	r10[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002a84:	31 09       	mov	r9,16
80002a86:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a88:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002a8c:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002a8e:	fe 6a 01 f0 	mov	r10,-130576
80002a92:	95 09       	st.w	r10[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002a94:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002a98:	e0 8f 02 08 	bral	80002ea8 <udd_interrupt+0x54c>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002a9c:	72 08       	ld.w	r8,r9[0x0]
80002a9e:	ed b8 00 00 	bld	r8,0x0
80002aa2:	c1 51       	brne	80002acc <udd_interrupt+0x170>
80002aa4:	fe 68 01 c0 	mov	r8,-130624
80002aa8:	70 08       	ld.w	r8,r8[0x0]
80002aaa:	ed b8 00 00 	bld	r8,0x0
80002aae:	c0 f1       	brne	80002acc <udd_interrupt+0x170>
		// IN packet sent
		udd_ctrl_in_sent();
80002ab0:	fe b0 fd 66 	rcall	8000257c <udd_ctrl_in_sent>
80002ab4:	e0 8f 01 fa 	bral	80002ea8 <udd_interrupt+0x54c>
80002ab8:	00 00       	add	r0,r0
80002aba:	07 1c       	ld.sh	r12,r3++
80002abc:	00 00       	add	r0,r0
80002abe:	0c 98       	mov	r8,r6
80002ac0:	00 00       	add	r0,r0
80002ac2:	07 20       	ld.uh	r0,r3++
80002ac4:	00 00       	add	r0,r0
80002ac6:	06 e4       	st.h	--r3,r4
80002ac8:	00 00       	add	r0,r0
80002aca:	07 1a       	ld.sh	r10,r3++
80002acc:	fe 68 01 30 	mov	r8,-130768
80002ad0:	70 09       	ld.w	r9,r8[0x0]
80002ad2:	ed b9 00 01 	bld	r9,0x1
80002ad6:	e0 81 00 9f 	brne	80002c14 <udd_interrupt+0x2b8>
80002ada:	4c ba       	lddpc	r10,80002c04 <udd_interrupt+0x2a8>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002adc:	74 09       	ld.w	r9,r10[0x0]
80002ade:	58 19       	cp.w	r9,1
80002ae0:	c1 70       	breq	80002b0e <udd_interrupt+0x1b2>
80002ae2:	58 29       	cp.w	r9,2
80002ae4:	5f 08       	sreq	r8
80002ae6:	58 49       	cp.w	r9,4
80002ae8:	5f 09       	sreq	r9
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002aea:	f3 e8 10 08 	or	r8,r9,r8
80002aee:	c0 80       	breq	80002afe <udd_interrupt+0x1a2>
80002af0:	4c 68       	lddpc	r8,80002c08 <udd_interrupt+0x2ac>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002af2:	70 48       	ld.w	r8,r8[0x10]
80002af4:	58 08       	cp.w	r8,0
80002af6:	e0 80 01 82 	breq	80002dfa <udd_interrupt+0x49e>
80002afa:	5d 18       	icall	r8
80002afc:	c7 f9       	rjmp	80002dfa <udd_interrupt+0x49e>
80002afe:	30 58       	mov	r8,5


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002b00:	e8 69 00 00 	mov	r9,524288
80002b04:	95 08       	st.w	r10[0x0],r8
80002b06:	fe 68 01 f0 	mov	r8,-130576
		udd_g_ctrlreq.callback();
80002b0a:	91 09       	st.w	r8[0x0],r9
80002b0c:	c7 79       	rjmp	80002dfa <udd_interrupt+0x49e>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002b0e:	4b f9       	lddpc	r9,80002c08 <udd_interrupt+0x2ac>
	udd_enable_stall_handshake(0);
80002b10:	70 08       	ld.w	r8,r8[0x0]
80002b12:	92 6a       	ld.sh	r10,r9[0xc]


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002b14:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
	udd_enable_stall_handshake(0);
80002b18:	4b d9       	lddpc	r9,80002c0c <udd_interrupt+0x2b0>
80002b1a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002b1e:	92 09       	ld.sh	r9,r9[0x0]
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002b20:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80002b24:	f0 0b 00 0b 	add	r11,r8,r11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002b28:	16 3c       	cp.w	r12,r11
80002b2a:	c0 44       	brge	80002b32 <udd_interrupt+0x1d6>
80002b2c:	f4 09 01 08 	sub	r8,r10,r9
80002b30:	5c 88       	casts.h	r8
80002b32:	4b 6a       	lddpc	r10,80002c08 <udd_interrupt+0x2ac>
80002b34:	74 2b       	ld.w	r11,r10[0x8]
80002b36:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
80002b3a:	14 0b       	add	r11,r10
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002b3c:	fc 1a e0 00 	movh	r10,0xe000
80002b40:	c0 38       	rjmp	80002b46 <udd_interrupt+0x1ea>
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002b42:	15 3c       	ld.ub	r12,r10++
80002b44:	16 cc       	st.b	r11++,r12
80002b46:	f9 da c0 08 	bfextu	r12,r10,0x0,0x8
80002b4a:	f0 0c 19 00 	cp.h	r12,r8
80002b4e:	cf a3       	brcs	80002b42 <udd_interrupt+0x1e6>
80002b50:	f0 09 00 09 	add	r9,r8,r9
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002b54:	4a e7       	lddpc	r7,80002c0c <udd_interrupt+0x2b0>
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002b56:	5c 89       	casts.h	r9
80002b58:	ae 09       	st.h	r7[0x0],r9
80002b5a:	34 0a       	mov	r10,64
80002b5c:	f4 08 19 00 	cp.h	r8,r10
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002b60:	c0 c1       	brne	80002b78 <udd_interrupt+0x21c>
80002b62:	4a a8       	lddpc	r8,80002c08 <udd_interrupt+0x2ac>
80002b64:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002b68:	4a a6       	lddpc	r6,80002c10 <udd_interrupt+0x2b4>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002b6a:	90 bb       	ld.uh	r11,r8[0x6]
80002b6c:	8c 8a       	ld.uh	r10,r6[0x0]
80002b6e:	f8 0a 00 0a 	add	r10,r12,r10
80002b72:	14 3b       	cp.w	r11,r10
80002b74:	e0 89 00 1c 	brgt	80002bac <udd_interrupt+0x250>
80002b78:	4a 48       	lddpc	r8,80002c08 <udd_interrupt+0x2ac>
80002b7a:	b0 69       	st.h	r8[0xc],r9
80002b7c:	70 5c       	ld.w	r12,r8[0x14]
80002b7e:	58 0c       	cp.w	r12,0
80002b80:	c0 30       	breq	80002b86 <udd_interrupt+0x22a>
80002b82:	5d 1c       	icall	r12
80002b84:	c1 b0       	breq	80002bba <udd_interrupt+0x25e>
80002b86:	30 29       	mov	r9,2
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002b88:	fe 68 01 60 	mov	r8,-130720
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002b8c:	30 3a       	mov	r10,3
80002b8e:	91 09       	st.w	r8[0x0],r9
80002b90:	49 d9       	lddpc	r9,80002c04 <udd_interrupt+0x2a8>
			if (!udd_g_ctrlreq.over_under_run()) {
80002b92:	93 0a       	st.w	r9[0x0],r10
80002b94:	e1 bb 00 00 	mfsr	r11,0x0
				udd_ack_out_received(0);
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002b98:	d3 03       	ssrf	0x10
80002b9a:	30 1a       	mov	r10,1

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002b9c:	91 0a       	st.w	r8[0x0],r10
				udd_ack_out_received(0);
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002b9e:	fe 69 01 f0 	mov	r9,-130576

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002ba2:	93 0a       	st.w	r9[0x0],r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ba4:	30 8a       	mov	r10,8
80002ba6:	91 0a       	st.w	r8[0x0],r10
	cpu_irq_disable();
80002ba8:	93 0a       	st.w	r9[0x0],r10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002baa:	c6 58       	rjmp	80002c74 <udd_interrupt+0x318>
80002bac:	90 6a       	ld.sh	r10,r8[0xc]
	udd_enable_in_send_interrupt(0);
80002bae:	f2 0a 19 00 	cp.h	r10,r9
80002bb2:	c1 a1       	brne	80002be6 <udd_interrupt+0x28a>
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002bb4:	70 5c       	ld.w	r12,r8[0x14]
80002bb6:	58 0c       	cp.w	r12,0
	udd_enable_nak_out_interrupt(0);
80002bb8:	c0 e1       	brne	80002bd4 <udd_interrupt+0x278>
80002bba:	e8 69 00 00 	mov	r9,524288
		udd_ack_out_received(0);
		udd_ctrl_send_zlp_in();
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002bbe:	fe 68 01 f0 	mov	r8,-130576
80002bc2:	91 09       	st.w	r8[0x0],r9
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002bc4:	30 59       	mov	r9,5
80002bc6:	49 08       	lddpc	r8,80002c04 <udd_interrupt+0x2a8>
80002bc8:	91 09       	st.w	r8[0x0],r9

static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
	udd_enable_stall_handshake(0);
80002bca:	30 29       	mov	r9,2
80002bcc:	fe 68 01 60 	mov	r8,-130720
80002bd0:	91 09       	st.w	r8[0x0],r9
80002bd2:	c6 b9       	rjmp	80002ea8 <udd_interrupt+0x54c>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002bd4:	5d 1c       	icall	r12
80002bd6:	cf 20       	breq	80002bba <udd_interrupt+0x25e>
80002bd8:	8e 09       	ld.sh	r9,r7[0x0]
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002bda:	8c 08       	ld.sh	r8,r6[0x0]
80002bdc:	f2 08 00 08 	add	r8,r9,r8
80002be0:	ac 08       	st.h	r6[0x0],r8
80002be2:	30 08       	mov	r8,0
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002be4:	ae 08       	st.h	r7[0x0],r8
80002be6:	fe 69 01 60 	mov	r9,-130720
			udd_ack_out_received(0);
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002bea:	30 28       	mov	r8,2
80002bec:	93 08       	st.w	r9[0x0],r8
80002bee:	31 08       	mov	r8,16
80002bf0:	93 08       	st.w	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002bf2:	e1 b9 00 00 	mfsr	r9,0x0
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002bf6:	d3 03       	ssrf	0x10
80002bf8:	fe 6a 01 f0 	mov	r10,-130576
80002bfc:	95 08       	st.w	r10[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002bfe:	e3 b9 00 00 	mtsr	0x0,r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c02:	c4 bb       	rjmp	80002a98 <udd_interrupt+0x13c>
80002c04:	00 00       	add	r0,r0
	cpu_irq_disable();
80002c06:	07 1c       	ld.sh	r12,r3++
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002c08:	00 00       	add	r0,r0
80002c0a:	0c 98       	mov	r8,r6
80002c0c:	00 00       	add	r0,r0
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002c0e:	07 1a       	ld.sh	r10,r3++
80002c10:	00 00       	add	r0,r0
80002c12:	06 e4       	st.h	--r3,r4
80002c14:	70 09       	ld.w	r9,r8[0x0]
80002c16:	ed b9 00 03 	bld	r9,0x3
80002c1a:	c1 01       	brne	80002c3a <udd_interrupt+0x2de>
80002c1c:	30 8a       	mov	r10,8
80002c1e:	fe 69 01 60 	mov	r9,-130720
80002c22:	93 0a       	st.w	r9[0x0],r10
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002c24:	70 08       	ld.w	r8,r8[0x0]
80002c26:	ed b8 00 00 	bld	r8,0x0
80002c2a:	e0 80 01 3f 	breq	80002ea8 <udd_interrupt+0x54c>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002c2e:	4d 48       	lddpc	r8,80002d7c <udd_interrupt+0x420>
80002c30:	70 08       	ld.w	r8,r8[0x0]
80002c32:	58 38       	cp.w	r8,3
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002c34:	e0 81 01 3a 	brne	80002ea8 <udd_interrupt+0x54c>
80002c38:	c2 48       	rjmp	80002c80 <udd_interrupt+0x324>
80002c3a:	70 09       	ld.w	r9,r8[0x0]
80002c3c:	ed b9 00 04 	bld	r9,0x4
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002c40:	c2 51       	brne	80002c8a <udd_interrupt+0x32e>
80002c42:	fe 69 01 60 	mov	r9,-130720
80002c46:	31 0a       	mov	r10,16
80002c48:	93 0a       	st.w	r9[0x0],r10
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002c4a:	70 08       	ld.w	r8,r8[0x0]
80002c4c:	ed b8 00 01 	bld	r8,0x1
80002c50:	e0 80 01 2c 	breq	80002ea8 <udd_interrupt+0x54c>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002c54:	4c aa       	lddpc	r10,80002d7c <udd_interrupt+0x420>
80002c56:	74 08       	ld.w	r8,r10[0x0]
80002c58:	58 18       	cp.w	r8,1
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002c5a:	c1 01       	brne	80002c7a <udd_interrupt+0x31e>
80002c5c:	30 3b       	mov	r11,3
80002c5e:	95 0b       	st.w	r10[0x0],r11
80002c60:	e1 bb 00 00 	mfsr	r11,0x0
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002c64:	d3 03       	ssrf	0x10
80002c66:	93 08       	st.w	r9[0x0],r8
80002c68:	fe 6a 01 f0 	mov	r10,-130576

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002c6c:	95 08       	st.w	r10[0x0],r8
80002c6e:	30 88       	mov	r8,8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c70:	93 08       	st.w	r9[0x0],r8
80002c72:	95 08       	st.w	r10[0x0],r8
	cpu_irq_disable();
80002c74:	e3 bb 00 00 	mtsr	0x0,r11
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
80002c78:	c1 0b       	rjmp	80002a98 <udd_interrupt+0x13c>
80002c7a:	58 48       	cp.w	r8,4
80002c7c:	e0 81 01 16 	brne	80002ea8 <udd_interrupt+0x54c>
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002c80:	e8 69 00 00 	mov	r9,524288
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002c84:	fe 68 01 f0 	mov	r8,-130576
80002c88:	ca 4b       	rjmp	80002bd0 <udd_interrupt+0x274>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002c8a:	4b e7       	lddpc	r7,80002d80 <udd_interrupt+0x424>
80002c8c:	fe 69 01 34 	mov	r9,-130764
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002c90:	0e 9c       	mov	r12,r7
80002c92:	30 06       	mov	r6,0
80002c94:	fe 6b 00 00 	mov	r11,-131072
80002c98:	fc 13 02 00 	movh	r3,0x200
80002c9c:	e0 64 10 00 	mov	r4,4096
80002ca0:	76 45       	ld.w	r5,r11[0x10]
80002ca2:	e6 06 09 4a 	lsl	r10,r3,r6
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002ca6:	ec c8 ff ff 	sub	r8,r6,-1
80002caa:	f2 c2 ff 70 	sub	r2,r9,-144
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002cae:	f5 e5 00 05 	and	r5,r10,r5
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002cb2:	10 96       	mov	r6,r8
80002cb4:	fe 6e 00 00 	mov	lr,-131072
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002cb8:	c4 20       	breq	80002d3c <udd_interrupt+0x3e0>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002cba:	76 15       	ld.w	r5,r11[0x4]
80002cbc:	f5 e5 00 05 	and	r5,r10,r5
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002cc0:	c3 e0       	breq	80002d3c <udd_interrupt+0x3e0>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80002cc2:	9d 5a       	st.w	lr[0x14],r10
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002cc4:	78 09       	ld.w	r9,r12[0x0]
80002cc6:	ed b9 00 1d 	bld	r9,0x1d
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002cca:	c0 31       	brne	80002cd0 <udd_interrupt+0x374>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002ccc:	9d 3a       	st.w	lr[0xc],r10
80002cce:	c0 a8       	rjmp	80002ce2 <udd_interrupt+0x386>
80002cd0:	78 2a       	ld.w	r10,r12[0x8]
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002cd2:	f0 09 15 04 	lsl	r9,r8,0x4
			if (ptr_job->b_raise_dma) {
80002cd6:	e0 39 fd 00 	sub	r9,130304
80002cda:	72 39       	ld.w	r9,r9[0xc]
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002cdc:	b1 89       	lsr	r9,0x10
80002cde:	12 1a       	sub	r10,r9
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002ce0:	99 2a       	st.w	r12[0x8],r10
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002ce2:	f0 09 15 02 	lsl	r9,r8,0x2
80002ce6:	fe 6b 01 00 	mov	r11,-130816
80002cea:	f2 0b 00 0a 	add	r10,r9,r11
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002cee:	74 0a       	ld.w	r10,r10[0x0]
80002cf0:	ed ba 00 08 	bld	r10,0x8
			}

			if (Is_udd_endpoint_in(ep)) {
80002cf4:	c4 01       	brne	80002d74 <udd_interrupt+0x418>
80002cf6:	78 0a       	ld.w	r10,r12[0x0]
80002cf8:	ed ba 00 1e 	bld	r10,0x1e
80002cfc:	c3 c1       	brne	80002d74 <udd_interrupt+0x418>
80002cfe:	fe 61 01 60 	mov	r1,-130720
80002d02:	30 1b       	mov	r11,1
80002d04:	f2 01 00 0a 	add	r10,r9,r1
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002d08:	95 0b       	st.w	r10[0x0],r11
80002d0a:	fe 6e 01 30 	mov	lr,-130768
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002d0e:	fe 61 01 90 	mov	r1,-130672
80002d12:	f2 0e 00 0a 	add	r10,r9,lr
80002d16:	f2 01 00 0c 	add	r12,r9,r1
					if (Is_udd_write_enabled(ep)) {
80002d1a:	74 0a       	ld.w	r10,r10[0x0]
80002d1c:	e0 39 fe 10 	sub	r9,130576
						udd_raise_in_send(ep);
80002d20:	e6 1a 00 01 	andh	r10,0x1,COH
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d24:	f9 fb 1a 00 	st.wne	r12[0x0],r11
						udd_raise_in_send(ep);
80002d28:	30 1a       	mov	r10,1
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d2a:	93 0a       	st.w	r9[0x0],r10
						udd_raise_in_send(ep);
					}
					udd_enable_in_send_interrupt(ep);
80002d2c:	e0 69 10 00 	mov	r9,4096
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d30:	f2 08 09 48 	lsl	r8,r9,r8
						udd_raise_in_send(ep);
80002d34:	fe 69 00 00 	mov	r9,-131072
					}
					udd_enable_in_send_interrupt(ep);
80002d38:	93 68       	st.w	r9[0x18],r8
80002d3a:	cb 78       	rjmp	80002ea8 <udd_interrupt+0x54c>
					udd_enable_endpoint_interrupt(ep);
80002d3c:	76 4a       	ld.w	r10,r11[0x10]
80002d3e:	e8 08 09 45 	lsl	r5,r4,r8
80002d42:	eb ea 00 0a 	and	r10,r5,r10
80002d46:	c4 50       	breq	80002dd0 <udd_interrupt+0x474>
80002d48:	64 0e       	ld.w	lr,r2[0x0]
80002d4a:	e0 71 fe d0 	mov	r1,130768
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d4e:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80002d52:	f2 01 00 0a 	add	r10,r9,r1
80002d56:	58 0e       	cp.w	lr,0
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002d58:	c1 60       	breq	80002d84 <udd_interrupt+0x428>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d5a:	72 0e       	ld.w	lr,r9[0x0]
80002d5c:	ed be 00 00 	bld	lr,0x0
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002d60:	c1 21       	brne	80002d84 <udd_interrupt+0x428>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d62:	f2 c8 ff 10 	sub	r8,r9,-240
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002d66:	30 1a       	mov	r10,1
80002d68:	91 0a       	st.w	r8[0x0],r10
80002d6a:	2d 09       	sub	r9,-48
80002d6c:	93 0a       	st.w	r9[0x0],r10
80002d6e:	e0 69 40 00 	mov	r9,16384
				udd_disable_in_send_interrupt(ep);
80002d72:	91 09       	st.w	r8[0x0],r9
80002d74:	30 0b       	mov	r11,0
80002d76:	fe b0 fa f1 	rcall	80002358 <udd_ep_finish_job>
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80002d7a:	c9 78       	rjmp	80002ea8 <udd_interrupt+0x54c>
80002d7c:	00 00       	add	r0,r0
				udd_ack_fifocon(ep);
80002d7e:	07 1c       	ld.sh	r12,r3++
80002d80:	00 00       	add	r0,r0
80002d82:	06 e8       	st.h	--r3,r8
				udd_ep_finish_job(ptr_job, false);
80002d84:	64 0e       	ld.w	lr,r2[0x0]
80002d86:	e2 1e 10 00 	andl	lr,0x1000,COH
80002d8a:	c2 30       	breq	80002dd0 <udd_interrupt+0x474>
80002d8c:	72 0e       	ld.w	lr,r9[0x0]
80002d8e:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80002d92:	c1 f1       	brne	80002dd0 <udd_interrupt+0x474>
80002d94:	fe 6b 02 20 	mov	r11,-130528
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80002d98:	f4 0b 00 08 	add	r8,r10,r11
80002d9c:	e0 69 10 00 	mov	r9,4096
80002da0:	91 09       	st.w	r8[0x0],r9
80002da2:	fe 68 00 00 	mov	r8,-131072
80002da6:	91 55       	st.w	r8[0x14],r5
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80002da8:	78 08       	ld.w	r8,r12[0x0]
80002daa:	f1 de d3 81 	bfins	r8,lr,0x1c,0x1
80002dae:	99 08       	st.w	r12[0x0],r8
80002db0:	fe 68 01 00 	mov	r8,-130816
80002db4:	f4 08 00 09 	add	r9,r10,r8
				udd_disable_endpoint_interrupt(ep);
80002db8:	72 08       	ld.w	r8,r9[0x0]
80002dba:	a9 d8       	cbr	r8,0x9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80002dbc:	93 08       	st.w	r9[0x0],r8
80002dbe:	e0 3a fe 10 	sub	r10,130576
80002dc2:	e8 68 00 00 	mov	r8,524288
				udd_disable_endpoint_bank_autoswitch(ep);
80002dc6:	95 08       	st.w	r10[0x0],r8
80002dc8:	e4 68 00 00 	mov	r8,262144
80002dcc:	95 08       	st.w	r10[0x0],r8
80002dce:	c6 d8       	rjmp	80002ea8 <udd_interrupt+0x54c>
80002dd0:	2f 0c       	sub	r12,-16
				udd_enable_stall_handshake(ep);
80002dd2:	2f c9       	sub	r9,-4
80002dd4:	58 38       	cp.w	r8,3
80002dd6:	fe 91 ff 65 	brne	80002ca0 <udd_interrupt+0x344>
80002dda:	c6 e8       	rjmp	80002eb6 <udd_interrupt+0x55a>
				udd_reset_data_toggle(ep);
80002ddc:	30 89       	mov	r9,8
80002dde:	ee c6 ff d0 	sub	r6,r7,-48
80002de2:	91 29       	st.w	r8[0x8],r9
80002de4:	0e 9c       	mov	r12,r7
80002de6:	30 1b       	mov	r11,1
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80002de8:	2f 07       	sub	r7,-16
80002dea:	fe b0 fa b7 	rcall	80002358 <udd_ep_finish_job>
80002dee:	0c 37       	cp.w	r7,r6
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80002df0:	cf a1       	brne	80002de4 <udd_interrupt+0x488>
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
80002df2:	e0 a0 04 09 	rcall	80003604 <udc_reset>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80002df6:	fe b0 fc da 	rcall	800027aa <udd_reset_ep_ctrl>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
80002dfa:	fe b0 fb a7 	rcall	80002548 <udd_ctrl_init>
80002dfe:	c5 58       	rjmp	80002ea8 <udd_interrupt+0x54c>
80002e00:	70 49       	ld.w	r9,r8[0x10]

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80002e02:	ed b9 00 00 	bld	r9,0x0
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80002e06:	c1 41       	brne	80002e2e <udd_interrupt+0x4d2>
80002e08:	70 19       	ld.w	r9,r8[0x4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
80002e0a:	ed b9 00 00 	bld	r9,0x0
		// Reset endpoint control management
		udd_ctrl_init();
80002e0e:	c1 01       	brne	80002e2e <udd_interrupt+0x4d2>
80002e10:	f0 f9 08 00 	ld.w	r9,r8[2048]
		goto udd_interrupt_end;
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80002e14:	af c9       	cbr	r9,0xe
80002e16:	f1 49 08 00 	st.w	r8[2048],r9
80002e1a:	30 19       	mov	r9,1
80002e1c:	91 59       	st.w	r8[0x14],r9
80002e1e:	31 09       	mov	r9,16
80002e20:	91 69       	st.w	r8[0x18],r9
80002e22:	f0 f9 08 00 	ld.w	r9,r8[2048]
		otg_unfreeze_clock();
80002e26:	af a9       	sbr	r9,0xe
80002e28:	f1 49 08 00 	st.w	r8[2048],r9
80002e2c:	c2 18       	rjmp	80002e6e <udd_interrupt+0x512>
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80002e2e:	fe 68 00 00 	mov	r8,-131072
		udd_enable_wake_up_interrupt();
80002e32:	70 49       	ld.w	r9,r8[0x10]
80002e34:	ed b9 00 04 	bld	r9,0x4
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80002e38:	c1 e1       	brne	80002e74 <udd_interrupt+0x518>
80002e3a:	70 19       	ld.w	r9,r8[0x4]
80002e3c:	ed b9 00 04 	bld	r9,0x4
80002e40:	c1 a1       	brne	80002e74 <udd_interrupt+0x518>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80002e42:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002e46:	10 9a       	mov	r10,r8
80002e48:	af c9       	cbr	r9,0xe
80002e4a:	f1 49 08 00 	st.w	r8[2048],r9
80002e4e:	c0 58       	rjmp	80002e58 <udd_interrupt+0x4fc>
80002e50:	74 18       	ld.w	r8,r10[0x4]
80002e52:	ed b8 00 00 	bld	r8,0x0
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80002e56:	c0 60       	breq	80002e62 <udd_interrupt+0x506>
80002e58:	f4 f8 08 04 	ld.w	r8,r10[2052]
80002e5c:	ed b8 00 0e 	bld	r8,0xe
80002e60:	cf 81       	brne	80002e50 <udd_interrupt+0x4f4>
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80002e62:	fe 68 00 00 	mov	r8,-131072
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80002e66:	31 09       	mov	r9,16
80002e68:	91 59       	st.w	r8[0x14],r9
80002e6a:	30 1c       	mov	r12,1

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80002e6c:	91 6c       	st.w	r8[0x18],r12
80002e6e:	fe b0 fb 3b 	rcall	800024e4 <udd_sleep_mode>
80002e72:	c1 b8       	rjmp	80002ea8 <udd_interrupt+0x54c>
80002e74:	fe 68 00 00 	mov	r8,-131072
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80002e78:	f0 f9 08 04 	ld.w	r9,r8[2052]
80002e7c:	ed b9 00 01 	bld	r9,0x1
		udd_enable_suspend_interrupt();
80002e80:	c1 41       	brne	80002ea8 <udd_interrupt+0x54c>
		udd_sleep_mode(true);	// Enter in IDLE mode
80002e82:	f0 f9 08 00 	ld.w	r9,r8[2048]
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
80002e86:	af c9       	cbr	r9,0xe
	}

	if (Is_udd_vbus_transition()) {
80002e88:	f1 49 08 00 	st.w	r8[2048],r9
80002e8c:	30 29       	mov	r9,2
80002e8e:	f1 49 08 08 	st.w	r8[2056],r9
80002e92:	f0 f9 08 00 	ld.w	r9,r8[2048]
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
80002e96:	af a9       	sbr	r9,0xe
80002e98:	f1 49 08 00 	st.w	r8[2048],r9
80002e9c:	f0 fc 08 04 	ld.w	r12,r8[2052]
		udd_ack_vbus_transition();
80002ea0:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
80002ea4:	e0 a0 05 d0 	rcall	80003a44 <stdio_usb_vbus_event>
		otg_freeze_clock();
80002ea8:	fe 68 00 00 	mov	r8,-131072
80002eac:	f0 f8 08 18 	ld.w	r8,r8[2072]
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
80002eb0:	e3 cd 40 fe 	ldm	sp++,r1-r7,lr
80002eb4:	d6 03       	rete
80002eb6:	fe 68 00 00 	mov	r8,-131072
80002eba:	70 1c       	ld.w	r12,r8[0x4]
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80002ebc:	e2 1c 00 08 	andl	r12,0x8,COH
80002ec0:	c8 e1       	brne	80002ddc <udd_interrupt+0x480>
80002ec2:	c9 fb       	rjmp	80002e00 <udd_interrupt+0x4a4>

80002ec4 <_stext>:
	return;
}
80002ec4:	48 dd       	lddpc	sp,80002ef8 <udata_clear_loop_end+0x4>
80002ec6:	fe c0 e2 c6 	sub	r0,pc,-7482
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80002eca:	e3 b0 00 01 	mtsr	0x4,r0
80002ece:	d5 53       	csrf	0x15
80002ed0:	48 b0       	lddpc	r0,80002efc <udata_clear_loop_end+0x8>
80002ed2:	48 c1       	lddpc	r1,80002f00 <udata_clear_loop_end+0xc>
80002ed4:	02 30       	cp.w	r0,r1
80002ed6:	c0 62       	brcc	80002ee2 <idata_load_loop_end>
80002ed8:	48 b2       	lddpc	r2,80002f04 <udata_clear_loop_end+0x10>

80002eda <idata_load_loop>:
80002eda:	a5 05       	ld.d	r4,r2++
80002edc:	a1 24       	st.d	r0++,r4
80002ede:	02 30       	cp.w	r0,r1
80002ee0:	cf d3       	brcs	80002eda <idata_load_loop>

80002ee2 <idata_load_loop_end>:
80002ee2:	48 a0       	lddpc	r0,80002f08 <udata_clear_loop_end+0x14>
80002ee4:	48 a1       	lddpc	r1,80002f0c <udata_clear_loop_end+0x18>
80002ee6:	02 30       	cp.w	r0,r1
80002ee8:	c0 62       	brcc	80002ef4 <udata_clear_loop_end>
80002eea:	30 02       	mov	r2,0
80002eec:	30 03       	mov	r3,0

80002eee <udata_clear_loop>:
80002eee:	a1 22       	st.d	r0++,r2
80002ef0:	02 30       	cp.w	r0,r1
80002ef2:	cf e3       	brcs	80002eee <udata_clear_loop>

80002ef4 <udata_clear_loop_end>:
80002ef4:	fe cf f3 04 	sub	pc,pc,-3324
80002ef8:	00 01       	add	r1,r0
80002efa:	00 00       	add	r0,r0
80002efc:	00 00       	add	r0,r0
80002efe:	00 08       	add	r8,r0
80002f00:	00 00       	add	r0,r0
80002f02:	05 d8       	ld.ub	r8,r2[0x5]
80002f04:	80 00       	ld.sh	r0,r0[0x0]
80002f06:	4f 58       	lddpc	r8,800030d8 <udi_cdc_is_tx_ready+0x3c>
80002f08:	00 00       	add	r0,r0
80002f0a:	05 d8       	ld.ub	r8,r2[0x5]
80002f0c:	00 00       	add	r0,r0
80002f0e:	0c c8       	st.b	r6++,r8

80002f10 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80002f10:	d4 21       	pushm	r4-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f12:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002f16:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80002f18:	fe 78 0c 00 	mov	r8,-62464
80002f1c:	e0 69 03 07 	mov	r9,775
80002f20:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80002f22:	70 09       	ld.w	r9,r8[0x0]
80002f24:	a3 a9       	sbr	r9,0x2
80002f26:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f28:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
80002f2c:	71 59       	ld.w	r9,r8[0x54]
80002f2e:	fe 77 0c 00 	mov	r7,-62464
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002f32:	e2 19 00 80 	andl	r9,0x80,COH
80002f36:	cf b0       	breq	80002f2c <sysclk_init+0x1c>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80002f38:	e0 6c 1b 00 	mov	r12,6912
80002f3c:	ea 1c 00 b7 	orh	r12,0xb7
80002f40:	fe b0 f8 74 	rcall	80002028 <flashc_set_bus_freq>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f44:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002f48:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80002f4a:	6e 08       	ld.w	r8,r7[0x0]
80002f4c:	e0 18 ff fc 	andl	r8,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80002f50:	a1 a8       	sbr	r8,0x0
	AVR32_PM.mcctrl = mcctrl;
80002f52:	8f 08       	st.w	r7[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f54:	e3 b9 00 00 	mtsr	0x0,r9
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
80002f58:	e0 78 00 02 	mov	r8,65538
80002f5c:	8f 28       	st.w	r7[0x8],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80002f5e:	30 b8       	mov	r8,11
80002f60:	ea 18 00 18 	orh	r8,0x18
80002f64:	8f 48       	st.w	r7[0x10],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
80002f66:	30 08       	mov	r8,0
80002f68:	8f 58       	st.w	r7[0x14],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
80002f6a:	e0 68 0e 03 	mov	r8,3587
80002f6e:	8f 38       	st.w	r7[0xc],r8

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002f70:	d8 22       	popm	r4-r7,pc
80002f72:	d7 03       	nop

80002f74 <sysclk_priv_enable_module>:
80002f74:	e1 b9 00 00 	mfsr	r9,0x0
static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
	cpu_irq_disable();
80002f78:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80002f7a:	fe 7a 0c 00 	mov	r10,-62464
80002f7e:	75 58       	ld.w	r8,r10[0x54]
80002f80:	ed b8 00 06 	bld	r8,0x6
80002f84:	cf d1       	brne	80002f7e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80002f86:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002f88:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
80002f8a:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002f8e:	e0 2c f3 f8 	sub	r12,62456
80002f92:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80002f94:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002f96:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f98:	e3 b9 00 00 	mtsr	0x0,r9

	cpu_irq_restore(flags);
}
80002f9c:	5e fc       	retal	r12
80002f9e:	d7 03       	nop

80002fa0 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80002fa0:	d4 21       	pushm	r4-r7,lr
80002fa2:	58 9c       	cp.w	r12,9
80002fa4:	5f 07       	sreq	r7
80002fa6:	18 96       	mov	r6,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fa8:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80002fac:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80002fae:	48 e8       	lddpc	r8,80002fe4 <sysclk_enable_pbb_module+0x44>
80002fb0:	f0 07 07 09 	ld.ub	r9,r8[r7]
80002fb4:	30 08       	mov	r8,0
80002fb6:	f0 09 18 00 	cp.b	r9,r8
80002fba:	c0 91       	brne	80002fcc <sysclk_enable_pbb_module+0x2c>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80002fbc:	ee 0b 15 01 	lsl	r11,r7,0x1
80002fc0:	30 1c       	mov	r12,1
80002fc2:	f9 bb 01 06 	movne	r11,6
80002fc6:	f9 bb 00 02 	moveq	r11,2
80002fca:	cd 5f       	rcall	80002f74 <sysclk_priv_enable_module>
80002fcc:	48 68       	lddpc	r8,80002fe4 <sysclk_enable_pbb_module+0x44>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
80002fce:	f0 07 07 09 	ld.ub	r9,r8[r7]
80002fd2:	2f f9       	sub	r9,-1
80002fd4:	f0 07 0b 09 	st.b	r8[r7],r9
80002fd8:	e3 b5 00 00 	mtsr	0x0,r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002fdc:	30 3c       	mov	r12,3

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80002fde:	0c 9b       	mov	r11,r6
80002fe0:	cc af       	rcall	80002f74 <sysclk_priv_enable_module>
80002fe2:	d8 22       	popm	r4-r7,pc
80002fe4:	00 00       	add	r0,r0
}
80002fe6:	07 24       	ld.uh	r4,r3++

80002fe8 <sysclk_enable_usb>:
80002fe8:	d4 01       	pushm	lr
80002fea:	30 1c       	mov	r12,1
80002fec:	cd af       	rcall	80002fa0 <sysclk_enable_pbb_module>
80002fee:	30 3b       	mov	r11,3
80002ff0:	30 1c       	mov	r12,1
80002ff2:	cc 1f       	rcall	80002f74 <sysclk_priv_enable_module>
80002ff4:	e1 ba 00 00 	mfsr	r10,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ff8:	d3 03       	ssrf	0x10
80002ffa:	fe 78 0c 00 	mov	r8,-62464
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80002ffe:	e0 69 03 07 	mov	r9,775
80003002:	91 a9       	st.w	r8[0x28],r9
80003004:	70 09       	ld.w	r9,r8[0x0]
80003006:	a3 a9       	sbr	r9,0x2
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80003008:	91 09       	st.w	r8[0x0],r9
8000300a:	e3 ba 00 00 	mtsr	0x0,r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000300e:	71 59       	ld.w	r9,r8[0x54]
80003010:	ed b9 00 07 	bld	r9,0x7
80003014:	cf d1       	brne	8000300e <sysclk_enable_usb+0x26>
80003016:	30 49       	mov	r9,4
80003018:	fe 78 0c 00 	mov	r8,-62464
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000301c:	f1 49 00 70 	st.w	r8[112],r9
80003020:	d8 02       	popm	pc
80003022:	d7 03       	nop

80003024 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
80003024:	5e fc       	retal	r12
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
80003026:	d7 03       	nop

80003028 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
80003028:	49 98       	lddpc	r8,8000308c <udi_cdc_comm_setup+0x64>
8000302a:	30 0b       	mov	r11,0
8000302c:	11 8a       	ld.ub	r10,r8[0x0]
8000302e:	14 99       	mov	r9,r10
80003030:	e2 19 00 60 	andl	r9,0x60,COH
80003034:	f6 0a 18 00 	cp.b	r10,r11
80003038:	c1 04       	brge	80003058 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000303a:	e0 49 00 20 	cp.w	r9,32
8000303e:	c2 51       	brne	80003088 <udi_cdc_comm_setup+0x60>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80003040:	11 9a       	ld.ub	r10,r8[0x1]
80003042:	32 19       	mov	r9,33
80003044:	f2 0a 18 00 	cp.b	r10,r9
80003048:	c2 01       	brne	80003088 <udi_cdc_comm_setup+0x60>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000304a:	90 39       	ld.sh	r9,r8[0x6]
8000304c:	30 7a       	mov	r10,7
8000304e:	f4 09 19 00 	cp.h	r9,r10
80003052:	c1 b1       	brne	80003088 <udi_cdc_comm_setup+0x60>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003054:	b0 69       	st.h	r8[0xc],r9
80003056:	c1 68       	rjmp	80003082 <udi_cdc_comm_setup+0x5a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003058:	e0 49 00 20 	cp.w	r9,32
8000305c:	c1 61       	brne	80003088 <udi_cdc_comm_setup+0x60>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000305e:	11 9a       	ld.ub	r10,r8[0x1]
80003060:	f2 0a 18 00 	cp.b	r10,r9
80003064:	c0 60       	breq	80003070 <udi_cdc_comm_setup+0x48>
80003066:	32 28       	mov	r8,34
80003068:	f0 0a 18 00 	cp.b	r10,r8
8000306c:	c0 e1       	brne	80003088 <udi_cdc_comm_setup+0x60>
8000306e:	c0 c8       	rjmp	80003086 <udi_cdc_comm_setup+0x5e>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003070:	90 39       	ld.sh	r9,r8[0x6]
80003072:	30 7a       	mov	r10,7
80003074:	f4 09 19 00 	cp.h	r9,r10
80003078:	c0 81       	brne	80003088 <udi_cdc_comm_setup+0x60>
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
8000307a:	b0 69       	st.h	r8[0xc],r9
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
8000307c:	fe c9 ff e4 	sub	r9,pc,-28
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003080:	91 49       	st.w	r8[0x10],r9
80003082:	48 49       	lddpc	r9,80003090 <udi_cdc_comm_setup+0x68>
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003084:	91 29       	st.w	r8[0x8],r9
						sizeof(udi_cdc_line_coding);
				return true;
80003086:	5e ff       	retal	1
80003088:	5e fd       	retal	0
8000308a:	d7 03       	nop
8000308c:	00 00       	add	r0,r0
8000308e:	0c 98       	mov	r8,r6
80003090:	00 00       	add	r0,r0
80003092:	07 28       	ld.uh	r8,r3++

80003094 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003094:	5e fd       	retal	0

80003096 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003096:	5e fd       	retal	0

80003098 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003098:	5e fc       	retal	r12
8000309a:	d7 03       	nop

8000309c <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
8000309c:	49 59       	lddpc	r9,800030f0 <udi_cdc_is_tx_ready+0x54>
8000309e:	49 68       	lddpc	r8,800030f4 <udi_cdc_is_tx_ready+0x58>
800030a0:	11 8a       	ld.ub	r10,r8[0x0]
800030a2:	f2 0a 04 1a 	ld.sh	r10,r9[r10<<0x1]
800030a6:	e0 69 01 40 	mov	r9,320
800030aa:	f2 0a 19 00 	cp.h	r10,r9
800030ae:	c0 20       	breq	800030b2 <udi_cdc_is_tx_ready+0x16>
800030b0:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800030b2:	49 29       	lddpc	r9,800030f8 <udi_cdc_is_tx_ready+0x5c>
800030b4:	13 8a       	ld.ub	r10,r9[0x0]
800030b6:	58 0a       	cp.w	r10,0
800030b8:	c1 01       	brne	800030d8 <udi_cdc_is_tx_ready+0x3c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800030ba:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800030be:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800030c0:	48 fb       	lddpc	r11,800030fc <udi_cdc_is_tx_ready+0x60>
800030c2:	17 8b       	ld.ub	r11,r11[0x0]
800030c4:	58 0b       	cp.w	r11,0
800030c6:	c0 71       	brne	800030d4 <udi_cdc_is_tx_ready+0x38>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800030c8:	30 1b       	mov	r11,1
800030ca:	b2 8b       	st.b	r9[0x0],r11
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800030cc:	11 89       	ld.ub	r9,r8[0x0]
800030ce:	58 09       	cp.w	r9,0
800030d0:	5f 09       	sreq	r9
800030d2:	b0 89       	st.b	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800030d4:	e3 ba 00 00 	mtsr	0x0,r10
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800030d8:	48 78       	lddpc	r8,800030f4 <udi_cdc_is_tx_ready+0x58>
800030da:	11 89       	ld.ub	r9,r8[0x0]
800030dc:	48 58       	lddpc	r8,800030f0 <udi_cdc_is_tx_ready+0x54>
800030de:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800030e2:	e0 68 01 40 	mov	r8,320
800030e6:	f0 09 19 00 	cp.h	r9,r8
800030ea:	5f 1c       	srne	r12
}
800030ec:	5e fc       	retal	r12
800030ee:	d7 03       	nop
800030f0:	00 00       	add	r0,r0
800030f2:	07 30       	ld.ub	r0,r3++
800030f4:	00 00       	add	r0,r0
800030f6:	07 2f       	ld.uh	pc,r3++
800030f8:	00 00       	add	r0,r0
800030fa:	0c 41       	or	r1,r6
800030fc:	00 00       	add	r0,r0
800030fe:	09 be       	ld.ub	lr,r4[0x3]

80003100 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
80003100:	d4 31       	pushm	r0-r7,lr
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003102:	49 68       	lddpc	r8,80003158 <udi_cdc_putc+0x58>
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
}


int udi_cdc_putc(int value)
{
80003104:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003106:	11 e9       	ld.ub	r9,r8[0x6]

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003108:	49 52       	lddpc	r2,8000315c <udi_cdc_putc+0x5c>
{
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000310a:	30 98       	mov	r8,9
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
8000310c:	49 53       	lddpc	r3,80003160 <udi_cdc_putc+0x60>
{
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000310e:	f0 09 18 00 	cp.b	r9,r8
80003112:	5f 05       	sreq	r5
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003114:	49 46       	lddpc	r6,80003164 <udi_cdc_putc+0x64>
80003116:	49 54       	lddpc	r4,80003168 <udi_cdc_putc+0x68>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003118:	cc 2f       	rcall	8000309c <udi_cdc_is_tx_ready>
8000311a:	c0 51       	brne	80003124 <udi_cdc_putc+0x24>
8000311c:	05 8c       	ld.ub	r12,r2[0x0]
		if (!udi_cdc_running) {
8000311e:	58 0c       	cp.w	r12,0
80003120:	cf c1       	brne	80003118 <udi_cdc_putc+0x18>
80003122:	d8 32       	popm	r0-r7,pc
80003124:	e1 ba 00 00 	mfsr	r10,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003128:	d3 03       	ssrf	0x10
	cpu_irq_disable();
8000312a:	07 88       	ld.ub	r8,r3[0x0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
8000312c:	ec 08 04 19 	ld.sh	r9,r6[r8<<0x1]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003130:	f2 cb ff ff 	sub	r11,r9,-1
80003134:	5c 79       	castu.h	r9
80003136:	ec 08 0a 1b 	st.h	r6[r8<<0x1],r11
8000313a:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000313e:	a7 68       	lsl	r8,0x6
80003140:	f0 09 00 09 	add	r9,r8,r9
80003144:	e8 09 0b 07 	st.b	r4[r9],r7
80003148:	e3 ba 00 00 	mtsr	0x0,r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000314c:	58 05       	cp.w	r5,0
	cpu_irq_restore(flags);

	if (b_databit_9) {
8000314e:	c0 21       	brne	80003152 <udi_cdc_putc+0x52>
80003150:	da 3a       	popm	r0-r7,pc,r12=1
80003152:	a9 47       	asr	r7,0x8
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003154:	30 05       	mov	r5,0
80003156:	ce 1b       	rjmp	80003118 <udi_cdc_putc+0x18>
80003158:	00 00       	add	r0,r0
8000315a:	07 28       	ld.uh	r8,r3++
8000315c:	00 00       	add	r0,r0
8000315e:	09 bd       	ld.ub	sp,r4[0x3]
80003160:	00 00       	add	r0,r0
80003162:	07 2f       	ld.uh	pc,r3++
80003164:	00 00       	add	r0,r0
80003166:	07 30       	ld.ub	r0,r3++
80003168:	00 00       	add	r0,r0
8000316a:	07 34       	ld.ub	r4,r3++

8000316c <udi_cdc_rx_start>:
8000316c:	d4 21       	pushm	r4-r7,lr
8000316e:	e1 bb 00 00 	mfsr	r11,0x0
80003172:	d3 03       	ssrf	0x10
{
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
80003174:	49 59       	lddpc	r9,800031c8 <udi_cdc_rx_start+0x5c>
80003176:	13 88       	ld.ub	r8,r9[0x0]
	if (udi_cdc_rx_trans_ongoing ||
80003178:	49 5c       	lddpc	r12,800031cc <udi_cdc_rx_start+0x60>
8000317a:	19 8e       	ld.ub	lr,r12[0x0]
8000317c:	58 0e       	cp.w	lr,0
8000317e:	c0 a1       	brne	80003192 <udi_cdc_rx_start+0x26>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
80003180:	49 4a       	lddpc	r10,800031d0 <udi_cdc_rx_start+0x64>
80003182:	49 56       	lddpc	r6,800031d4 <udi_cdc_rx_start+0x68>
80003184:	94 07       	ld.sh	r7,r10[0x0]
80003186:	ec 08 04 16 	ld.sh	r6,r6[r8<<0x1]
8000318a:	ee 06 19 00 	cp.h	r6,r7
8000318e:	e0 88 00 05 	brls	80003198 <udi_cdc_rx_start+0x2c>
80003192:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
80003196:	d8 2a       	popm	r4-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
80003198:	b4 0e       	st.h	r10[0x0],lr
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
8000319a:	58 08       	cp.w	r8,0
8000319c:	5f 0e       	sreq	lr
8000319e:	b2 8e       	st.b	r9[0x0],lr

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800031a0:	30 1e       	mov	lr,1
800031a2:	b8 8e       	st.b	r12[0x0],lr
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800031a4:	e3 bb 00 00 	mtsr	0x0,r11
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
800031a8:	94 0a       	ld.sh	r10,r10[0x0]
	
	if (udi_cdc_is_rx_ready()) {
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800031aa:	f0 08 00 28 	add	r8,r8,r8<<0x2
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
800031ae:	13 89       	ld.ub	r9,r9[0x0]
	
	if (udi_cdc_is_rx_ready()) {
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800031b0:	a7 68       	lsl	r8,0x6
800031b2:	48 aa       	lddpc	r10,800031d8 <udi_cdc_rx_start+0x6c>
800031b4:	e0 69 01 40 	mov	r9,320
800031b8:	10 0a       	add	r10,r8
800031ba:	30 1b       	mov	r11,1
800031bc:	fe c8 ff 68 	sub	r8,pc,-152
800031c0:	30 2c       	mov	r12,2
800031c2:	fe b0 f8 f7 	rcall	800023b0 <udd_ep_run>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800031c6:	d8 22       	popm	r4-r7,pc
800031c8:	00 00       	add	r0,r0
800031ca:	09 bc       	ld.ub	r12,r4[0x3]
800031cc:	00 00       	add	r0,r0
800031ce:	0c 40       	or	r0,r6
800031d0:	00 00       	add	r0,r0
800031d2:	09 b8       	ld.ub	r8,r4[0x3]
800031d4:	00 00       	add	r0,r0
800031d6:	09 b4       	ld.ub	r4,r4[0x3]
800031d8:	00 00       	add	r0,r0
800031da:	09 c0       	ld.ub	r0,r4[0x4]

800031dc <udi_cdc_getc>:
800031dc:	d4 31       	pushm	r0-r7,lr
800031de:	49 88       	lddpc	r8,8000323c <udi_cdc_getc+0x60>
800031e0:	11 e9       	ld.ub	r9,r8[0x6]
800031e2:	30 98       	mov	r8,9

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
800031e4:	49 77       	lddpc	r7,80003240 <udi_cdc_getc+0x64>
int udi_cdc_getc(void)
{
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800031e6:	f0 09 18 00 	cp.b	r9,r8
800031ea:	5f 04       	sreq	r4
800031ec:	30 08       	mov	r8,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
800031ee:	49 65       	lddpc	r5,80003244 <udi_cdc_getc+0x68>
800031f0:	49 61       	lddpc	r1,80003248 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
800031f2:	49 72       	lddpc	r2,8000324c <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
800031f4:	49 73       	lddpc	r3,80003250 <udi_cdc_getc+0x74>
800031f6:	c0 48       	rjmp	800031fe <udi_cdc_getc+0x22>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
800031f8:	05 86       	ld.ub	r6,r2[0x0]
800031fa:	58 06       	cp.w	r6,0
800031fc:	c1 e0       	breq	80003238 <udi_cdc_getc+0x5c>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
800031fe:	8e 09       	ld.sh	r9,r7[0x0]
80003200:	0b 8a       	ld.ub	r10,r5[0x0]
80003202:	e2 0a 04 1a 	ld.sh	r10,r1[r10<<0x1]
80003206:	f2 0a 19 00 	cp.h	r10,r9
8000320a:	fe 98 ff f7 	brls	800031f8 <udi_cdc_getc+0x1c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000320e:	0b 89       	ld.ub	r9,r5[0x0]
80003210:	8e 0a       	ld.sh	r10,r7[0x0]
80003212:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003216:	5c 7a       	castu.h	r10
80003218:	a7 69       	lsl	r9,0x6
8000321a:	14 09       	add	r9,r10
8000321c:	e6 09 07 06 	ld.ub	r6,r3[r9]
80003220:	f1 e6 10 06 	or	r6,r8,r6
	udi_cdc_rx_pos++;
80003224:	8e 08       	ld.sh	r8,r7[0x0]
80003226:	2f f8       	sub	r8,-1
80003228:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
8000322a:	ca 1f       	rcall	8000316c <udi_cdc_rx_start>
8000322c:	58 04       	cp.w	r4,0

	if (b_databit_9) {
8000322e:	c0 50       	breq	80003238 <udi_cdc_getc+0x5c>
80003230:	ec 08 15 08 	lsl	r8,r6,0x8
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003234:	30 04       	mov	r4,0
80003236:	ce 4b       	rjmp	800031fe <udi_cdc_getc+0x22>
80003238:	0c 9c       	mov	r12,r6
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
8000323a:	d8 32       	popm	r0-r7,pc
8000323c:	00 00       	add	r0,r0
8000323e:	07 28       	ld.uh	r8,r3++
80003240:	00 00       	add	r0,r0
80003242:	09 b8       	ld.ub	r8,r4[0x3]
80003244:	00 00       	add	r0,r0
80003246:	09 bc       	ld.ub	r12,r4[0x3]
80003248:	00 00       	add	r0,r0
8000324a:	09 b4       	ld.ub	r4,r4[0x3]
8000324c:	00 00       	add	r0,r0
8000324e:	09 bd       	ld.ub	sp,r4[0x3]
80003250:	00 00       	add	r0,r0
80003252:	09 c0       	ld.ub	r0,r4[0x4]

80003254 <udi_cdc_data_recevied>:
80003254:	d4 01       	pushm	lr
80003256:	58 0c       	cp.w	r12,0
80003258:	c0 e1       	brne	80003274 <udi_cdc_data_recevied+0x20>
8000325a:	48 88       	lddpc	r8,80003278 <udi_cdc_data_recevied+0x24>

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
8000325c:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
8000325e:	58 08       	cp.w	r8,0
80003260:	f9 b8 00 02 	moveq	r8,2
80003264:	f9 b8 01 00 	movne	r8,0
80003268:	48 59       	lddpc	r9,8000327c <udi_cdc_data_recevied+0x28>
8000326a:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
8000326e:	48 58       	lddpc	r8,80003280 <udi_cdc_data_recevied+0x2c>
80003270:	b0 8c       	st.b	r8[0x0],r12
	udi_cdc_rx_start();
80003272:	c7 df       	rcall	8000316c <udi_cdc_rx_start>
80003274:	d8 02       	popm	pc
80003276:	d7 03       	nop
80003278:	00 00       	add	r0,r0
8000327a:	09 bc       	ld.ub	r12,r4[0x3]
8000327c:	00 00       	add	r0,r0
8000327e:	09 b4       	ld.ub	r4,r4[0x3]
80003280:	00 00       	add	r0,r0
80003282:	0c 40       	or	r0,r6

80003284 <udi_cdc_tx_send>:
80003284:	d4 21       	pushm	r4-r7,lr
80003286:	4a 98       	lddpc	r8,80003328 <udi_cdc_tx_send+0xa4>
{
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
80003288:	11 88       	ld.ub	r8,r8[0x0]
8000328a:	58 08       	cp.w	r8,0
8000328c:	c4 c1       	brne	80003324 <udi_cdc_tx_send+0xa0>
8000328e:	4a 86       	lddpc	r6,8000332c <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
80003290:	fe b0 f7 b5 	rcall	800021fa <udd_is_high_speed>
80003294:	c0 80       	breq	800032a4 <udi_cdc_tx_send+0x20>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
80003296:	8c 07       	ld.sh	r7,r6[0x0]
80003298:	fe b0 f7 cf 	rcall	80002236 <udd_get_micro_frame_number>
8000329c:	f8 07 19 00 	cp.h	r7,r12
800032a0:	c0 81       	brne	800032b0 <udi_cdc_tx_send+0x2c>
800032a2:	d8 22       	popm	r4-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800032a4:	8c 07       	ld.sh	r7,r6[0x0]
800032a6:	fe b0 f7 c2 	rcall	8000222a <udd_get_frame_number>
800032aa:	f8 07 19 00 	cp.h	r7,r12
800032ae:	c3 b0       	breq	80003324 <udi_cdc_tx_send+0xa0>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032b0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032b4:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
800032b6:	49 f8       	lddpc	r8,80003330 <udi_cdc_tx_send+0xac>
800032b8:	11 87       	ld.ub	r7,r8[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
800032ba:	49 fa       	lddpc	r10,80003334 <udi_cdc_tx_send+0xb0>
800032bc:	15 8a       	ld.ub	r10,r10[0x0]
800032be:	58 0a       	cp.w	r10,0
800032c0:	c0 51       	brne	800032ca <udi_cdc_tx_send+0x46>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
800032c2:	58 07       	cp.w	r7,0
800032c4:	5f 0a       	sreq	r10
800032c6:	b0 8a       	st.b	r8[0x0],r10
800032c8:	c0 38       	rjmp	800032ce <udi_cdc_tx_send+0x4a>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
800032ca:	58 07       	cp.w	r7,0
800032cc:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
800032ce:	30 1a       	mov	r10,1
800032d0:	49 68       	lddpc	r8,80003328 <udi_cdc_tx_send+0xa4>
800032d2:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032d4:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
800032d8:	49 88       	lddpc	r8,80003338 <udi_cdc_tx_send+0xb4>
800032da:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
800032de:	e0 68 01 40 	mov	r8,320
800032e2:	f0 09 19 00 	cp.h	r9,r8
800032e6:	5f 15       	srne	r5
	if (b_short_packet) {
800032e8:	58 05       	cp.w	r5,0
800032ea:	c0 c0       	breq	80003302 <udi_cdc_tx_send+0x7e>
800032ec:	49 06       	lddpc	r6,8000332c <udi_cdc_tx_send+0xa8>
		if (udd_is_high_speed()) {
800032ee:	fe b0 f7 86 	rcall	800021fa <udd_is_high_speed>
800032f2:	c0 40       	breq	800032fa <udi_cdc_tx_send+0x76>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
800032f4:	fe b0 f7 a1 	rcall	80002236 <udd_get_micro_frame_number>
800032f8:	c0 38       	rjmp	800032fe <udi_cdc_tx_send+0x7a>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
800032fa:	fe b0 f7 98 	rcall	8000222a <udd_get_frame_number>
800032fe:	ac 0c       	st.h	r6[0x0],r12
80003300:	c0 38       	rjmp	80003306 <udi_cdc_tx_send+0x82>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
80003302:	48 b8       	lddpc	r8,8000332c <udi_cdc_tx_send+0xa8>
80003304:	b0 05       	st.h	r8[0x0],r5
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003306:	48 d8       	lddpc	r8,80003338 <udi_cdc_tx_send+0xb4>
80003308:	48 da       	lddpc	r10,8000333c <udi_cdc_tx_send+0xb8>
8000330a:	f0 07 05 19 	ld.uh	r9,r8[r7<<0x1]
8000330e:	0a 9b       	mov	r11,r5
80003310:	ee 07 00 27 	add	r7,r7,r7<<0x2
80003314:	fe c8 ff d4 	sub	r8,pc,-44
80003318:	a7 67       	lsl	r7,0x6
8000331a:	e0 6c 00 81 	mov	r12,129
8000331e:	0e 0a       	add	r10,r7
80003320:	fe b0 f8 48 	rcall	800023b0 <udd_ep_run>
80003324:	d8 22       	popm	r4-r7,pc
80003326:	d7 03       	nop
80003328:	00 00       	add	r0,r0
8000332a:	09 be       	ld.ub	lr,r4[0x3]
8000332c:	00 00       	add	r0,r0
8000332e:	09 ba       	ld.ub	r10,r4[0x3]
80003330:	00 00       	add	r0,r0
80003332:	07 2f       	ld.uh	pc,r3++
80003334:	00 00       	add	r0,r0
80003336:	0c 41       	or	r1,r6
80003338:	00 00       	add	r0,r0
8000333a:	07 30       	ld.ub	r0,r3++
8000333c:	00 00       	add	r0,r0
8000333e:	07 34       	ld.ub	r4,r3++

80003340 <udi_cdc_data_sent>:
80003340:	d4 01       	pushm	lr
80003342:	58 0c       	cp.w	r12,0
80003344:	c1 01       	brne	80003364 <udi_cdc_data_sent+0x24>
80003346:	48 9a       	lddpc	r10,80003368 <udi_cdc_data_sent+0x28>
80003348:	48 99       	lddpc	r9,8000336c <udi_cdc_data_sent+0x2c>
8000334a:	13 89       	ld.ub	r9,r9[0x0]
8000334c:	58 09       	cp.w	r9,0
8000334e:	f9 b9 00 02 	moveq	r9,2
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
80003352:	f9 b9 01 00 	movne	r9,0
	udi_cdc_tx_both_buf_to_send = false;
80003356:	b4 8c       	st.b	r10[0x0],r12
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
80003358:	48 6a       	lddpc	r10,80003370 <udi_cdc_data_sent+0x30>
8000335a:	f4 09 0a 0c 	st.h	r10[r9],r12
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_trans_ongoing = false;
8000335e:	48 69       	lddpc	r9,80003374 <udi_cdc_data_sent+0x34>
80003360:	b2 8c       	st.b	r9[0x0],r12
	udi_cdc_tx_send();
80003362:	c9 1f       	rcall	80003284 <udi_cdc_tx_send>
80003364:	d8 02       	popm	pc
80003366:	d7 03       	nop
80003368:	00 00       	add	r0,r0
8000336a:	0c 41       	or	r1,r6
8000336c:	00 00       	add	r0,r0
8000336e:	07 2f       	ld.uh	pc,r3++
80003370:	00 00       	add	r0,r0
80003372:	07 30       	ld.ub	r0,r3++
80003374:	00 00       	add	r0,r0
80003376:	09 be       	ld.ub	lr,r4[0x3]

80003378 <udi_cdc_data_sof_notify>:
80003378:	d4 01       	pushm	lr
8000337a:	c8 5f       	rcall	80003284 <udi_cdc_tx_send>
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
	udi_cdc_tx_send();
8000337c:	d8 02       	popm	pc
}
8000337e:	d7 03       	nop

80003380 <udi_cdc_data_enable>:
80003380:	d4 21       	pushm	r4-r7,lr
80003382:	48 e9       	lddpc	r9,800033b8 <udi_cdc_data_enable+0x38>
}

bool udi_cdc_data_enable(void)
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
80003384:	30 08       	mov	r8,0
80003386:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_both_buf_to_send = false;
80003388:	48 d9       	lddpc	r9,800033bc <udi_cdc_data_enable+0x3c>
8000338a:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_buf_sel = 0;
	udi_cdc_tx_buf_nb[0] = 0;
8000338c:	48 d9       	lddpc	r9,800033c0 <udi_cdc_data_enable+0x40>
8000338e:	30 07       	mov	r7,0
	udi_cdc_tx_buf_nb[1] = 0;
80003390:	b2 17       	st.h	r9[0x2],r7
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_buf_sel = 0;
	udi_cdc_tx_buf_nb[0] = 0;
80003392:	b2 07       	st.h	r9[0x0],r7
bool udi_cdc_data_enable(void)
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_buf_sel = 0;
80003394:	48 c9       	lddpc	r9,800033c4 <udi_cdc_data_enable+0x44>
80003396:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_buf_nb[0] = 0;
	udi_cdc_tx_buf_nb[1] = 0;
	udi_cdc_tx_sof_num = 0;
80003398:	48 c8       	lddpc	r8,800033c8 <udi_cdc_data_enable+0x48>
8000339a:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
8000339c:	c7 4f       	rcall	80003284 <udi_cdc_tx_send>
8000339e:	48 c8       	lddpc	r8,800033cc <udi_cdc_data_enable+0x4c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
800033a0:	b0 87       	st.b	r8[0x0],r7
800033a2:	48 c8       	lddpc	r8,800033d0 <udi_cdc_data_enable+0x50>
	udi_cdc_rx_buf_sel = 0;
800033a4:	b0 87       	st.b	r8[0x0],r7
800033a6:	48 c8       	lddpc	r8,800033d4 <udi_cdc_data_enable+0x54>
	udi_cdc_rx_buf_nb[0] = 0;
800033a8:	b0 07       	st.h	r8[0x0],r7
800033aa:	48 c8       	lddpc	r8,800033d8 <udi_cdc_data_enable+0x58>
	udi_cdc_rx_pos = 0;
800033ac:	b0 07       	st.h	r8[0x0],r7
800033ae:	cd fe       	rcall	8000316c <udi_cdc_rx_start>
	udi_cdc_running = udi_cdc_rx_start();
800033b0:	48 b8       	lddpc	r8,800033dc <udi_cdc_data_enable+0x5c>
800033b2:	b0 8c       	st.b	r8[0x0],r12
800033b4:	11 8c       	ld.ub	r12,r8[0x0]
800033b6:	d8 22       	popm	r4-r7,pc
	return udi_cdc_running;
800033b8:	00 00       	add	r0,r0
}
800033ba:	09 be       	ld.ub	lr,r4[0x3]
800033bc:	00 00       	add	r0,r0
800033be:	0c 41       	or	r1,r6
800033c0:	00 00       	add	r0,r0
800033c2:	07 30       	ld.ub	r0,r3++
800033c4:	00 00       	add	r0,r0
800033c6:	07 2f       	ld.uh	pc,r3++
800033c8:	00 00       	add	r0,r0
800033ca:	09 ba       	ld.ub	r10,r4[0x3]
800033cc:	00 00       	add	r0,r0
800033ce:	0c 40       	or	r0,r6
800033d0:	00 00       	add	r0,r0
800033d2:	09 bc       	ld.ub	r12,r4[0x3]
800033d4:	00 00       	add	r0,r0
800033d6:	09 b4       	ld.ub	r4,r4[0x3]
800033d8:	00 00       	add	r0,r0
800033da:	09 b8       	ld.ub	r8,r4[0x3]
800033dc:	00 00       	add	r0,r0
800033de:	09 bd       	ld.ub	sp,r4[0x3]

800033e0 <udi_cdc_comm_disable>:
800033e0:	d4 01       	pushm	lr
800033e2:	30 09       	mov	r9,0
800033e4:	48 38       	lddpc	r8,800033f0 <udi_cdc_comm_disable+0x10>
800033e6:	b0 89       	st.b	r8[0x0],r9
800033e8:	e0 a0 03 28 	rcall	80003a38 <stdio_usb_disable>

void udi_cdc_comm_disable(void)
{
	udi_cdc_running = false;
	UDI_CDC_DISABLE_EXT();
}
800033ec:	d8 02       	popm	pc
800033ee:	d7 03       	nop
800033f0:	00 00       	add	r0,r0
800033f2:	09 bd       	ld.ub	sp,r4[0x3]

800033f4 <udi_cdc_comm_enable>:
800033f4:	d4 01       	pushm	lr
800033f6:	48 b8       	lddpc	r8,80003420 <udi_cdc_comm_enable+0x2c>


bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
800033f8:	30 09       	mov	r9,0
800033fa:	48 ba       	lddpc	r10,80003424 <udi_cdc_comm_enable+0x30>
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
800033fc:	b0 89       	st.b	r8[0x0],r9


bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
800033fe:	b4 09       	st.h	r10[0x0],r9
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
80003400:	b0 d9       	st.b	r8[0x5],r9
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003402:	b0 c9       	st.b	r8[0x4],r9

bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
80003404:	48 9a       	lddpc	r10,80003428 <udi_cdc_comm_enable+0x34>
80003406:	b4 49       	st.h	r10[0x8],r9

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003408:	30 09       	mov	r9,0
8000340a:	b0 b9       	st.b	r8[0x3],r9
8000340c:	3c 29       	mov	r9,-62
8000340e:	b0 99       	st.b	r8[0x1],r9
80003410:	30 19       	mov	r9,1
80003412:	b0 a9       	st.b	r8[0x2],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003414:	30 89       	mov	r9,8
80003416:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
80003418:	e0 a0 03 08 	rcall	80003a28 <stdio_usb_enable>
}
8000341c:	d8 02       	popm	pc
8000341e:	d7 03       	nop
80003420:	00 00       	add	r0,r0
80003422:	07 28       	ld.uh	r8,r3++
80003424:	00 00       	add	r0,r0
80003426:	0c 42       	or	r2,r6
80003428:	00 00       	add	r0,r0
8000342a:	00 30       	cp.w	r0,r0

8000342c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000342c:	d4 01       	pushm	lr
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
8000342e:	49 c8       	lddpc	r8,8000349c <udc_update_iface_desc+0x70>
80003430:	11 89       	ld.ub	r9,r8[0x0]
80003432:	30 08       	mov	r8,0
80003434:	f0 09 18 00 	cp.b	r9,r8
80003438:	c3 10       	breq	8000349a <udc_update_iface_desc+0x6e>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
8000343a:	49 a8       	lddpc	r8,800034a0 <udc_update_iface_desc+0x74>
8000343c:	70 08       	ld.w	r8,r8[0x0]
8000343e:	70 08       	ld.w	r8,r8[0x0]
80003440:	11 c9       	ld.ub	r9,r8[0x4]
80003442:	f8 09 18 00 	cp.b	r9,r12
80003446:	e0 88 00 2a 	brls	8000349a <udc_update_iface_desc+0x6e>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000344a:	49 79       	lddpc	r9,800034a4 <udc_update_iface_desc+0x78>
8000344c:	93 08       	st.w	r9[0x0],r8
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000344e:	11 aa       	ld.ub	r10,r8[0x2]
80003450:	11 b9       	ld.ub	r9,r8[0x3]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003452:	30 4e       	mov	lr,4
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003454:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80003458:	f2 0a 16 08 	lsr	r10,r9,0x8
8000345c:	f5 e9 10 89 	or	r9,r10,r9<<0x8
80003460:	5c 79       	castu.h	r9
80003462:	f0 09 00 09 	add	r9,r8,r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003466:	c1 38       	rjmp	8000348c <udc_update_iface_desc+0x60>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003468:	11 9a       	ld.ub	r10,r8[0x1]
8000346a:	fc 0a 18 00 	cp.b	r10,lr
8000346e:	c0 d1       	brne	80003488 <udc_update_iface_desc+0x5c>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
80003470:	11 aa       	ld.ub	r10,r8[0x2]
80003472:	f8 0a 18 00 	cp.b	r10,r12
80003476:	c0 91       	brne	80003488 <udc_update_iface_desc+0x5c>
					&& (setting_num ==
							udc_ptr_iface->
80003478:	11 ba       	ld.ub	r10,r8[0x3]
8000347a:	f6 0a 18 00 	cp.b	r10,r11
8000347e:	c0 51       	brne	80003488 <udc_update_iface_desc+0x5c>
80003480:	48 99       	lddpc	r9,800034a4 <udc_update_iface_desc+0x78>
80003482:	30 1c       	mov	r12,1
80003484:	93 08       	st.w	r9[0x0],r8
80003486:	d8 02       	popm	pc
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80003488:	11 8a       	ld.ub	r10,r8[0x0]
8000348a:	14 08       	add	r8,r10
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000348c:	10 39       	cp.w	r9,r8
8000348e:	fe 9b ff ed 	brhi	80003468 <udc_update_iface_desc+0x3c>
80003492:	48 59       	lddpc	r9,800034a4 <udc_update_iface_desc+0x78>
80003494:	30 0c       	mov	r12,0
80003496:	93 08       	st.w	r9[0x0],r8
80003498:	d8 02       	popm	pc
8000349a:	d8 0a       	popm	pc,r12=0
8000349c:	00 00       	add	r0,r0
8000349e:	0c 50       	eor	r0,r6
800034a0:	00 00       	add	r0,r0
800034a2:	0c 48       	or	r8,r6
800034a4:	00 00       	add	r0,r0
800034a6:	0c 54       	eor	r4,r6

800034a8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800034a8:	d4 21       	pushm	r4-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800034aa:	48 e8       	lddpc	r8,800034e0 <udc_sof_notify+0x38>
800034ac:	11 89       	ld.ub	r9,r8[0x0]
800034ae:	30 08       	mov	r8,0
800034b0:	f0 09 18 00 	cp.b	r9,r8
800034b4:	c1 40       	breq	800034dc <udc_sof_notify+0x34>
800034b6:	30 07       	mov	r7,0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800034b8:	48 b6       	lddpc	r6,800034e4 <udc_sof_notify+0x3c>
800034ba:	c0 a8       	rjmp	800034ce <udc_sof_notify+0x26>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800034bc:	70 18       	ld.w	r8,r8[0x4]
800034be:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800034c2:	70 48       	ld.w	r8,r8[0x10]
800034c4:	58 08       	cp.w	r8,0
800034c6:	c0 20       	breq	800034ca <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800034c8:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800034ca:	2f f7       	sub	r7,-1
800034cc:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800034ce:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800034d0:	70 09       	ld.w	r9,r8[0x0]
800034d2:	13 c9       	ld.ub	r9,r9[0x4]
800034d4:	ee 09 18 00 	cp.b	r9,r7
800034d8:	fe 9b ff f2 	brhi	800034bc <udc_sof_notify+0x14>
800034dc:	d8 22       	popm	r4-r7,pc
800034de:	d7 03       	nop
800034e0:	00 00       	add	r0,r0
800034e2:	0c 50       	eor	r0,r6
800034e4:	00 00       	add	r0,r0
800034e6:	0c 48       	or	r8,r6

800034e8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800034e8:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800034ea:	48 48       	lddpc	r8,800034f8 <udc_valid_address+0x10>
800034ec:	11 bc       	ld.ub	r12,r8[0x3]
800034ee:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800034f2:	fe b0 f6 85 	rcall	800021fc <udd_set_address>
}
800034f6:	d8 02       	popm	pc
800034f8:	00 00       	add	r0,r0
800034fa:	0c 98       	mov	r8,r6

800034fc <udc_iface_enable>:
800034fc:	d4 31       	pushm	r0-r7,lr
800034fe:	18 96       	mov	r6,r12
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
80003500:	c9 6f       	rcall	8000342c <udc_update_iface_desc>
80003502:	c3 c0       	breq	8000357a <udc_iface_enable+0x7e>
80003504:	49 e8       	lddpc	r8,8000357c <udc_iface_enable+0x80>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003506:	49 f3       	lddpc	r3,80003580 <udc_iface_enable+0x84>
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003508:	70 07       	ld.w	r7,r8[0x0]

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000350a:	30 44       	mov	r4,4
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
8000350c:	30 55       	mov	r5,5
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
8000350e:	66 0a       	ld.w	r10,r3[0x0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003510:	74 08       	ld.w	r8,r10[0x0]
80003512:	11 ac       	ld.ub	r12,r8[0x2]
80003514:	11 bb       	ld.ub	r11,r8[0x3]
80003516:	0f 89       	ld.ub	r9,r7[0x0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003518:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000351c:	ee 09 00 09 	add	r9,r7,r9
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003520:	f6 0c 16 08 	lsr	r12,r11,0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003524:	f9 eb 10 8b 	or	r11,r12,r11<<0x8
80003528:	5c 7b       	castu.h	r11
8000352a:	16 08       	add	r8,r11
8000352c:	c0 a8       	rjmp	80003540 <udc_iface_enable+0x44>
8000352e:	13 9c       	ld.ub	r12,r9[0x1]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80003530:	e8 0c 18 00 	cp.b	r12,r4
80003534:	c0 90       	breq	80003546 <udc_iface_enable+0x4a>
80003536:	ea 0c 18 00 	cp.b	r12,r5
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
8000353a:	c0 70       	breq	80003548 <udc_iface_enable+0x4c>
8000353c:	13 8b       	ld.ub	r11,r9[0x0]
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000353e:	16 09       	add	r9,r11
80003540:	12 38       	cp.w	r8,r9
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003542:	fe 9b ff f6 	brhi	8000352e <udc_iface_enable+0x32>
80003546:	30 09       	mov	r9,0
80003548:	12 97       	mov	r7,r9

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000354a:	58 09       	cp.w	r9,0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000354c:	c1 10       	breq	8000356e <udc_iface_enable+0x72>
8000354e:	13 ca       	ld.ub	r10,r9[0x4]
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80003550:	13 d8       	ld.ub	r8,r9[0x5]
80003552:	13 ac       	ld.ub	r12,r9[0x2]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003554:	f1 ea 10 88 	or	r8,r8,r10<<0x8
80003558:	13 bb       	ld.ub	r11,r9[0x3]
8000355a:	f0 09 16 08 	lsr	r9,r8,0x8
8000355e:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80003562:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003566:	fe b0 f8 93 	rcall	8000268c <udd_ep_alloc>
8000356a:	cd 21       	brne	8000350e <udc_iface_enable+0x12>
8000356c:	c0 78       	rjmp	8000357a <udc_iface_enable+0x7e>
8000356e:	74 18       	ld.w	r8,r10[0x4]
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003570:	f0 06 03 28 	ld.w	r8,r8[r6<<0x2]
80003574:	70 0c       	ld.w	r12,r8[0x0]
80003576:	5d 1c       	icall	r12
80003578:	d8 32       	popm	r0-r7,pc
8000357a:	d8 3a       	popm	r0-r7,pc,r12=0
8000357c:	00 00       	add	r0,r0
8000357e:	0c 54       	eor	r4,r6
80003580:	00 00       	add	r0,r0
80003582:	0c 48       	or	r8,r6

80003584 <udc_iface_disable>:
80003584:	d4 31       	pushm	r0-r7,lr
80003586:	30 0b       	mov	r11,0
80003588:	18 95       	mov	r5,r12
8000358a:	c5 1f       	rcall	8000342c <udc_update_iface_desc>
8000358c:	c3 70       	breq	800035fa <udc_iface_disable+0x76>
8000358e:	49 c6       	lddpc	r6,800035fc <udc_iface_disable+0x78>
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003590:	6c 08       	ld.w	r8,r6[0x0]
80003592:	70 18       	ld.w	r8,r8[0x4]
80003594:	f0 05 03 27 	ld.w	r7,r8[r5<<0x2]
80003598:	6e 3c       	ld.w	r12,r7[0xc]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
8000359a:	5d 1c       	icall	r12
8000359c:	18 9b       	mov	r11,r12
8000359e:	0a 9c       	mov	r12,r5
800035a0:	c4 6f       	rcall	8000342c <udc_update_iface_desc>
800035a2:	c2 c0       	breq	800035fa <udc_iface_disable+0x76>
800035a4:	49 78       	lddpc	r8,80003600 <udc_iface_disable+0x7c>
800035a6:	30 43       	mov	r3,4
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800035a8:	70 05       	ld.w	r5,r8[0x0]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800035aa:	30 54       	mov	r4,5
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800035ac:	6c 08       	ld.w	r8,r6[0x0]
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800035ae:	70 09       	ld.w	r9,r8[0x0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800035b0:	13 ab       	ld.ub	r11,r9[0x2]
800035b2:	13 ba       	ld.ub	r10,r9[0x3]
800035b4:	0b 88       	ld.ub	r8,r5[0x0]
800035b6:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800035ba:	ea 08 00 08 	add	r8,r5,r8
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800035be:	f4 0b 16 08 	lsr	r11,r10,0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800035c2:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
800035c6:	5c 7a       	castu.h	r10
800035c8:	14 09       	add	r9,r10
800035ca:	c0 a8       	rjmp	800035de <udc_iface_disable+0x5a>
800035cc:	11 9b       	ld.ub	r11,r8[0x1]
800035ce:	e6 0b 18 00 	cp.b	r11,r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800035d2:	c0 90       	breq	800035e4 <udc_iface_disable+0x60>
800035d4:	e8 0b 18 00 	cp.b	r11,r4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800035d8:	c0 70       	breq	800035e6 <udc_iface_disable+0x62>
800035da:	11 8a       	ld.ub	r10,r8[0x0]
800035dc:	14 08       	add	r8,r10
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800035de:	10 39       	cp.w	r9,r8
800035e0:	fe 9b ff f6 	brhi	800035cc <udc_iface_disable+0x48>
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800035e4:	30 08       	mov	r8,0
800035e6:	10 95       	mov	r5,r8
800035e8:	58 08       	cp.w	r8,0
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800035ea:	c0 50       	breq	800035f4 <udc_iface_disable+0x70>
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
800035ec:	11 ac       	ld.ub	r12,r8[0x2]
800035ee:	fe b0 f6 c5 	rcall	80002378 <udd_ep_free>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
800035f2:	cd db       	rjmp	800035ac <udc_iface_disable+0x28>
800035f4:	6e 18       	ld.w	r8,r7[0x4]
		}
800035f6:	5d 18       	icall	r8
	}
#endif

	// Disable interface
	udi_api->disable();
800035f8:	da 3a       	popm	r0-r7,pc,r12=1
800035fa:	d8 3a       	popm	r0-r7,pc,r12=0
800035fc:	00 00       	add	r0,r0
	return true;
800035fe:	0c 48       	or	r8,r6
80003600:	00 00       	add	r0,r0
80003602:	0c 54       	eor	r4,r6

80003604 <udc_reset>:
80003604:	d4 21       	pushm	r4-r7,lr
80003606:	48 f8       	lddpc	r8,80003640 <udc_reset+0x3c>
80003608:	11 89       	ld.ub	r9,r8[0x0]
8000360a:	30 08       	mov	r8,0
8000360c:	f0 09 18 00 	cp.b	r9,r8
 */
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
80003610:	c0 f0       	breq	8000362e <udc_reset+0x2a>
80003612:	30 07       	mov	r7,0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003614:	48 c6       	lddpc	r6,80003644 <udc_reset+0x40>
80003616:	c0 58       	rjmp	80003620 <udc_reset+0x1c>
				iface_num++) {
			udc_iface_disable(iface_num);
80003618:	0e 9c       	mov	r12,r7
8000361a:	cb 5f       	rcall	80003584 <udc_iface_disable>
8000361c:	2f f7       	sub	r7,-1
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000361e:	5c 57       	castu.b	r7
80003620:	6c 08       	ld.w	r8,r6[0x0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003622:	70 08       	ld.w	r8,r8[0x0]
80003624:	11 c8       	ld.ub	r8,r8[0x4]
80003626:	ee 08 18 00 	cp.b	r8,r7
8000362a:	fe 9b ff f7 	brhi	80003618 <udc_reset+0x14>
8000362e:	30 09       	mov	r9,0
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003630:	48 48       	lddpc	r8,80003640 <udc_reset+0x3c>
80003632:	b0 89       	st.b	r8[0x0],r9
80003634:	e0 69 01 00 	mov	r9,256
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80003638:	48 48       	lddpc	r8,80003648 <udc_reset+0x44>
8000363a:	b0 09       	st.h	r8[0x0],r9
8000363c:	d8 22       	popm	r4-r7,pc
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000363e:	d7 03       	nop
80003640:	00 00       	add	r0,r0
80003642:	0c 50       	eor	r0,r6
80003644:	00 00       	add	r0,r0
80003646:	0c 48       	or	r8,r6
80003648:	00 00       	add	r0,r0
8000364a:	0c 4e       	or	lr,r6

8000364c <udc_process_setup>:
8000364c:	d4 21       	pushm	r4-r7,lr
8000364e:	4c c8       	lddpc	r8,8000377c <udc_process_setup+0x130>
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
80003650:	30 0a       	mov	r10,0
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003652:	30 09       	mov	r9,0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
80003654:	91 5a       	st.w	r8[0x14],r10
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003656:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003658:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
8000365a:	11 86       	ld.ub	r6,r8[0x0]
8000365c:	f2 06 18 00 	cp.b	r6,r9
80003660:	c0 64       	brge	8000366c <udc_process_setup+0x20>
		if (udd_g_ctrlreq.req.wLength == 0)
80003662:	90 38       	ld.sh	r8,r8[0x6]
80003664:	f2 08 19 00 	cp.h	r8,r9
80003668:	e0 80 01 b3 	breq	800039ce <udc_process_setup+0x382>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000366c:	0c 9b       	mov	r11,r6
8000366e:	e2 1b 00 60 	andl	r11,0x60,COH
80003672:	e0 81 01 87 	brne	80003980 <udc_process_setup+0x334>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003676:	16 98       	mov	r8,r11
80003678:	f6 06 18 00 	cp.b	r6,r11
8000367c:	e0 84 00 d9 	brge	8000382e <udc_process_setup+0x1e2>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003680:	4b f7       	lddpc	r7,8000377c <udc_process_setup+0x130>
80003682:	8e 39       	ld.sh	r9,r7[0x6]
80003684:	58 09       	cp.w	r9,0
80003686:	e0 80 01 7d 	breq	80003980 <udc_process_setup+0x334>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000368a:	ed d6 c0 05 	bfextu	r6,r6,0x0,0x5
8000368e:	e0 81 00 8d 	brne	800037a8 <udc_process_setup+0x15c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003692:	0f 9a       	ld.ub	r10,r7[0x1]
80003694:	30 6b       	mov	r11,6
80003696:	f6 0a 18 00 	cp.b	r10,r11
8000369a:	c1 10       	breq	800036bc <udc_process_setup+0x70>
8000369c:	30 8b       	mov	r11,8
8000369e:	f6 0a 18 00 	cp.b	r10,r11
800036a2:	c7 b0       	breq	80003798 <udc_process_setup+0x14c>
800036a4:	f0 0a 18 00 	cp.b	r10,r8
800036a8:	e0 81 01 6c 	brne	80003980 <udc_process_setup+0x334>
800036ac:	30 28       	mov	r8,2
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
800036ae:	f0 09 19 00 	cp.h	r9,r8
800036b2:	e0 81 01 67 	brne	80003980 <udc_process_setup+0x334>
800036b6:	30 2b       	mov	r11,2
		return false;

	udd_set_setup_payload(
800036b8:	4b 2c       	lddpc	r12,80003780 <udc_process_setup+0x134>
800036ba:	c9 f8       	rjmp	800037f8 <udc_process_setup+0x1ac>
800036bc:	8e 1a       	ld.sh	r10,r7[0x2]
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
800036be:	30 2b       	mov	r11,2

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
800036c0:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
800036c4:	f0 06 16 08 	lsr	r6,r8,0x8
800036c8:	f6 06 18 00 	cp.b	r6,r11
800036cc:	c0 f0       	breq	800036ea <udc_process_setup+0x9e>
800036ce:	30 3a       	mov	r10,3
800036d0:	f4 06 18 00 	cp.b	r6,r10
800036d4:	c2 80       	breq	80003724 <udc_process_setup+0xd8>
800036d6:	30 18       	mov	r8,1
800036d8:	f0 06 18 00 	cp.b	r6,r8
800036dc:	e0 81 01 52 	brne	80003980 <udc_process_setup+0x334>
800036e0:	4a 98       	lddpc	r8,80003784 <udc_process_setup+0x138>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
800036e2:	70 08       	ld.w	r8,r8[0x0]
800036e4:	10 9c       	mov	r12,r8
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
800036e6:	11 8b       	ld.ub	r11,r8[0x0]
800036e8:	c3 f8       	rjmp	80003766 <udc_process_setup+0x11a>
800036ea:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
800036ee:	4a 69       	lddpc	r9,80003784 <udc_process_setup+0x138>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
800036f0:	72 0a       	ld.w	r10,r9[0x0]
800036f2:	f5 3a 00 11 	ld.ub	r10,r10[17]
800036f6:	f0 0a 18 00 	cp.b	r10,r8
800036fa:	e0 88 01 43 	brls	80003980 <udc_process_setup+0x334>
800036fe:	72 19       	ld.w	r9,r9[0x4]
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003700:	f2 08 03 38 	ld.w	r8,r9[r8<<0x3]
80003704:	11 a9       	ld.ub	r9,r8[0x2]
80003706:	10 9c       	mov	r12,r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003708:	11 b8       	ld.ub	r8,r8[0x3]
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000370a:	f1 e9 10 88 	or	r8,r8,r9<<0x8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
8000370e:	f0 09 16 08 	lsr	r9,r8,0x8
80003712:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80003716:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
8000371a:	fe b0 f5 95 	rcall	80002244 <udd_set_setup_payload>
8000371e:	6e 28       	ld.w	r8,r7[0x8]
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003720:	b0 96       	st.b	r8[0x1],r6
80003722:	c2 48       	rjmp	8000376a <udc_process_setup+0x11e>
80003724:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003728:	58 18       	cp.w	r8,1
8000372a:	c0 60       	breq	80003736 <udc_process_setup+0xea>
8000372c:	58 28       	cp.w	r8,2
8000372e:	c0 a0       	breq	80003742 <udc_process_setup+0xf6>
80003730:	58 08       	cp.w	r8,0
80003732:	c0 50       	breq	8000373c <udc_process_setup+0xf0>
80003734:	c2 69       	rjmp	80003980 <udc_process_setup+0x334>
80003736:	30 98       	mov	r8,9
80003738:	49 4a       	lddpc	r10,80003788 <udc_process_setup+0x13c>
8000373a:	c0 68       	rjmp	80003746 <udc_process_setup+0xfa>
8000373c:	30 4b       	mov	r11,4
	case 0:
		udd_set_setup_payload(
8000373e:	49 4c       	lddpc	r12,8000378c <udc_process_setup+0x140>
80003740:	c1 38       	rjmp	80003766 <udc_process_setup+0x11a>
80003742:	30 38       	mov	r8,3
80003744:	49 3a       	lddpc	r10,80003790 <udc_process_setup+0x144>
80003746:	49 4b       	lddpc	r11,80003794 <udc_process_setup+0x148>
80003748:	14 99       	mov	r9,r10
8000374a:	2f eb       	sub	r11,-2
8000374c:	13 3c       	ld.ub	r12,r9++
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000374e:	a9 6c       	lsl	r12,0x8
80003750:	16 bc       	st.h	r11++,r12
80003752:	f2 0a 01 0c 	sub	r12,r9,r10
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003756:	f0 0c 18 00 	cp.b	r12,r8
8000375a:	cf 93       	brcs	8000374c <udc_process_setup+0x100>
8000375c:	2f f8       	sub	r8,-1
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
8000375e:	48 ec       	lddpc	r12,80003794 <udc_process_setup+0x148>
80003760:	a1 78       	lsl	r8,0x1
80003762:	10 9b       	mov	r11,r8
		udd_set_setup_payload(
80003764:	b8 88       	st.b	r12[0x0],r8
	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003766:	fe b0 f5 6f 	rcall	80002244 <udd_set_setup_payload>
		udd_set_setup_payload(
8000376a:	48 58       	lddpc	r8,8000377c <udc_process_setup+0x130>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
8000376c:	90 39       	ld.sh	r9,r8[0x6]
8000376e:	90 6a       	ld.sh	r10,r8[0xc]
80003770:	f2 0a 19 00 	cp.h	r10,r9
80003774:	e0 88 01 2e 	brls	800039d0 <udc_process_setup+0x384>
80003778:	b0 69       	st.h	r8[0xc],r9
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000377a:	c2 b9       	rjmp	800039d0 <udc_process_setup+0x384>
8000377c:	00 00       	add	r0,r0
8000377e:	0c 98       	mov	r8,r6
80003780:	00 00       	add	r0,r0
80003782:	0c 4e       	or	lr,r6
80003784:	00 00       	add	r0,r0
80003786:	00 90       	mov	r0,r0
80003788:	00 00       	add	r0,r0
8000378a:	00 b0       	st.h	r0++,r0
8000378c:	00 00       	add	r0,r0
8000378e:	00 d0       	st.w	--r0,r0
80003790:	00 00       	add	r0,r0
80003792:	00 ac       	st.w	r0++,r12
80003794:	00 00       	add	r0,r0
80003796:	00 bc       	st.h	r0++,r12
80003798:	30 18       	mov	r8,1
8000379a:	f0 09 19 00 	cp.h	r9,r8
8000379e:	e0 81 00 f1 	brne	80003980 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
800037a2:	30 1b       	mov	r11,1
800037a4:	4c 8c       	lddpc	r12,800038c4 <udc_process_setup+0x278>
800037a6:	c2 98       	rjmp	800037f8 <udc_process_setup+0x1ac>
800037a8:	58 16       	cp.w	r6,1
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
800037aa:	c2 a1       	brne	800037fe <udc_process_setup+0x1b2>
800037ac:	0f 9c       	ld.ub	r12,r7[0x1]
800037ae:	30 aa       	mov	r10,10
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800037b0:	f4 0c 18 00 	cp.b	r12,r10
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800037b4:	e0 81 00 e6 	brne	80003980 <udc_process_setup+0x334>
800037b8:	ec 09 19 00 	cp.h	r9,r6
800037bc:	e0 81 00 e2 	brne	80003980 <udc_process_setup+0x334>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
800037c0:	4c 19       	lddpc	r9,800038c4 <udc_process_setup+0x278>
800037c2:	13 89       	ld.ub	r9,r9[0x0]
800037c4:	f6 09 18 00 	cp.b	r9,r11
		return false;	// Error in request
	if (!udc_num_configuration)
800037c8:	e0 80 00 dc 	breq	80003980 <udc_process_setup+0x334>
800037cc:	4b f8       	lddpc	r8,800038c8 <udc_process_setup+0x27c>
800037ce:	0f d7       	ld.ub	r7,r7[0x5]
800037d0:	70 06       	ld.w	r6,r8[0x0]
800037d2:	6c 08       	ld.w	r8,r6[0x0]
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800037d4:	11 c8       	ld.ub	r8,r8[0x4]
		return false;	// Error in request
	if (!udc_num_configuration)
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800037d6:	ee 08 18 00 	cp.b	r8,r7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800037da:	e0 88 00 d3 	brls	80003980 <udc_process_setup+0x334>
800037de:	0e 9c       	mov	r12,r7
800037e0:	c2 6e       	rcall	8000342c <udc_update_iface_desc>
800037e2:	e0 80 00 cf 	breq	80003980 <udc_process_setup+0x334>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
800037e6:	6c 18       	ld.w	r8,r6[0x4]
800037e8:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037ec:	70 3c       	ld.w	r12,r8[0xc]
800037ee:	5d 1c       	icall	r12
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
800037f0:	4b 78       	lddpc	r8,800038cc <udc_process_setup+0x280>
800037f2:	30 1b       	mov	r11,1
800037f4:	b0 8c       	st.b	r8[0x0],r12
800037f6:	10 9c       	mov	r12,r8
800037f8:	fe b0 f5 26 	rcall	80002244 <udd_set_setup_payload>
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
800037fc:	c3 48       	rjmp	80003864 <udc_process_setup+0x218>
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
800037fe:	58 26       	cp.w	r6,2
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003800:	e0 81 00 c0 	brne	80003980 <udc_process_setup+0x334>
80003804:	0f 9a       	ld.ub	r10,r7[0x1]
80003806:	f6 0a 18 00 	cp.b	r10,r11
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000380a:	e0 81 00 bb 	brne	80003980 <udc_process_setup+0x334>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000380e:	ec 09 19 00 	cp.h	r9,r6
80003812:	e0 81 00 b7 	brne	80003980 <udc_process_setup+0x334>
80003816:	0f dc       	ld.ub	r12,r7[0x5]
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003818:	fe b0 f5 1c 	rcall	80002250 <udd_ep_is_halted>
8000381c:	4a d8       	lddpc	r8,800038d0 <udc_process_setup+0x284>
8000381e:	e0 69 01 00 	mov	r9,256
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003822:	0c 9b       	mov	r11,r6
80003824:	58 0c       	cp.w	r12,0
80003826:	f9 b9 00 00 	moveq	r9,0
8000382a:	b0 09       	st.h	r8[0x0],r9
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
8000382c:	ce 5b       	rjmp	800037f6 <udc_process_setup+0x1aa>
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000382e:	ef d6 c0 05 	bfextu	r7,r6,0x0,0x5
80003832:	c6 51       	brne	800038fc <udc_process_setup+0x2b0>
80003834:	4a 86       	lddpc	r6,800038d4 <udc_process_setup+0x288>
80003836:	30 59       	mov	r9,5
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003838:	0d 98       	ld.ub	r8,r6[0x1]
8000383a:	f2 08 18 00 	cp.b	r8,r9
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000383e:	c0 b0       	breq	80003854 <udc_process_setup+0x208>
80003840:	30 99       	mov	r9,9
80003842:	f2 08 18 00 	cp.b	r8,r9
80003846:	c2 10       	breq	80003888 <udc_process_setup+0x23c>
80003848:	30 19       	mov	r9,1
8000384a:	f2 08 18 00 	cp.b	r8,r9
8000384e:	e0 81 00 99 	brne	80003980 <udc_process_setup+0x334>
80003852:	c0 a8       	rjmp	80003866 <udc_process_setup+0x21a>
80003854:	8c 38       	ld.sh	r8,r6[0x6]
80003856:	ee 08 19 00 	cp.h	r8,r7
8000385a:	e0 81 00 93 	brne	80003980 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
8000385e:	fe c8 03 76 	sub	r8,pc,886
80003862:	8d 48       	st.w	r6[0x10],r8
80003864:	da 2a       	popm	r4-r7,pc,r12=1
80003866:	8c 38       	ld.sh	r8,r6[0x6]
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003868:	ee 08 19 00 	cp.h	r8,r7
8000386c:	e0 81 00 8a 	brne	80003980 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003870:	8c 19       	ld.sh	r9,r6[0x2]
80003872:	30 18       	mov	r8,1
80003874:	f0 09 19 00 	cp.h	r9,r8
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003878:	e0 81 00 84 	brne	80003980 <udc_process_setup+0x334>
8000387c:	49 79       	lddpc	r9,800038d8 <udc_process_setup+0x28c>
8000387e:	30 1c       	mov	r12,1
80003880:	92 08       	ld.sh	r8,r9[0x0]
80003882:	a9 d8       	cbr	r8,0x9
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003884:	b2 08       	st.h	r9[0x0],r8
80003886:	d8 22       	popm	r4-r7,pc
80003888:	8c 39       	ld.sh	r9,r6[0x6]
8000388a:	ee 09 19 00 	cp.h	r9,r7
8000388e:	c7 91       	brne	80003980 <udc_process_setup+0x334>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003890:	fe b0 f4 c7 	rcall	8000221e <udd_getaddress>
80003894:	c7 60       	breq	80003980 <udc_process_setup+0x334>
80003896:	49 25       	lddpc	r5,800038dc <udc_process_setup+0x290>
80003898:	0d b9       	ld.ub	r9,r6[0x3]
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
8000389a:	6a 08       	ld.w	r8,r5[0x0]
8000389c:	f1 38 00 11 	ld.ub	r8,r8[17]
800038a0:	10 39       	cp.w	r9,r8
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
800038a2:	e0 89 00 6f 	brgt	80003980 <udc_process_setup+0x334>
800038a6:	ca fe       	rcall	80003604 <udc_reset>
800038a8:	0d b8       	ld.ub	r8,r6[0x3]
800038aa:	48 79       	lddpc	r9,800038c4 <udc_process_setup+0x278>
800038ac:	b2 88       	st.b	r9[0x0],r8
800038ae:	58 08       	cp.w	r8,0
800038b0:	e0 80 00 90 	breq	800039d0 <udc_process_setup+0x384>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
800038b4:	20 18       	sub	r8,1

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800038b6:	6a 19       	ld.w	r9,r5[0x4]
800038b8:	48 46       	lddpc	r6,800038c8 <udc_process_setup+0x27c>
800038ba:	f2 08 00 38 	add	r8,r9,r8<<0x3
	if (udc_num_configuration == 0) {
800038be:	8d 08       	st.w	r6[0x0],r8
800038c0:	c1 68       	rjmp	800038ec <udc_process_setup+0x2a0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800038c2:	d7 03       	nop
800038c4:	00 00       	add	r0,r0
800038c6:	0c 50       	eor	r0,r6
800038c8:	00 00       	add	r0,r0
800038ca:	0c 48       	or	r8,r6
800038cc:	00 00       	add	r0,r0
800038ce:	0c 4c       	or	r12,r6
800038d0:	00 00       	add	r0,r0
800038d2:	0c 44       	or	r4,r6
800038d4:	00 00       	add	r0,r0
800038d6:	0c 98       	mov	r8,r6
800038d8:	00 00       	add	r0,r0
800038da:	0c 4e       	or	lr,r6
800038dc:	00 00       	add	r0,r0
800038de:	00 90       	mov	r0,r0
800038e0:	0e 9c       	mov	r12,r7
800038e2:	30 0b       	mov	r11,0
800038e4:	c0 ce       	rcall	800034fc <udc_iface_enable>
800038e6:	c4 d0       	breq	80003980 <udc_process_setup+0x334>
800038e8:	2f f7       	sub	r7,-1
800038ea:	5c 57       	castu.b	r7
800038ec:	6c 08       	ld.w	r8,r6[0x0]
800038ee:	70 08       	ld.w	r8,r8[0x0]
800038f0:	11 c8       	ld.ub	r8,r8[0x4]
800038f2:	ee 08 18 00 	cp.b	r8,r7
800038f6:	fe 9b ff f5 	brhi	800038e0 <udc_process_setup+0x294>
800038fa:	c6 b8       	rjmp	800039d0 <udc_process_setup+0x384>
800038fc:	58 17       	cp.w	r7,1
800038fe:	c1 b1       	brne	80003934 <udc_process_setup+0x2e8>
80003900:	4b 59       	lddpc	r9,800039d4 <udc_process_setup+0x388>
80003902:	30 ba       	mov	r10,11
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003904:	13 9c       	ld.ub	r12,r9[0x1]
80003906:	f4 0c 18 00 	cp.b	r12,r10
8000390a:	c3 b1       	brne	80003980 <udc_process_setup+0x334>
8000390c:	92 3a       	ld.sh	r10,r9[0x6]
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000390e:	f6 0a 19 00 	cp.h	r10,r11
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003912:	c3 71       	brne	80003980 <udc_process_setup+0x334>
80003914:	4b 1a       	lddpc	r10,800039d8 <udc_process_setup+0x38c>
80003916:	15 8a       	ld.ub	r10,r10[0x0]
80003918:	f6 0a 18 00 	cp.b	r10,r11
8000391c:	c3 20       	breq	80003980 <udc_process_setup+0x334>
8000391e:	13 d7       	ld.ub	r7,r9[0x5]
80003920:	92 16       	ld.sh	r6,r9[0x2]
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003922:	0e 9c       	mov	r12,r7
80003924:	c3 0e       	rcall	80003584 <udc_iface_disable>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003926:	c2 d0       	breq	80003980 <udc_process_setup+0x334>
80003928:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
8000392c:	0e 9c       	mov	r12,r7
8000392e:	fe b0 fd e7 	rcall	800034fc <udc_iface_enable>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003932:	c2 58       	rjmp	8000397c <udc_process_setup+0x330>
80003934:	58 27       	cp.w	r7,2
80003936:	c2 51       	brne	80003980 <udc_process_setup+0x334>
80003938:	4a 78       	lddpc	r8,800039d4 <udc_process_setup+0x388>
		return false;	// Error in request
	if (!udc_num_configuration)
8000393a:	30 1a       	mov	r10,1
8000393c:	11 99       	ld.ub	r9,r8[0x1]
8000393e:	f4 09 18 00 	cp.b	r9,r10
80003942:	c0 60       	breq	8000394e <udc_process_setup+0x302>

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003944:	30 3a       	mov	r10,3
	if (!udc_num_configuration)
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003946:	f4 09 18 00 	cp.b	r9,r10

	// Disable current setting
	if (!udc_iface_disable(iface_num))
8000394a:	c1 b1       	brne	80003980 <udc_process_setup+0x334>
8000394c:	c0 d8       	rjmp	80003966 <udc_process_setup+0x31a>
8000394e:	90 39       	ld.sh	r9,r8[0x6]
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003950:	f6 09 19 00 	cp.h	r9,r11
80003954:	c1 61       	brne	80003980 <udc_process_setup+0x334>
80003956:	90 1a       	ld.sh	r10,r8[0x2]
80003958:	f2 0a 19 00 	cp.h	r10,r9
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000395c:	c1 21       	brne	80003980 <udc_process_setup+0x334>
8000395e:	11 dc       	ld.ub	r12,r8[0x5]
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003960:	fe b0 f4 c0 	rcall	800022e0 <udd_ep_clear_halt>
80003964:	c0 c8       	rjmp	8000397c <udc_process_setup+0x330>
80003966:	90 39       	ld.sh	r9,r8[0x6]
80003968:	f6 09 19 00 	cp.h	r9,r11
8000396c:	c0 a1       	brne	80003980 <udc_process_setup+0x334>
8000396e:	90 1a       	ld.sh	r10,r8[0x2]
80003970:	f2 0a 19 00 	cp.h	r10,r9
80003974:	c0 61       	brne	80003980 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003976:	11 dc       	ld.ub	r12,r8[0x5]
80003978:	fe b0 f4 76 	rcall	80002264 <udd_ep_set_halt>
8000397c:	58 0c       	cp.w	r12,0
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000397e:	c2 91       	brne	800039d0 <udc_process_setup+0x384>
80003980:	49 58       	lddpc	r8,800039d4 <udc_process_setup+0x388>
80003982:	11 89       	ld.ub	r9,r8[0x0]
80003984:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003988:	58 19       	cp.w	r9,1
8000398a:	c2 21       	brne	800039ce <udc_process_setup+0x382>
8000398c:	49 39       	lddpc	r9,800039d8 <udc_process_setup+0x38c>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
8000398e:	13 8a       	ld.ub	r10,r9[0x0]
80003990:	30 09       	mov	r9,0
80003992:	f2 0a 18 00 	cp.b	r10,r9
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003996:	c1 c0       	breq	800039ce <udc_process_setup+0x382>
80003998:	11 d7       	ld.ub	r7,r8[0x5]
8000399a:	49 18       	lddpc	r8,800039dc <udc_process_setup+0x390>
8000399c:	70 06       	ld.w	r6,r8[0x0]
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000399e:	6c 08       	ld.w	r8,r6[0x0]
800039a0:	11 c8       	ld.ub	r8,r8[0x4]
800039a2:	ee 08 18 00 	cp.b	r8,r7
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
800039a6:	e0 88 00 14 	brls	800039ce <udc_process_setup+0x382>
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
800039aa:	30 0b       	mov	r11,0
800039ac:	0e 9c       	mov	r12,r7
800039ae:	fe b0 fd 3f 	rcall	8000342c <udc_update_iface_desc>
800039b2:	c0 e0       	breq	800039ce <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
800039b4:	6c 18       	ld.w	r8,r6[0x4]
800039b6:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
800039ba:	6c 3c       	ld.w	r12,r6[0xc]
800039bc:	5d 1c       	icall	r12
800039be:	18 9b       	mov	r11,r12
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800039c0:	0e 9c       	mov	r12,r7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800039c2:	fe b0 fd 35 	rcall	8000342c <udc_update_iface_desc>
800039c6:	c0 40       	breq	800039ce <udc_process_setup+0x382>
800039c8:	6c 2c       	ld.w	r12,r6[0x8]
800039ca:	5d 1c       	icall	r12
800039cc:	d8 22       	popm	r4-r7,pc
800039ce:	d8 2a       	popm	r4-r7,pc,r12=0
800039d0:	da 2a       	popm	r4-r7,pc,r12=1
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
800039d2:	d7 03       	nop
800039d4:	00 00       	add	r0,r0
800039d6:	0c 98       	mov	r8,r6
800039d8:	00 00       	add	r0,r0
800039da:	0c 50       	eor	r0,r6
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800039dc:	00 00       	add	r0,r0
800039de:	0c 48       	or	r8,r6

800039e0 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
800039e0:	d4 31       	pushm	r0-r7,lr
800039e2:	20 1d       	sub	sp,4
800039e4:	16 97       	mov	r7,r11
800039e6:	14 92       	mov	r2,r10
	int nChars = 0;

	if (file != 0)
800039e8:	58 0c       	cp.w	r12,0
800039ea:	c0 30       	breq	800039f0 <_read+0x10>
800039ec:	3f f6       	mov	r6,-1
800039ee:	c1 58       	rjmp	80003a18 <_read+0x38>
800039f0:	18 96       	mov	r6,r12
		return -1;

	for (; len > 0; --len) {
		int c;
		ptr_get(stdio_base,&c);
800039f2:	48 c3       	lddpc	r3,80003a20 <_read+0x40>
800039f4:	48 c4       	lddpc	r4,80003a24 <_read+0x44>
800039f6:	1a 95       	mov	r5,sp
800039f8:	c0 b8       	rjmp	80003a0e <_read+0x2e>
800039fa:	68 08       	ld.w	r8,r4[0x0]
800039fc:	66 0c       	ld.w	r12,r3[0x0]
800039fe:	1a 9b       	mov	r11,sp
80003a00:	5d 18       	icall	r8
		if (c < 0)
80003a02:	40 08       	lddsp	r8,sp[0x0]
80003a04:	58 08       	cp.w	r8,0
80003a06:	c0 95       	brlt	80003a18 <_read+0x38>
		break;
		*ptr++ = c;
80003a08:	ee 06 0b 08 	st.b	r7[r6],r8
		++nChars;
80003a0c:	2f f6       	sub	r6,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003a0e:	e4 06 01 08 	sub	r8,r2,r6
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003a12:	58 08       	cp.w	r8,0
80003a14:	fe 99 ff f3 	brgt	800039fa <_read+0x1a>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003a18:	0c 9c       	mov	r12,r6
80003a1a:	2f fd       	sub	sp,-4
80003a1c:	d8 32       	popm	r0-r7,pc
80003a1e:	d7 03       	nop
80003a20:	00 00       	add	r0,r0
80003a22:	0c c0       	st.b	r6++,r0
80003a24:	00 00       	add	r0,r0
80003a26:	0c b8       	st.h	r6++,r8

80003a28 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003a28:	30 19       	mov	r9,1
80003a2a:	48 38       	lddpc	r8,80003a34 <stdio_usb_enable+0xc>
	return true;
}
80003a2c:	30 1c       	mov	r12,1
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003a2e:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003a30:	5e fc       	retal	r12
80003a32:	d7 03       	nop
80003a34:	00 00       	add	r0,r0
80003a36:	0c 58       	eor	r8,r6

80003a38 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003a38:	30 09       	mov	r9,0
80003a3a:	48 28       	lddpc	r8,80003a40 <stdio_usb_disable+0x8>
80003a3c:	b0 89       	st.b	r8[0x0],r9
}
80003a3e:	5e fc       	retal	r12
80003a40:	00 00       	add	r0,r0
80003a42:	0c 58       	eor	r8,r6

80003a44 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003a44:	d4 01       	pushm	lr
	if (b_high) {
80003a46:	58 0c       	cp.w	r12,0
80003a48:	c0 40       	breq	80003a50 <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003a4a:	fe b0 f6 e7 	rcall	80002818 <udd_attach>
80003a4e:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003a50:	fe b0 f5 6e 	rcall	8000252c <udd_detach>
80003a54:	d8 02       	popm	pc
80003a56:	d7 03       	nop

80003a58 <stdio_usb_init>:
80003a58:	d4 01       	pushm	lr
80003a5a:	48 a8       	lddpc	r8,80003a80 <stdio_usb_init+0x28>
80003a5c:	fe c9 ff ac 	sub	r9,pc,-84
}

void stdio_usb_init (volatile void * usart)
{
	stdio_base = usart;
	ptr_put = stdio_usb_putchar;
80003a60:	91 0c       	st.w	r8[0x0],r12
80003a62:	48 98       	lddpc	r8,80003a84 <stdio_usb_init+0x2c>
	ptr_get = stdio_usb_getchar;
80003a64:	91 09       	st.w	r8[0x0],r9
80003a66:	fe c9 ff da 	sub	r9,pc,-38

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003a6a:	48 88       	lddpc	r8,80003a88 <stdio_usb_init+0x30>
80003a6c:	91 09       	st.w	r8[0x0],r9
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003a6e:	fe b0 f6 ff 	rcall	8000286c <udd_enable>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003a72:	fe b0 f3 c3 	rcall	800021f8 <udd_include_vbus_monitoring>
		stdio_usb_vbus_event (true);
80003a76:	c0 31       	brne	80003a7c <stdio_usb_init+0x24>
80003a78:	30 1c       	mov	r12,1
80003a7a:	ce 5f       	rcall	80003a44 <stdio_usb_vbus_event>
80003a7c:	d8 02       	popm	pc
80003a7e:	d7 03       	nop
80003a80:	00 00       	add	r0,r0
80003a82:	0c c0       	st.b	r6++,r0
80003a84:	00 00       	add	r0,r0
80003a86:	0c bc       	st.h	r6++,r12
80003a88:	00 00       	add	r0,r0
80003a8a:	0c b8       	st.h	r6++,r8

80003a8c <stdio_usb_getchar>:
80003a8c:	d4 21       	pushm	r4-r7,lr
80003a8e:	48 88       	lddpc	r8,80003aac <stdio_usb_getchar+0x20>
80003a90:	16 97       	mov	r7,r11
80003a92:	11 89       	ld.ub	r9,r8[0x0]
80003a94:	30 08       	mov	r8,0
80003a96:	f0 09 18 00 	cp.b	r9,r8
80003a9a:	c0 41       	brne	80003aa2 <stdio_usb_getchar+0x16>
{
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		*data = 0;  // -1
80003a9c:	30 08       	mov	r8,0
80003a9e:	97 08       	st.w	r11[0x0],r8
		return;
80003aa0:	d8 22       	popm	r4-r7,pc
	}
	
	*data = udi_cdc_getc ();
80003aa2:	fe b0 fb 9d 	rcall	800031dc <udi_cdc_getc>
80003aa6:	8f 0c       	st.w	r7[0x0],r12
80003aa8:	d8 22       	popm	r4-r7,pc
80003aaa:	d7 03       	nop
80003aac:	00 00       	add	r0,r0
80003aae:	0c 58       	eor	r8,r6

80003ab0 <stdio_usb_putchar>:
80003ab0:	d4 01       	pushm	lr
80003ab2:	48 78       	lddpc	r8,80003acc <stdio_usb_putchar+0x1c>
int stdio_usb_putchar (volatile void * usart, int data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003ab4:	11 89       	ld.ub	r9,r8[0x0]
80003ab6:	30 08       	mov	r8,0
80003ab8:	f0 09 18 00 	cp.b	r9,r8
80003abc:	c0 60       	breq	80003ac8 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003abe:	16 9c       	mov	r12,r11
80003ac0:	fe b0 fb 20 	rcall	80003100 <udi_cdc_putc>
80003ac4:	c0 21       	brne	80003ac8 <stdio_usb_putchar+0x18>
80003ac6:	dc 0a       	popm	pc,r12=-1
80003ac8:	d8 0a       	popm	pc,r12=0
80003aca:	d7 03       	nop
80003acc:	00 00       	add	r0,r0
80003ace:	0c 58       	eor	r8,r6

80003ad0 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003ad0:	d4 31       	pushm	r0-r7,lr
80003ad2:	16 97       	mov	r7,r11
80003ad4:	14 93       	mov	r3,r10
		int nChars = 0;
	
		if ( (file != 1)
80003ad6:	20 1c       	sub	r12,1
80003ad8:	58 2c       	cp.w	r12,2
80003ada:	e0 8b 00 10 	brhi	80003afa <_write+0x2a>
80003ade:	30 06       	mov	r6,0
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003ae0:	48 84       	lddpc	r4,80003b00 <_write+0x30>
80003ae2:	48 95       	lddpc	r5,80003b04 <_write+0x34>
80003ae4:	c0 88       	rjmp	80003af4 <_write+0x24>
80003ae6:	ee 06 07 0b 	ld.ub	r11,r7[r6]
80003aea:	68 0c       	ld.w	r12,r4[0x0]
				return -1;
			}
			++nChars;
80003aec:	2f f6       	sub	r6,-1
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003aee:	6a 08       	ld.w	r8,r5[0x0]
80003af0:	5d 18       	icall	r8
80003af2:	c0 45       	brlt	80003afa <_write+0x2a>
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003af4:	0c 33       	cp.w	r3,r6
80003af6:	cf 81       	brne	80003ae6 <_write+0x16>
80003af8:	c0 28       	rjmp	80003afc <_write+0x2c>
80003afa:	3f f6       	mov	r6,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80003afc:	0c 9c       	mov	r12,r6
80003afe:	d8 32       	popm	r0-r7,pc
80003b00:	00 00       	add	r0,r0
80003b02:	0c c0       	st.b	r6++,r0
80003b04:	00 00       	add	r0,r0
80003b06:	0c bc       	st.h	r6++,r12

80003b08 <busy_delay_init>:

//_____ D E C L A R A T I O N S ____________________________________________

void busy_delay_init(unsigned long fcpu_hz)
{
    s_fcpu_hz = fcpu_hz;
80003b08:	48 28       	lddpc	r8,80003b10 <busy_delay_init+0x8>
80003b0a:	91 0c       	st.w	r8[0x0],r12
}
80003b0c:	5e fc       	retal	r12
80003b0e:	d7 03       	nop
80003b10:	00 00       	add	r0,r0
80003b12:	0c 5c       	eor	r12,r6

80003b14 <busy_delay_us>:
{
    cpu_delay_ms(delay, s_fcpu_hz);
}

void busy_delay_us(unsigned long delay)
{
80003b14:	d4 01       	pushm	lr
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003b16:	49 18       	lddpc	r8,80003b58 <busy_delay_us+0x44>
80003b18:	70 0b       	ld.w	r11,r8[0x0]
80003b1a:	ee 78 42 3f 	mov	r8,999999
80003b1e:	f8 0b 06 4a 	mulu.d	r10,r12,r11
80003b22:	30 09       	mov	r9,0
80003b24:	10 0a       	add	r10,r8
80003b26:	f6 09 00 4b 	adc	r11,r11,r9
80003b2a:	ee 78 42 40 	mov	r8,1000000
80003b2e:	30 09       	mov	r9,0
80003b30:	c7 ac       	rcall	80003c24 <__avr32_udiv64>
80003b32:	e1 b8 00 42 	mfsr	r8,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003b36:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003b3a:	e1 b9 00 42 	mfsr	r9,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003b3e:	14 38       	cp.w	r8,r10
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003b40:	e0 88 00 05 	brls	80003b4a <busy_delay_us+0x36>
80003b44:	10 39       	cp.w	r9,r8
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003b46:	cf a2       	brcc	80003b3a <busy_delay_us+0x26>
80003b48:	c0 38       	rjmp	80003b4e <busy_delay_us+0x3a>
80003b4a:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003b4c:	c0 43       	brcs	80003b54 <busy_delay_us+0x40>
80003b4e:	14 39       	cp.w	r9,r10
80003b50:	fe 98 ff f5 	brls	80003b3a <busy_delay_us+0x26>
80003b54:	d8 02       	popm	pc
80003b56:	d7 03       	nop
80003b58:	00 00       	add	r0,r0
80003b5a:	0c 5c       	eor	r12,r6

80003b5c <busy_delay_ms>:
80003b5c:	d4 01       	pushm	lr
80003b5e:	49 18       	lddpc	r8,80003ba0 <busy_delay_ms+0x44>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003b60:	70 0b       	ld.w	r11,r8[0x0]
80003b62:	e0 68 03 e7 	mov	r8,999
80003b66:	f8 0b 06 4a 	mulu.d	r10,r12,r11
80003b6a:	30 09       	mov	r9,0
80003b6c:	10 0a       	add	r10,r8
80003b6e:	f6 09 00 4b 	adc	r11,r11,r9
80003b72:	e0 68 03 e8 	mov	r8,1000
80003b76:	30 09       	mov	r9,0
80003b78:	c5 6c       	rcall	80003c24 <__avr32_udiv64>
80003b7a:	e1 b8 00 42 	mfsr	r8,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003b7e:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003b82:	e1 b9 00 42 	mfsr	r9,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003b86:	14 38       	cp.w	r8,r10
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003b88:	e0 88 00 05 	brls	80003b92 <busy_delay_ms+0x36>
80003b8c:	10 39       	cp.w	r9,r8
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003b8e:	cf a2       	brcc	80003b82 <busy_delay_ms+0x26>
80003b90:	c0 38       	rjmp	80003b96 <busy_delay_ms+0x3a>
80003b92:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003b94:	c0 43       	brcs	80003b9c <busy_delay_ms+0x40>
80003b96:	14 39       	cp.w	r9,r10
80003b98:	fe 98 ff f5 	brls	80003b82 <busy_delay_ms+0x26>
80003b9c:	d8 02       	popm	pc
80003b9e:	d7 03       	nop
80003ba0:	00 00       	add	r0,r0
80003ba2:	0c 5c       	eor	r12,r6

80003ba4 <interrupt_J3>:
    #endif
}

__attribute__((__interrupt__)) static void interrupt_J3(void){ 

}
80003ba4:	d6 03       	rete
80003ba6:	d7 03       	nop

80003ba8 <init>:
#define RESPONSE_C  AVR32_PIN_PB00


__attribute__((__interrupt__)) static void interrupt_J3(void);

void init(){
80003ba8:	d4 21       	pushm	r4-r7,lr
    sysclk_init();
80003baa:	fe b0 f9 b3 	rcall	80002f10 <sysclk_init>
    board_init();
80003bae:	fe b0 f2 2b 	rcall	80002004 <board_init>
    busy_delay_init(BOARD_OSC0_HZ);
80003bb2:	e0 6c 1b 00 	mov	r12,6912
80003bb6:	ea 1c 00 b7 	orh	r12,0xb7
80003bba:	ca 7f       	rcall	80003b08 <busy_delay_init>
80003bbc:	d3 03       	ssrf	0x10
    
    cpu_irq_disable();
80003bbe:	fe b0 f2 df 	rcall	8000217c <INTC_init_interrupts>
    INTC_init_interrupts();
80003bc2:	30 1a       	mov	r10,1
    INTC_register_interrupt(&interrupt_J3, AVR32_GPIO_IRQ_3, AVR32_INTC_INT1);
80003bc4:	34 3b       	mov	r11,67
80003bc6:	fe cc 00 22 	sub	r12,pc,34
80003bca:	fe b0 f2 c3 	rcall	80002150 <INTC_register_interrupt>
    cpu_irq_enable();
80003bce:	d5 03       	csrf	0x10
    
    stdio_usb_init(&CONFIG_USART_IF);
80003bd0:	fe 7c 1c 00 	mov	r12,-58368
80003bd4:	c4 2f       	rcall	80003a58 <stdio_usb_init>
80003bd6:	48 67       	lddpc	r7,80003bec <init+0x44>

    #if defined(__GNUC__) && defined(__AVR32__)
        setbuf(stdout, NULL);
80003bd8:	6e 08       	ld.w	r8,r7[0x0]
80003bda:	30 0b       	mov	r11,0
80003bdc:	70 1c       	ld.w	r12,r8[0x4]
80003bde:	c5 5d       	rcall	80003e88 <setbuf>
80003be0:	6e 08       	ld.w	r8,r7[0x0]
80003be2:	30 0b       	mov	r11,0
        setbuf(stdin,  NULL);
80003be4:	70 0c       	ld.w	r12,r8[0x0]
80003be6:	c5 1d       	rcall	80003e88 <setbuf>
80003be8:	d8 22       	popm	r4-r7,pc
80003bea:	d7 03       	nop
80003bec:	00 00       	add	r0,r0
    #endif
}
80003bee:	01 c4       	ld.ub	r4,r0[0x4]

80003bf0 <main>:
80003bf0:	d4 21       	pushm	r4-r7,lr
80003bf2:	cd bf       	rcall	80003ba8 <init>
80003bf4:	32 3c       	mov	r12,35
80003bf6:	fe b0 f2 a1 	rcall	80002138 <gpio_set_pin_low>
80003bfa:	e0 6c 03 e8 	mov	r12,1000
80003bfe:	ca ff       	rcall	80003b5c <busy_delay_ms>
80003c00:	30 0c       	mov	r12,0
80003c02:	fe b0 f2 86 	rcall	8000210e <gpio_get_pin_value>
80003c06:	18 97       	mov	r7,r12
80003c08:	cf c1       	brne	80003c00 <main+0x10>
80003c0a:	32 3c       	mov	r12,35
80003c0c:	fe b0 f2 8c 	rcall	80002124 <gpio_set_pin_high>
80003c10:	31 ec       	mov	r12,30
80003c12:	fe b0 f2 89 	rcall	80002124 <gpio_set_pin_high>
       // printf("tick\n");
        
        //busy_delay_ms(500);
    }
	gpio_set_pin_high(LED0_GPIO);
    gpio_set_pin_high(RESPONSE_A);
80003c16:	30 5c       	mov	r12,5
80003c18:	c7 ef       	rcall	80003b14 <busy_delay_us>
    busy_delay_us(5);
80003c1a:	31 ec       	mov	r12,30
80003c1c:	fe b0 f2 8e 	rcall	80002138 <gpio_set_pin_low>
    gpio_set_pin_low(RESPONSE_A);
80003c20:	0e 9c       	mov	r12,r7
80003c22:	d8 22       	popm	r4-r7,pc

80003c24 <__avr32_udiv64>:
80003c24:	d4 31       	pushm	r0-r7,lr
80003c26:	1a 97       	mov	r7,sp
80003c28:	20 3d       	sub	sp,12
80003c2a:	10 9c       	mov	r12,r8
80003c2c:	12 9e       	mov	lr,r9
80003c2e:	14 93       	mov	r3,r10
80003c30:	58 09       	cp.w	r9,0
80003c32:	e0 81 00 bd 	brne	80003dac <__avr32_udiv64+0x188>
80003c36:	16 38       	cp.w	r8,r11
80003c38:	e0 88 00 40 	brls	80003cb8 <__avr32_udiv64+0x94>
80003c3c:	f0 08 12 00 	clz	r8,r8
80003c40:	c0 d0       	breq	80003c5a <__avr32_udiv64+0x36>
80003c42:	f6 08 09 4b 	lsl	r11,r11,r8
80003c46:	f0 09 11 20 	rsub	r9,r8,32
80003c4a:	f8 08 09 4c 	lsl	r12,r12,r8
80003c4e:	f4 09 0a 49 	lsr	r9,r10,r9
80003c52:	f4 08 09 43 	lsl	r3,r10,r8
80003c56:	f3 eb 10 0b 	or	r11,r9,r11
80003c5a:	f8 0e 16 10 	lsr	lr,r12,0x10
80003c5e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003c62:	f6 0e 0d 00 	divu	r0,r11,lr
80003c66:	e6 0b 16 10 	lsr	r11,r3,0x10
80003c6a:	00 99       	mov	r9,r0
80003c6c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003c70:	e0 0a 02 48 	mul	r8,r0,r10
80003c74:	10 3b       	cp.w	r11,r8
80003c76:	c0 a2       	brcc	80003c8a <__avr32_udiv64+0x66>
80003c78:	20 19       	sub	r9,1
80003c7a:	18 0b       	add	r11,r12
80003c7c:	18 3b       	cp.w	r11,r12
80003c7e:	c0 63       	brcs	80003c8a <__avr32_udiv64+0x66>
80003c80:	10 3b       	cp.w	r11,r8
80003c82:	f7 b9 03 01 	sublo	r9,1
80003c86:	f7 dc e3 0b 	addcs	r11,r11,r12
80003c8a:	f6 08 01 01 	sub	r1,r11,r8
80003c8e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003c92:	e2 0e 0d 00 	divu	r0,r1,lr
80003c96:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003c9a:	00 98       	mov	r8,r0
80003c9c:	e0 0a 02 4a 	mul	r10,r0,r10
80003ca0:	14 33       	cp.w	r3,r10
80003ca2:	c0 82       	brcc	80003cb2 <__avr32_udiv64+0x8e>
80003ca4:	20 18       	sub	r8,1
80003ca6:	18 03       	add	r3,r12
80003ca8:	18 33       	cp.w	r3,r12
80003caa:	c0 43       	brcs	80003cb2 <__avr32_udiv64+0x8e>
80003cac:	14 33       	cp.w	r3,r10
80003cae:	f7 b8 03 01 	sublo	r8,1
80003cb2:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003cb6:	cd f8       	rjmp	80003e74 <__avr32_udiv64+0x250>
80003cb8:	58 08       	cp.w	r8,0
80003cba:	c0 51       	brne	80003cc4 <__avr32_udiv64+0xa0>
80003cbc:	30 19       	mov	r9,1
80003cbe:	f2 08 0d 08 	divu	r8,r9,r8
80003cc2:	10 9c       	mov	r12,r8
80003cc4:	f8 06 12 00 	clz	r6,r12
80003cc8:	c0 41       	brne	80003cd0 <__avr32_udiv64+0xac>
80003cca:	18 1b       	sub	r11,r12
80003ccc:	30 19       	mov	r9,1
80003cce:	c4 08       	rjmp	80003d4e <__avr32_udiv64+0x12a>
80003cd0:	ec 01 11 20 	rsub	r1,r6,32
80003cd4:	f4 01 0a 49 	lsr	r9,r10,r1
80003cd8:	f8 06 09 4c 	lsl	r12,r12,r6
80003cdc:	f6 06 09 48 	lsl	r8,r11,r6
80003ce0:	f6 01 0a 41 	lsr	r1,r11,r1
80003ce4:	f3 e8 10 08 	or	r8,r9,r8
80003ce8:	f8 03 16 10 	lsr	r3,r12,0x10
80003cec:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003cf0:	e2 03 0d 00 	divu	r0,r1,r3
80003cf4:	f0 0b 16 10 	lsr	r11,r8,0x10
80003cf8:	00 9e       	mov	lr,r0
80003cfa:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003cfe:	e0 05 02 49 	mul	r9,r0,r5
80003d02:	12 3b       	cp.w	r11,r9
80003d04:	c0 a2       	brcc	80003d18 <__avr32_udiv64+0xf4>
80003d06:	20 1e       	sub	lr,1
80003d08:	18 0b       	add	r11,r12
80003d0a:	18 3b       	cp.w	r11,r12
80003d0c:	c0 63       	brcs	80003d18 <__avr32_udiv64+0xf4>
80003d0e:	12 3b       	cp.w	r11,r9
80003d10:	f7 be 03 01 	sublo	lr,1
80003d14:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d18:	12 1b       	sub	r11,r9
80003d1a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003d1e:	f6 03 0d 02 	divu	r2,r11,r3
80003d22:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003d26:	04 99       	mov	r9,r2
80003d28:	e4 05 02 4b 	mul	r11,r2,r5
80003d2c:	16 38       	cp.w	r8,r11
80003d2e:	c0 a2       	brcc	80003d42 <__avr32_udiv64+0x11e>
80003d30:	20 19       	sub	r9,1
80003d32:	18 08       	add	r8,r12
80003d34:	18 38       	cp.w	r8,r12
80003d36:	c0 63       	brcs	80003d42 <__avr32_udiv64+0x11e>
80003d38:	16 38       	cp.w	r8,r11
80003d3a:	f7 b9 03 01 	sublo	r9,1
80003d3e:	f1 dc e3 08 	addcs	r8,r8,r12
80003d42:	f4 06 09 43 	lsl	r3,r10,r6
80003d46:	f0 0b 01 0b 	sub	r11,r8,r11
80003d4a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003d4e:	f8 06 16 10 	lsr	r6,r12,0x10
80003d52:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003d56:	f6 06 0d 00 	divu	r0,r11,r6
80003d5a:	e6 0b 16 10 	lsr	r11,r3,0x10
80003d5e:	00 9a       	mov	r10,r0
80003d60:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003d64:	e0 0e 02 48 	mul	r8,r0,lr
80003d68:	10 3b       	cp.w	r11,r8
80003d6a:	c0 a2       	brcc	80003d7e <__avr32_udiv64+0x15a>
80003d6c:	20 1a       	sub	r10,1
80003d6e:	18 0b       	add	r11,r12
80003d70:	18 3b       	cp.w	r11,r12
80003d72:	c0 63       	brcs	80003d7e <__avr32_udiv64+0x15a>
80003d74:	10 3b       	cp.w	r11,r8
80003d76:	f7 ba 03 01 	sublo	r10,1
80003d7a:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d7e:	f6 08 01 01 	sub	r1,r11,r8
80003d82:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003d86:	e2 06 0d 00 	divu	r0,r1,r6
80003d8a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003d8e:	00 98       	mov	r8,r0
80003d90:	e0 0e 02 4b 	mul	r11,r0,lr
80003d94:	16 33       	cp.w	r3,r11
80003d96:	c0 82       	brcc	80003da6 <__avr32_udiv64+0x182>
80003d98:	20 18       	sub	r8,1
80003d9a:	18 03       	add	r3,r12
80003d9c:	18 33       	cp.w	r3,r12
80003d9e:	c0 43       	brcs	80003da6 <__avr32_udiv64+0x182>
80003da0:	16 33       	cp.w	r3,r11
80003da2:	f7 b8 03 01 	sublo	r8,1
80003da6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80003daa:	c6 98       	rjmp	80003e7c <__avr32_udiv64+0x258>
80003dac:	16 39       	cp.w	r9,r11
80003dae:	e0 8b 00 65 	brhi	80003e78 <__avr32_udiv64+0x254>
80003db2:	f2 09 12 00 	clz	r9,r9
80003db6:	c0 b1       	brne	80003dcc <__avr32_udiv64+0x1a8>
80003db8:	10 3a       	cp.w	r10,r8
80003dba:	5f 2a       	srhs	r10
80003dbc:	1c 3b       	cp.w	r11,lr
80003dbe:	5f b8       	srhi	r8
80003dc0:	10 4a       	or	r10,r8
80003dc2:	f2 0a 18 00 	cp.b	r10,r9
80003dc6:	c5 90       	breq	80003e78 <__avr32_udiv64+0x254>
80003dc8:	30 18       	mov	r8,1
80003dca:	c5 98       	rjmp	80003e7c <__avr32_udiv64+0x258>
80003dcc:	f0 09 09 46 	lsl	r6,r8,r9
80003dd0:	f2 03 11 20 	rsub	r3,r9,32
80003dd4:	fc 09 09 4e 	lsl	lr,lr,r9
80003dd8:	f0 03 0a 48 	lsr	r8,r8,r3
80003ddc:	f6 09 09 4c 	lsl	r12,r11,r9
80003de0:	f4 03 0a 42 	lsr	r2,r10,r3
80003de4:	ef 46 ff f4 	st.w	r7[-12],r6
80003de8:	f6 03 0a 43 	lsr	r3,r11,r3
80003dec:	18 42       	or	r2,r12
80003dee:	f1 ee 10 0c 	or	r12,r8,lr
80003df2:	f8 01 16 10 	lsr	r1,r12,0x10
80003df6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80003dfa:	e6 01 0d 04 	divu	r4,r3,r1
80003dfe:	e4 03 16 10 	lsr	r3,r2,0x10
80003e02:	08 9e       	mov	lr,r4
80003e04:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80003e08:	e8 06 02 48 	mul	r8,r4,r6
80003e0c:	10 33       	cp.w	r3,r8
80003e0e:	c0 a2       	brcc	80003e22 <__avr32_udiv64+0x1fe>
80003e10:	20 1e       	sub	lr,1
80003e12:	18 03       	add	r3,r12
80003e14:	18 33       	cp.w	r3,r12
80003e16:	c0 63       	brcs	80003e22 <__avr32_udiv64+0x1fe>
80003e18:	10 33       	cp.w	r3,r8
80003e1a:	f7 be 03 01 	sublo	lr,1
80003e1e:	e7 dc e3 03 	addcs	r3,r3,r12
80003e22:	10 13       	sub	r3,r8
80003e24:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003e28:	e6 01 0d 00 	divu	r0,r3,r1
80003e2c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003e30:	00 98       	mov	r8,r0
80003e32:	e0 06 02 46 	mul	r6,r0,r6
80003e36:	0c 3b       	cp.w	r11,r6
80003e38:	c0 a2       	brcc	80003e4c <__avr32_udiv64+0x228>
80003e3a:	20 18       	sub	r8,1
80003e3c:	18 0b       	add	r11,r12
80003e3e:	18 3b       	cp.w	r11,r12
80003e40:	c0 63       	brcs	80003e4c <__avr32_udiv64+0x228>
80003e42:	0c 3b       	cp.w	r11,r6
80003e44:	f7 dc e3 0b 	addcs	r11,r11,r12
80003e48:	f7 b8 03 01 	sublo	r8,1
80003e4c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003e50:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003e54:	0c 1b       	sub	r11,r6
80003e56:	f0 04 06 42 	mulu.d	r2,r8,r4
80003e5a:	06 95       	mov	r5,r3
80003e5c:	16 35       	cp.w	r5,r11
80003e5e:	e0 8b 00 0a 	brhi	80003e72 <__avr32_udiv64+0x24e>
80003e62:	5f 0b       	sreq	r11
80003e64:	f4 09 09 49 	lsl	r9,r10,r9
80003e68:	12 32       	cp.w	r2,r9
80003e6a:	5f b9       	srhi	r9
80003e6c:	f7 e9 00 09 	and	r9,r11,r9
80003e70:	c0 60       	breq	80003e7c <__avr32_udiv64+0x258>
80003e72:	20 18       	sub	r8,1
80003e74:	30 09       	mov	r9,0
80003e76:	c0 38       	rjmp	80003e7c <__avr32_udiv64+0x258>
80003e78:	30 09       	mov	r9,0
80003e7a:	12 98       	mov	r8,r9
80003e7c:	10 9a       	mov	r10,r8
80003e7e:	12 93       	mov	r3,r9
80003e80:	10 92       	mov	r2,r8
80003e82:	12 9b       	mov	r11,r9
80003e84:	2f dd       	sub	sp,-12
80003e86:	d8 32       	popm	r0-r7,pc

80003e88 <setbuf>:
80003e88:	d4 01       	pushm	lr
80003e8a:	e0 69 04 00 	mov	r9,1024
80003e8e:	58 0b       	cp.w	r11,0
80003e90:	f9 ba 00 02 	moveq	r10,2
80003e94:	f9 ba 01 00 	movne	r10,0
80003e98:	c0 2c       	rcall	80003e9c <setvbuf>
80003e9a:	d8 02       	popm	pc

80003e9c <setvbuf>:
80003e9c:	d4 31       	pushm	r0-r7,lr
80003e9e:	4b e8       	lddpc	r8,80003f94 <setvbuf+0xf8>
80003ea0:	18 97       	mov	r7,r12
80003ea2:	16 96       	mov	r6,r11
80003ea4:	14 95       	mov	r5,r10
80003ea6:	12 94       	mov	r4,r9
80003ea8:	70 0c       	ld.w	r12,r8[0x0]
80003eaa:	58 0c       	cp.w	r12,0
80003eac:	c0 50       	breq	80003eb6 <setvbuf+0x1a>
80003eae:	78 68       	ld.w	r8,r12[0x18]
80003eb0:	58 08       	cp.w	r8,0
80003eb2:	c0 21       	brne	80003eb6 <setvbuf+0x1a>
80003eb4:	c5 4d       	rcall	8000415c <__sinit>
80003eb6:	4b 98       	lddpc	r8,80003f98 <setvbuf+0xfc>
80003eb8:	10 37       	cp.w	r7,r8
80003eba:	c0 51       	brne	80003ec4 <setvbuf+0x28>
80003ebc:	4b 68       	lddpc	r8,80003f94 <setvbuf+0xf8>
80003ebe:	70 08       	ld.w	r8,r8[0x0]
80003ec0:	70 07       	ld.w	r7,r8[0x0]
80003ec2:	c0 e8       	rjmp	80003ede <setvbuf+0x42>
80003ec4:	4b 68       	lddpc	r8,80003f9c <setvbuf+0x100>
80003ec6:	10 37       	cp.w	r7,r8
80003ec8:	c0 51       	brne	80003ed2 <setvbuf+0x36>
80003eca:	4b 38       	lddpc	r8,80003f94 <setvbuf+0xf8>
80003ecc:	70 08       	ld.w	r8,r8[0x0]
80003ece:	70 17       	ld.w	r7,r8[0x4]
80003ed0:	c0 78       	rjmp	80003ede <setvbuf+0x42>
80003ed2:	4b 48       	lddpc	r8,80003fa0 <setvbuf+0x104>
80003ed4:	10 37       	cp.w	r7,r8
80003ed6:	c0 41       	brne	80003ede <setvbuf+0x42>
80003ed8:	4a f8       	lddpc	r8,80003f94 <setvbuf+0xf8>
80003eda:	70 08       	ld.w	r8,r8[0x0]
80003edc:	70 27       	ld.w	r7,r8[0x8]
80003ede:	58 25       	cp.w	r5,2
80003ee0:	5f b8       	srhi	r8
80003ee2:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80003ee6:	c0 20       	breq	80003eea <setvbuf+0x4e>
80003ee8:	dc 3a       	popm	r0-r7,pc,r12=-1
80003eea:	4a b3       	lddpc	r3,80003f94 <setvbuf+0xf8>
80003eec:	0e 9b       	mov	r11,r7
80003eee:	66 0c       	ld.w	r12,r3[0x0]
80003ef0:	c5 ac       	rcall	80003fa4 <_fflush_r>
80003ef2:	30 08       	mov	r8,0
80003ef4:	8f 68       	st.w	r7[0x18],r8
80003ef6:	8f 18       	st.w	r7[0x4],r8
80003ef8:	8e 68       	ld.sh	r8,r7[0xc]
80003efa:	ed b8 00 07 	bld	r8,0x7
80003efe:	c0 41       	brne	80003f06 <setvbuf+0x6a>
80003f00:	66 0c       	ld.w	r12,r3[0x0]
80003f02:	6e 4b       	ld.w	r11,r7[0x10]
80003f04:	cc 8d       	rcall	80004294 <_free_r>
80003f06:	8e 68       	ld.sh	r8,r7[0xc]
80003f08:	e0 18 ff 7c 	andl	r8,0xff7c
80003f0c:	ae 68       	st.h	r7[0xc],r8
80003f0e:	58 25       	cp.w	r5,2
80003f10:	c0 31       	brne	80003f16 <setvbuf+0x7a>
80003f12:	30 0c       	mov	r12,0
80003f14:	c1 38       	rjmp	80003f3a <setvbuf+0x9e>
80003f16:	58 06       	cp.w	r6,0
80003f18:	c2 11       	brne	80003f5a <setvbuf+0xbe>
80003f1a:	e0 63 04 00 	mov	r3,1024
80003f1e:	58 04       	cp.w	r4,0
80003f20:	e6 04 17 00 	moveq	r4,r3
80003f24:	08 9c       	mov	r12,r4
80003f26:	e0 a0 02 a3 	rcall	8000446c <malloc>
80003f2a:	18 96       	mov	r6,r12
80003f2c:	c1 41       	brne	80003f54 <setvbuf+0xb8>
80003f2e:	06 9c       	mov	r12,r3
80003f30:	e0 a0 02 9e 	rcall	8000446c <malloc>
80003f34:	18 96       	mov	r6,r12
80003f36:	c0 e1       	brne	80003f52 <setvbuf+0xb6>
80003f38:	3f fc       	mov	r12,-1
80003f3a:	8e 68       	ld.sh	r8,r7[0xc]
80003f3c:	a1 b8       	sbr	r8,0x1
80003f3e:	ae 68       	st.h	r7[0xc],r8
80003f40:	ee c8 ff b9 	sub	r8,r7,-71
80003f44:	8f 48       	st.w	r7[0x10],r8
80003f46:	8f 08       	st.w	r7[0x0],r8
80003f48:	30 08       	mov	r8,0
80003f4a:	8f 28       	st.w	r7[0x8],r8
80003f4c:	30 18       	mov	r8,1
80003f4e:	8f 58       	st.w	r7[0x14],r8
80003f50:	d8 32       	popm	r0-r7,pc
80003f52:	06 94       	mov	r4,r3
80003f54:	8e 68       	ld.sh	r8,r7[0xc]
80003f56:	a7 b8       	sbr	r8,0x7
80003f58:	ae 68       	st.h	r7[0xc],r8
80003f5a:	58 15       	cp.w	r5,1
80003f5c:	c0 71       	brne	80003f6a <setvbuf+0xce>
80003f5e:	8e 68       	ld.sh	r8,r7[0xc]
80003f60:	a1 a8       	sbr	r8,0x0
80003f62:	ae 68       	st.h	r7[0xc],r8
80003f64:	e8 08 11 00 	rsub	r8,r4,0
80003f68:	8f 68       	st.w	r7[0x18],r8
80003f6a:	48 b8       	lddpc	r8,80003f94 <setvbuf+0xf8>
80003f6c:	fe c9 fe b4 	sub	r9,pc,-332
80003f70:	70 08       	ld.w	r8,r8[0x0]
80003f72:	8f 46       	st.w	r7[0x10],r6
80003f74:	91 a9       	st.w	r8[0x28],r9
80003f76:	8f 06       	st.w	r7[0x0],r6
80003f78:	8f 54       	st.w	r7[0x14],r4
80003f7a:	8e 68       	ld.sh	r8,r7[0xc]
80003f7c:	10 9c       	mov	r12,r8
80003f7e:	e2 1c 00 08 	andl	r12,0x8,COH
80003f82:	c0 70       	breq	80003f90 <setvbuf+0xf4>
80003f84:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80003f88:	30 0c       	mov	r12,0
80003f8a:	f9 b4 01 00 	movne	r4,0
80003f8e:	8f 24       	st.w	r7[0x8],r4
80003f90:	d8 32       	popm	r0-r7,pc
80003f92:	d7 03       	nop
80003f94:	00 00       	add	r0,r0
80003f96:	01 c4       	ld.ub	r4,r0[0x4]
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	4e f8       	lddpc	r8,80004154 <__sfp+0x68>
80003f9c:	80 00       	ld.sh	r0,r0[0x0]
80003f9e:	4f 18       	lddpc	r8,80004160 <__sinit+0x4>
80003fa0:	80 00       	ld.sh	r0,r0[0x0]
80003fa2:	4f 38       	lddpc	r8,8000416c <__sinit+0x10>

80003fa4 <_fflush_r>:
80003fa4:	d4 21       	pushm	r4-r7,lr
80003fa6:	16 97       	mov	r7,r11
80003fa8:	18 96       	mov	r6,r12
80003faa:	76 48       	ld.w	r8,r11[0x10]
80003fac:	58 08       	cp.w	r8,0
80003fae:	c7 c0       	breq	800040a6 <_fflush_r+0x102>
80003fb0:	58 0c       	cp.w	r12,0
80003fb2:	c0 50       	breq	80003fbc <_fflush_r+0x18>
80003fb4:	78 68       	ld.w	r8,r12[0x18]
80003fb6:	58 08       	cp.w	r8,0
80003fb8:	c0 21       	brne	80003fbc <_fflush_r+0x18>
80003fba:	cd 1c       	rcall	8000415c <__sinit>
80003fbc:	4b b8       	lddpc	r8,800040a8 <_fflush_r+0x104>
80003fbe:	10 37       	cp.w	r7,r8
80003fc0:	c0 31       	brne	80003fc6 <_fflush_r+0x22>
80003fc2:	6c 07       	ld.w	r7,r6[0x0]
80003fc4:	c0 a8       	rjmp	80003fd8 <_fflush_r+0x34>
80003fc6:	4b a8       	lddpc	r8,800040ac <_fflush_r+0x108>
80003fc8:	10 37       	cp.w	r7,r8
80003fca:	c0 31       	brne	80003fd0 <_fflush_r+0x2c>
80003fcc:	6c 17       	ld.w	r7,r6[0x4]
80003fce:	c0 58       	rjmp	80003fd8 <_fflush_r+0x34>
80003fd0:	4b 88       	lddpc	r8,800040b0 <_fflush_r+0x10c>
80003fd2:	10 37       	cp.w	r7,r8
80003fd4:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80003fd8:	8e 6a       	ld.sh	r10,r7[0xc]
80003fda:	14 98       	mov	r8,r10
80003fdc:	ed ba 00 03 	bld	r10,0x3
80003fe0:	c4 20       	breq	80004064 <_fflush_r+0xc0>
80003fe2:	ab ba       	sbr	r10,0xb
80003fe4:	ae 6a       	st.h	r7[0xc],r10
80003fe6:	6e 18       	ld.w	r8,r7[0x4]
80003fe8:	58 08       	cp.w	r8,0
80003fea:	e0 89 00 06 	brgt	80003ff6 <_fflush_r+0x52>
80003fee:	6f 08       	ld.w	r8,r7[0x40]
80003ff0:	58 08       	cp.w	r8,0
80003ff2:	e0 8a 00 5a 	brle	800040a6 <_fflush_r+0x102>
80003ff6:	6e b8       	ld.w	r8,r7[0x2c]
80003ff8:	58 08       	cp.w	r8,0
80003ffa:	c5 60       	breq	800040a6 <_fflush_r+0x102>
80003ffc:	e2 1a 10 00 	andl	r10,0x1000,COH
80004000:	c0 30       	breq	80004006 <_fflush_r+0x62>
80004002:	6f 55       	ld.w	r5,r7[0x54]
80004004:	c0 f8       	rjmp	80004022 <_fflush_r+0x7e>
80004006:	30 19       	mov	r9,1
80004008:	6e 8b       	ld.w	r11,r7[0x20]
8000400a:	0c 9c       	mov	r12,r6
8000400c:	5d 18       	icall	r8
8000400e:	18 95       	mov	r5,r12
80004010:	5b fc       	cp.w	r12,-1
80004012:	c0 81       	brne	80004022 <_fflush_r+0x7e>
80004014:	6c 38       	ld.w	r8,r6[0xc]
80004016:	59 d8       	cp.w	r8,29
80004018:	c4 70       	breq	800040a6 <_fflush_r+0x102>
8000401a:	8e 68       	ld.sh	r8,r7[0xc]
8000401c:	a7 a8       	sbr	r8,0x6
8000401e:	ae 68       	st.h	r7[0xc],r8
80004020:	d8 22       	popm	r4-r7,pc
80004022:	8e 68       	ld.sh	r8,r7[0xc]
80004024:	ed b8 00 02 	bld	r8,0x2
80004028:	c0 91       	brne	8000403a <_fflush_r+0x96>
8000402a:	6e 18       	ld.w	r8,r7[0x4]
8000402c:	10 15       	sub	r5,r8
8000402e:	6e d8       	ld.w	r8,r7[0x34]
80004030:	58 08       	cp.w	r8,0
80004032:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80004036:	eb d8 e1 15 	subne	r5,r5,r8
8000403a:	6e b8       	ld.w	r8,r7[0x2c]
8000403c:	0c 9c       	mov	r12,r6
8000403e:	30 09       	mov	r9,0
80004040:	0a 9a       	mov	r10,r5
80004042:	6e 8b       	ld.w	r11,r7[0x20]
80004044:	5d 18       	icall	r8
80004046:	8e 68       	ld.sh	r8,r7[0xc]
80004048:	0a 3c       	cp.w	r12,r5
8000404a:	c2 61       	brne	80004096 <_fflush_r+0xf2>
8000404c:	ab d8       	cbr	r8,0xb
8000404e:	30 0c       	mov	r12,0
80004050:	6e 49       	ld.w	r9,r7[0x10]
80004052:	ae 68       	st.h	r7[0xc],r8
80004054:	8f 1c       	st.w	r7[0x4],r12
80004056:	8f 09       	st.w	r7[0x0],r9
80004058:	ed b8 00 0c 	bld	r8,0xc
8000405c:	c2 51       	brne	800040a6 <_fflush_r+0x102>
8000405e:	ef 45 00 54 	st.w	r7[84],r5
80004062:	d8 22       	popm	r4-r7,pc
80004064:	6e 45       	ld.w	r5,r7[0x10]
80004066:	58 05       	cp.w	r5,0
80004068:	c1 f0       	breq	800040a6 <_fflush_r+0x102>
8000406a:	6e 04       	ld.w	r4,r7[0x0]
8000406c:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80004070:	8f 05       	st.w	r7[0x0],r5
80004072:	f9 b8 01 00 	movne	r8,0
80004076:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000407a:	0a 14       	sub	r4,r5
8000407c:	8f 28       	st.w	r7[0x8],r8
8000407e:	c1 18       	rjmp	800040a0 <_fflush_r+0xfc>
80004080:	08 99       	mov	r9,r4
80004082:	0a 9a       	mov	r10,r5
80004084:	6e a8       	ld.w	r8,r7[0x28]
80004086:	6e 8b       	ld.w	r11,r7[0x20]
80004088:	0c 9c       	mov	r12,r6
8000408a:	5d 18       	icall	r8
8000408c:	18 14       	sub	r4,r12
8000408e:	58 0c       	cp.w	r12,0
80004090:	e0 89 00 07 	brgt	8000409e <_fflush_r+0xfa>
80004094:	8e 68       	ld.sh	r8,r7[0xc]
80004096:	a7 a8       	sbr	r8,0x6
80004098:	3f fc       	mov	r12,-1
8000409a:	ae 68       	st.h	r7[0xc],r8
8000409c:	d8 22       	popm	r4-r7,pc
8000409e:	18 05       	add	r5,r12
800040a0:	58 04       	cp.w	r4,0
800040a2:	fe 99 ff ef 	brgt	80004080 <_fflush_r+0xdc>
800040a6:	d8 2a       	popm	r4-r7,pc,r12=0
800040a8:	80 00       	ld.sh	r0,r0[0x0]
800040aa:	4e f8       	lddpc	r8,80004264 <_malloc_trim_r+0x6c>
800040ac:	80 00       	ld.sh	r0,r0[0x0]
800040ae:	4f 18       	lddpc	r8,80004270 <_malloc_trim_r+0x78>
800040b0:	80 00       	ld.sh	r0,r0[0x0]
800040b2:	4f 38       	lddpc	r8,8000427c <_malloc_trim_r+0x84>

800040b4 <__sfp_lock_acquire>:
800040b4:	5e fc       	retal	r12

800040b6 <__sfp_lock_release>:
800040b6:	5e fc       	retal	r12

800040b8 <_cleanup_r>:
800040b8:	d4 01       	pushm	lr
800040ba:	fe cb f5 f6 	sub	r11,pc,-2570
800040be:	cb 3d       	rcall	80004424 <_fwalk>
800040c0:	d8 02       	popm	pc
800040c2:	d7 03       	nop

800040c4 <__sfmoreglue>:
800040c4:	d4 21       	pushm	r4-r7,lr
800040c6:	16 95       	mov	r5,r11
800040c8:	f6 06 10 5c 	mul	r6,r11,92
800040cc:	ec cb ff f4 	sub	r11,r6,-12
800040d0:	cd 6d       	rcall	8000447c <_malloc_r>
800040d2:	18 97       	mov	r7,r12
800040d4:	c0 90       	breq	800040e6 <__sfmoreglue+0x22>
800040d6:	99 15       	st.w	r12[0x4],r5
800040d8:	30 0b       	mov	r11,0
800040da:	2f 4c       	sub	r12,-12
800040dc:	0c 9a       	mov	r10,r6
800040de:	8f 2c       	st.w	r7[0x8],r12
800040e0:	8f 0b       	st.w	r7[0x0],r11
800040e2:	e0 a0 03 e1 	rcall	800048a4 <memset>
800040e6:	0e 9c       	mov	r12,r7
800040e8:	d8 22       	popm	r4-r7,pc
800040ea:	d7 03       	nop

800040ec <__sfp>:
800040ec:	d4 21       	pushm	r4-r7,lr
800040ee:	49 b8       	lddpc	r8,80004158 <__sfp+0x6c>
800040f0:	18 96       	mov	r6,r12
800040f2:	70 07       	ld.w	r7,r8[0x0]
800040f4:	6e 68       	ld.w	r8,r7[0x18]
800040f6:	58 08       	cp.w	r8,0
800040f8:	c0 31       	brne	800040fe <__sfp+0x12>
800040fa:	0e 9c       	mov	r12,r7
800040fc:	c3 0c       	rcall	8000415c <__sinit>
800040fe:	ee c7 ff 28 	sub	r7,r7,-216
80004102:	30 05       	mov	r5,0
80004104:	6e 2c       	ld.w	r12,r7[0x8]
80004106:	6e 18       	ld.w	r8,r7[0x4]
80004108:	c0 68       	rjmp	80004114 <__sfp+0x28>
8000410a:	98 69       	ld.sh	r9,r12[0xc]
8000410c:	ea 09 19 00 	cp.h	r9,r5
80004110:	c1 10       	breq	80004132 <__sfp+0x46>
80004112:	2a 4c       	sub	r12,-92
80004114:	20 18       	sub	r8,1
80004116:	cf a7       	brpl	8000410a <__sfp+0x1e>
80004118:	6e 08       	ld.w	r8,r7[0x0]
8000411a:	58 08       	cp.w	r8,0
8000411c:	c0 61       	brne	80004128 <__sfp+0x3c>
8000411e:	30 4b       	mov	r11,4
80004120:	0c 9c       	mov	r12,r6
80004122:	cd 1f       	rcall	800040c4 <__sfmoreglue>
80004124:	8f 0c       	st.w	r7[0x0],r12
80004126:	c0 30       	breq	8000412c <__sfp+0x40>
80004128:	6e 07       	ld.w	r7,r7[0x0]
8000412a:	ce db       	rjmp	80004104 <__sfp+0x18>
8000412c:	30 c8       	mov	r8,12
8000412e:	8d 38       	st.w	r6[0xc],r8
80004130:	d8 22       	popm	r4-r7,pc
80004132:	30 08       	mov	r8,0
80004134:	f9 48 00 4c 	st.w	r12[76],r8
80004138:	99 08       	st.w	r12[0x0],r8
8000413a:	99 28       	st.w	r12[0x8],r8
8000413c:	99 18       	st.w	r12[0x4],r8
8000413e:	99 48       	st.w	r12[0x10],r8
80004140:	99 58       	st.w	r12[0x14],r8
80004142:	99 68       	st.w	r12[0x18],r8
80004144:	99 d8       	st.w	r12[0x34],r8
80004146:	99 e8       	st.w	r12[0x38],r8
80004148:	f9 48 00 48 	st.w	r12[72],r8
8000414c:	3f f8       	mov	r8,-1
8000414e:	b8 78       	st.h	r12[0xe],r8
80004150:	30 18       	mov	r8,1
80004152:	b8 68       	st.h	r12[0xc],r8
80004154:	d8 22       	popm	r4-r7,pc
80004156:	d7 03       	nop
80004158:	80 00       	ld.sh	r0,r0[0x0]
8000415a:	4e f4       	lddpc	r4,80004314 <_free_r+0x80>

8000415c <__sinit>:
8000415c:	d4 21       	pushm	r4-r7,lr
8000415e:	18 96       	mov	r6,r12
80004160:	78 67       	ld.w	r7,r12[0x18]
80004162:	58 07       	cp.w	r7,0
80004164:	c4 91       	brne	800041f6 <__sinit+0x9a>
80004166:	fe c8 00 ae 	sub	r8,pc,174
8000416a:	30 15       	mov	r5,1
8000416c:	99 a8       	st.w	r12[0x28],r8
8000416e:	f9 47 00 d8 	st.w	r12[216],r7
80004172:	f9 47 00 dc 	st.w	r12[220],r7
80004176:	f9 47 00 e0 	st.w	r12[224],r7
8000417a:	99 65       	st.w	r12[0x18],r5
8000417c:	cb 8f       	rcall	800040ec <__sfp>
8000417e:	8d 0c       	st.w	r6[0x0],r12
80004180:	0c 9c       	mov	r12,r6
80004182:	cb 5f       	rcall	800040ec <__sfp>
80004184:	8d 1c       	st.w	r6[0x4],r12
80004186:	0c 9c       	mov	r12,r6
80004188:	cb 2f       	rcall	800040ec <__sfp>
8000418a:	6c 09       	ld.w	r9,r6[0x0]
8000418c:	30 48       	mov	r8,4
8000418e:	93 07       	st.w	r9[0x0],r7
80004190:	b2 68       	st.h	r9[0xc],r8
80004192:	93 17       	st.w	r9[0x4],r7
80004194:	93 27       	st.w	r9[0x8],r7
80004196:	6c 18       	ld.w	r8,r6[0x4]
80004198:	b2 77       	st.h	r9[0xe],r7
8000419a:	93 47       	st.w	r9[0x10],r7
8000419c:	93 57       	st.w	r9[0x14],r7
8000419e:	93 67       	st.w	r9[0x18],r7
800041a0:	93 89       	st.w	r9[0x20],r9
800041a2:	91 07       	st.w	r8[0x0],r7
800041a4:	91 17       	st.w	r8[0x4],r7
800041a6:	91 27       	st.w	r8[0x8],r7
800041a8:	fe ce f8 7c 	sub	lr,pc,-1924
800041ac:	fe cb f8 ac 	sub	r11,pc,-1876
800041b0:	93 9e       	st.w	r9[0x24],lr
800041b2:	93 ab       	st.w	r9[0x28],r11
800041b4:	fe ca f8 d4 	sub	r10,pc,-1836
800041b8:	fe c4 f8 e0 	sub	r4,pc,-1824
800041bc:	93 ba       	st.w	r9[0x2c],r10
800041be:	93 c4       	st.w	r9[0x30],r4
800041c0:	30 99       	mov	r9,9
800041c2:	b0 69       	st.h	r8[0xc],r9
800041c4:	b0 75       	st.h	r8[0xe],r5
800041c6:	91 c4       	st.w	r8[0x30],r4
800041c8:	91 47       	st.w	r8[0x10],r7
800041ca:	91 57       	st.w	r8[0x14],r7
800041cc:	91 67       	st.w	r8[0x18],r7
800041ce:	91 88       	st.w	r8[0x20],r8
800041d0:	91 9e       	st.w	r8[0x24],lr
800041d2:	91 ab       	st.w	r8[0x28],r11
800041d4:	91 ba       	st.w	r8[0x2c],r10
800041d6:	8d 2c       	st.w	r6[0x8],r12
800041d8:	31 28       	mov	r8,18
800041da:	99 07       	st.w	r12[0x0],r7
800041dc:	b8 68       	st.h	r12[0xc],r8
800041de:	99 17       	st.w	r12[0x4],r7
800041e0:	99 27       	st.w	r12[0x8],r7
800041e2:	30 28       	mov	r8,2
800041e4:	b8 78       	st.h	r12[0xe],r8
800041e6:	99 c4       	st.w	r12[0x30],r4
800041e8:	99 67       	st.w	r12[0x18],r7
800041ea:	99 9e       	st.w	r12[0x24],lr
800041ec:	99 ab       	st.w	r12[0x28],r11
800041ee:	99 ba       	st.w	r12[0x2c],r10
800041f0:	99 47       	st.w	r12[0x10],r7
800041f2:	99 57       	st.w	r12[0x14],r7
800041f4:	99 8c       	st.w	r12[0x20],r12
800041f6:	d8 22       	popm	r4-r7,pc

800041f8 <_malloc_trim_r>:
800041f8:	d4 21       	pushm	r4-r7,lr
800041fa:	16 95       	mov	r5,r11
800041fc:	18 97       	mov	r7,r12
800041fe:	e0 a0 03 5a 	rcall	800048b2 <__malloc_lock>
80004202:	4a 24       	lddpc	r4,80004288 <_malloc_trim_r+0x90>
80004204:	68 28       	ld.w	r8,r4[0x8]
80004206:	70 16       	ld.w	r6,r8[0x4]
80004208:	e0 16 ff fc 	andl	r6,0xfffc
8000420c:	ec c8 ff 91 	sub	r8,r6,-111
80004210:	f0 05 01 05 	sub	r5,r8,r5
80004214:	e0 15 ff 80 	andl	r5,0xff80
80004218:	ea c5 00 80 	sub	r5,r5,128
8000421c:	e0 45 00 7f 	cp.w	r5,127
80004220:	e0 8a 00 23 	brle	80004266 <_malloc_trim_r+0x6e>
80004224:	30 0b       	mov	r11,0
80004226:	0e 9c       	mov	r12,r7
80004228:	e0 a0 03 48 	rcall	800048b8 <_sbrk_r>
8000422c:	68 28       	ld.w	r8,r4[0x8]
8000422e:	0c 08       	add	r8,r6
80004230:	10 3c       	cp.w	r12,r8
80004232:	c1 a1       	brne	80004266 <_malloc_trim_r+0x6e>
80004234:	ea 0b 11 00 	rsub	r11,r5,0
80004238:	0e 9c       	mov	r12,r7
8000423a:	e0 a0 03 3f 	rcall	800048b8 <_sbrk_r>
8000423e:	5b fc       	cp.w	r12,-1
80004240:	c1 71       	brne	8000426e <_malloc_trim_r+0x76>
80004242:	30 0b       	mov	r11,0
80004244:	0e 9c       	mov	r12,r7
80004246:	e0 a0 03 39 	rcall	800048b8 <_sbrk_r>
8000424a:	68 28       	ld.w	r8,r4[0x8]
8000424c:	f8 08 01 09 	sub	r9,r12,r8
80004250:	58 f9       	cp.w	r9,15
80004252:	e0 8a 00 0a 	brle	80004266 <_malloc_trim_r+0x6e>
80004256:	a1 a9       	sbr	r9,0x0
80004258:	91 19       	st.w	r8[0x4],r9
8000425a:	48 d8       	lddpc	r8,8000428c <_malloc_trim_r+0x94>
8000425c:	70 09       	ld.w	r9,r8[0x0]
8000425e:	48 d8       	lddpc	r8,80004290 <_malloc_trim_r+0x98>
80004260:	f8 09 01 09 	sub	r9,r12,r9
80004264:	91 09       	st.w	r8[0x0],r9
80004266:	0e 9c       	mov	r12,r7
80004268:	e0 a0 03 26 	rcall	800048b4 <__malloc_unlock>
8000426c:	d8 2a       	popm	r4-r7,pc,r12=0
8000426e:	68 28       	ld.w	r8,r4[0x8]
80004270:	0a 16       	sub	r6,r5
80004272:	a1 a6       	sbr	r6,0x0
80004274:	91 16       	st.w	r8[0x4],r6
80004276:	48 78       	lddpc	r8,80004290 <_malloc_trim_r+0x98>
80004278:	70 09       	ld.w	r9,r8[0x0]
8000427a:	0a 19       	sub	r9,r5
8000427c:	0e 9c       	mov	r12,r7
8000427e:	91 09       	st.w	r8[0x0],r9
80004280:	e0 a0 03 1a 	rcall	800048b4 <__malloc_unlock>
80004284:	da 2a       	popm	r4-r7,pc,r12=1
80004286:	d7 03       	nop
80004288:	00 00       	add	r0,r0
8000428a:	01 c8       	ld.ub	r8,r0[0x4]
8000428c:	00 00       	add	r0,r0
8000428e:	05 d4       	ld.ub	r4,r2[0x5]
80004290:	00 00       	add	r0,r0
80004292:	0c 6c       	and	r12,r6

80004294 <_free_r>:
80004294:	d4 21       	pushm	r4-r7,lr
80004296:	16 96       	mov	r6,r11
80004298:	18 97       	mov	r7,r12
8000429a:	58 0b       	cp.w	r11,0
8000429c:	e0 80 00 c2 	breq	80004420 <_free_r+0x18c>
800042a0:	e0 a0 03 09 	rcall	800048b2 <__malloc_lock>
800042a4:	20 86       	sub	r6,8
800042a6:	4c ba       	lddpc	r10,800043d0 <_free_r+0x13c>
800042a8:	6c 18       	ld.w	r8,r6[0x4]
800042aa:	74 2e       	ld.w	lr,r10[0x8]
800042ac:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800042b0:	a1 c8       	cbr	r8,0x0
800042b2:	ec 08 00 09 	add	r9,r6,r8
800042b6:	72 1b       	ld.w	r11,r9[0x4]
800042b8:	e0 1b ff fc 	andl	r11,0xfffc
800042bc:	1c 39       	cp.w	r9,lr
800042be:	c1 c1       	brne	800042f6 <_free_r+0x62>
800042c0:	f6 08 00 08 	add	r8,r11,r8
800042c4:	58 0c       	cp.w	r12,0
800042c6:	c0 81       	brne	800042d6 <_free_r+0x42>
800042c8:	6c 09       	ld.w	r9,r6[0x0]
800042ca:	12 16       	sub	r6,r9
800042cc:	12 08       	add	r8,r9
800042ce:	6c 3b       	ld.w	r11,r6[0xc]
800042d0:	6c 29       	ld.w	r9,r6[0x8]
800042d2:	97 29       	st.w	r11[0x8],r9
800042d4:	93 3b       	st.w	r9[0xc],r11
800042d6:	10 99       	mov	r9,r8
800042d8:	95 26       	st.w	r10[0x8],r6
800042da:	a1 a9       	sbr	r9,0x0
800042dc:	8d 19       	st.w	r6[0x4],r9
800042de:	4b e9       	lddpc	r9,800043d4 <_free_r+0x140>
800042e0:	72 09       	ld.w	r9,r9[0x0]
800042e2:	12 38       	cp.w	r8,r9
800042e4:	c0 53       	brcs	800042ee <_free_r+0x5a>
800042e6:	4b d8       	lddpc	r8,800043d8 <_free_r+0x144>
800042e8:	0e 9c       	mov	r12,r7
800042ea:	70 0b       	ld.w	r11,r8[0x0]
800042ec:	c8 6f       	rcall	800041f8 <_malloc_trim_r>
800042ee:	0e 9c       	mov	r12,r7
800042f0:	e0 a0 02 e2 	rcall	800048b4 <__malloc_unlock>
800042f4:	d8 22       	popm	r4-r7,pc
800042f6:	93 1b       	st.w	r9[0x4],r11
800042f8:	58 0c       	cp.w	r12,0
800042fa:	c0 30       	breq	80004300 <_free_r+0x6c>
800042fc:	30 0c       	mov	r12,0
800042fe:	c1 08       	rjmp	8000431e <_free_r+0x8a>
80004300:	6c 0e       	ld.w	lr,r6[0x0]
80004302:	f4 c5 ff f8 	sub	r5,r10,-8
80004306:	1c 16       	sub	r6,lr
80004308:	1c 08       	add	r8,lr
8000430a:	6c 2e       	ld.w	lr,r6[0x8]
8000430c:	0a 3e       	cp.w	lr,r5
8000430e:	f9 bc 00 01 	moveq	r12,1
80004312:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80004316:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000431a:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000431e:	f2 0b 00 0e 	add	lr,r9,r11
80004322:	7c 1e       	ld.w	lr,lr[0x4]
80004324:	ed be 00 00 	bld	lr,0x0
80004328:	c1 30       	breq	8000434e <_free_r+0xba>
8000432a:	16 08       	add	r8,r11
8000432c:	58 0c       	cp.w	r12,0
8000432e:	c0 c1       	brne	80004346 <_free_r+0xb2>
80004330:	4a 8e       	lddpc	lr,800043d0 <_free_r+0x13c>
80004332:	72 2b       	ld.w	r11,r9[0x8]
80004334:	2f 8e       	sub	lr,-8
80004336:	1c 3b       	cp.w	r11,lr
80004338:	c0 71       	brne	80004346 <_free_r+0xb2>
8000433a:	97 36       	st.w	r11[0xc],r6
8000433c:	97 26       	st.w	r11[0x8],r6
8000433e:	8d 2b       	st.w	r6[0x8],r11
80004340:	8d 3b       	st.w	r6[0xc],r11
80004342:	30 1c       	mov	r12,1
80004344:	c0 58       	rjmp	8000434e <_free_r+0xba>
80004346:	72 2b       	ld.w	r11,r9[0x8]
80004348:	72 39       	ld.w	r9,r9[0xc]
8000434a:	93 2b       	st.w	r9[0x8],r11
8000434c:	97 39       	st.w	r11[0xc],r9
8000434e:	10 99       	mov	r9,r8
80004350:	ec 08 09 08 	st.w	r6[r8],r8
80004354:	a1 a9       	sbr	r9,0x0
80004356:	8d 19       	st.w	r6[0x4],r9
80004358:	58 0c       	cp.w	r12,0
8000435a:	c6 01       	brne	8000441a <_free_r+0x186>
8000435c:	e0 48 01 ff 	cp.w	r8,511
80004360:	e0 8b 00 13 	brhi	80004386 <_free_r+0xf2>
80004364:	a3 98       	lsr	r8,0x3
80004366:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000436a:	72 2b       	ld.w	r11,r9[0x8]
8000436c:	8d 39       	st.w	r6[0xc],r9
8000436e:	8d 2b       	st.w	r6[0x8],r11
80004370:	97 36       	st.w	r11[0xc],r6
80004372:	93 26       	st.w	r9[0x8],r6
80004374:	a3 48       	asr	r8,0x2
80004376:	74 19       	ld.w	r9,r10[0x4]
80004378:	30 1b       	mov	r11,1
8000437a:	f6 08 09 48 	lsl	r8,r11,r8
8000437e:	f3 e8 10 08 	or	r8,r9,r8
80004382:	95 18       	st.w	r10[0x4],r8
80004384:	c4 b8       	rjmp	8000441a <_free_r+0x186>
80004386:	f0 0b 16 09 	lsr	r11,r8,0x9
8000438a:	58 4b       	cp.w	r11,4
8000438c:	e0 8b 00 06 	brhi	80004398 <_free_r+0x104>
80004390:	f0 0b 16 06 	lsr	r11,r8,0x6
80004394:	2c 8b       	sub	r11,-56
80004396:	c2 68       	rjmp	800043e2 <_free_r+0x14e>
80004398:	59 4b       	cp.w	r11,20
8000439a:	e0 8b 00 04 	brhi	800043a2 <_free_r+0x10e>
8000439e:	2a 5b       	sub	r11,-91
800043a0:	c2 18       	rjmp	800043e2 <_free_r+0x14e>
800043a2:	e0 4b 00 54 	cp.w	r11,84
800043a6:	e0 8b 00 06 	brhi	800043b2 <_free_r+0x11e>
800043aa:	f0 0b 16 0c 	lsr	r11,r8,0xc
800043ae:	29 2b       	sub	r11,-110
800043b0:	c1 98       	rjmp	800043e2 <_free_r+0x14e>
800043b2:	e0 4b 01 54 	cp.w	r11,340
800043b6:	e0 8b 00 06 	brhi	800043c2 <_free_r+0x12e>
800043ba:	f0 0b 16 0f 	lsr	r11,r8,0xf
800043be:	28 9b       	sub	r11,-119
800043c0:	c1 18       	rjmp	800043e2 <_free_r+0x14e>
800043c2:	e0 4b 05 54 	cp.w	r11,1364
800043c6:	e0 88 00 0b 	brls	800043dc <_free_r+0x148>
800043ca:	37 eb       	mov	r11,126
800043cc:	c0 b8       	rjmp	800043e2 <_free_r+0x14e>
800043ce:	d7 03       	nop
800043d0:	00 00       	add	r0,r0
800043d2:	01 c8       	ld.ub	r8,r0[0x4]
800043d4:	00 00       	add	r0,r0
800043d6:	05 d0       	ld.ub	r0,r2[0x5]
800043d8:	00 00       	add	r0,r0
800043da:	0c 68       	and	r8,r6
800043dc:	f0 0b 16 12 	lsr	r11,r8,0x12
800043e0:	28 4b       	sub	r11,-124
800043e2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800043e6:	78 29       	ld.w	r9,r12[0x8]
800043e8:	18 39       	cp.w	r9,r12
800043ea:	c0 e1       	brne	80004406 <_free_r+0x172>
800043ec:	74 18       	ld.w	r8,r10[0x4]
800043ee:	a3 4b       	asr	r11,0x2
800043f0:	30 1c       	mov	r12,1
800043f2:	f8 0b 09 4b 	lsl	r11,r12,r11
800043f6:	f1 eb 10 0b 	or	r11,r8,r11
800043fa:	12 98       	mov	r8,r9
800043fc:	95 1b       	st.w	r10[0x4],r11
800043fe:	c0 a8       	rjmp	80004412 <_free_r+0x17e>
80004400:	72 29       	ld.w	r9,r9[0x8]
80004402:	18 39       	cp.w	r9,r12
80004404:	c0 60       	breq	80004410 <_free_r+0x17c>
80004406:	72 1a       	ld.w	r10,r9[0x4]
80004408:	e0 1a ff fc 	andl	r10,0xfffc
8000440c:	14 38       	cp.w	r8,r10
8000440e:	cf 93       	brcs	80004400 <_free_r+0x16c>
80004410:	72 38       	ld.w	r8,r9[0xc]
80004412:	8d 38       	st.w	r6[0xc],r8
80004414:	8d 29       	st.w	r6[0x8],r9
80004416:	93 36       	st.w	r9[0xc],r6
80004418:	91 26       	st.w	r8[0x8],r6
8000441a:	0e 9c       	mov	r12,r7
8000441c:	e0 a0 02 4c 	rcall	800048b4 <__malloc_unlock>
80004420:	d8 22       	popm	r4-r7,pc
80004422:	d7 03       	nop

80004424 <_fwalk>:
80004424:	d4 31       	pushm	r0-r7,lr
80004426:	30 05       	mov	r5,0
80004428:	16 91       	mov	r1,r11
8000442a:	f8 c7 ff 28 	sub	r7,r12,-216
8000442e:	0a 92       	mov	r2,r5
80004430:	c4 2e       	rcall	800040b4 <__sfp_lock_acquire>
80004432:	3f f3       	mov	r3,-1
80004434:	c1 68       	rjmp	80004460 <_fwalk+0x3c>
80004436:	6e 26       	ld.w	r6,r7[0x8]
80004438:	6e 14       	ld.w	r4,r7[0x4]
8000443a:	2f 46       	sub	r6,-12
8000443c:	c0 c8       	rjmp	80004454 <_fwalk+0x30>
8000443e:	8c 08       	ld.sh	r8,r6[0x0]
80004440:	e4 08 19 00 	cp.h	r8,r2
80004444:	c0 70       	breq	80004452 <_fwalk+0x2e>
80004446:	8c 18       	ld.sh	r8,r6[0x2]
80004448:	e6 08 19 00 	cp.h	r8,r3
8000444c:	c0 30       	breq	80004452 <_fwalk+0x2e>
8000444e:	5d 11       	icall	r1
80004450:	18 45       	or	r5,r12
80004452:	2a 46       	sub	r6,-92
80004454:	20 14       	sub	r4,1
80004456:	ec cc 00 0c 	sub	r12,r6,12
8000445a:	58 04       	cp.w	r4,0
8000445c:	cf 14       	brge	8000443e <_fwalk+0x1a>
8000445e:	6e 07       	ld.w	r7,r7[0x0]
80004460:	58 07       	cp.w	r7,0
80004462:	ce a1       	brne	80004436 <_fwalk+0x12>
80004464:	c2 9e       	rcall	800040b6 <__sfp_lock_release>
80004466:	0a 9c       	mov	r12,r5
80004468:	d8 32       	popm	r0-r7,pc
8000446a:	d7 03       	nop

8000446c <malloc>:
8000446c:	d4 01       	pushm	lr
8000446e:	48 38       	lddpc	r8,80004478 <malloc+0xc>
80004470:	18 9b       	mov	r11,r12
80004472:	70 0c       	ld.w	r12,r8[0x0]
80004474:	c0 4c       	rcall	8000447c <_malloc_r>
80004476:	d8 02       	popm	pc
80004478:	00 00       	add	r0,r0
8000447a:	01 c4       	ld.ub	r4,r0[0x4]

8000447c <_malloc_r>:
8000447c:	d4 31       	pushm	r0-r7,lr
8000447e:	f6 c8 ff f5 	sub	r8,r11,-11
80004482:	18 95       	mov	r5,r12
80004484:	10 97       	mov	r7,r8
80004486:	e0 17 ff f8 	andl	r7,0xfff8
8000448a:	59 68       	cp.w	r8,22
8000448c:	f9 b7 08 10 	movls	r7,16
80004490:	16 37       	cp.w	r7,r11
80004492:	5f 38       	srlo	r8
80004494:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004498:	c0 50       	breq	800044a2 <_malloc_r+0x26>
8000449a:	30 c8       	mov	r8,12
8000449c:	99 38       	st.w	r12[0xc],r8
8000449e:	e0 8f 01 ea 	bral	80004872 <_malloc_r+0x3f6>
800044a2:	e0 a0 02 08 	rcall	800048b2 <__malloc_lock>
800044a6:	e0 47 01 f7 	cp.w	r7,503
800044aa:	e0 8b 00 1c 	brhi	800044e2 <_malloc_r+0x66>
800044ae:	ee 03 16 03 	lsr	r3,r7,0x3
800044b2:	4c c8       	lddpc	r8,800045e0 <_malloc_r+0x164>
800044b4:	f0 03 00 38 	add	r8,r8,r3<<0x3
800044b8:	70 36       	ld.w	r6,r8[0xc]
800044ba:	10 36       	cp.w	r6,r8
800044bc:	c0 61       	brne	800044c8 <_malloc_r+0x4c>
800044be:	ec c8 ff f8 	sub	r8,r6,-8
800044c2:	70 36       	ld.w	r6,r8[0xc]
800044c4:	10 36       	cp.w	r6,r8
800044c6:	c0 c0       	breq	800044de <_malloc_r+0x62>
800044c8:	6c 18       	ld.w	r8,r6[0x4]
800044ca:	e0 18 ff fc 	andl	r8,0xfffc
800044ce:	6c 3a       	ld.w	r10,r6[0xc]
800044d0:	ec 08 00 09 	add	r9,r6,r8
800044d4:	0a 9c       	mov	r12,r5
800044d6:	6c 28       	ld.w	r8,r6[0x8]
800044d8:	95 28       	st.w	r10[0x8],r8
800044da:	91 3a       	st.w	r8[0xc],r10
800044dc:	c4 68       	rjmp	80004568 <_malloc_r+0xec>
800044de:	2f e3       	sub	r3,-2
800044e0:	c4 c8       	rjmp	80004578 <_malloc_r+0xfc>
800044e2:	ee 03 16 09 	lsr	r3,r7,0x9
800044e6:	c0 41       	brne	800044ee <_malloc_r+0x72>
800044e8:	ee 03 16 03 	lsr	r3,r7,0x3
800044ec:	c2 68       	rjmp	80004538 <_malloc_r+0xbc>
800044ee:	58 43       	cp.w	r3,4
800044f0:	e0 8b 00 06 	brhi	800044fc <_malloc_r+0x80>
800044f4:	ee 03 16 06 	lsr	r3,r7,0x6
800044f8:	2c 83       	sub	r3,-56
800044fa:	c1 f8       	rjmp	80004538 <_malloc_r+0xbc>
800044fc:	59 43       	cp.w	r3,20
800044fe:	e0 8b 00 04 	brhi	80004506 <_malloc_r+0x8a>
80004502:	2a 53       	sub	r3,-91
80004504:	c1 a8       	rjmp	80004538 <_malloc_r+0xbc>
80004506:	e0 43 00 54 	cp.w	r3,84
8000450a:	e0 8b 00 06 	brhi	80004516 <_malloc_r+0x9a>
8000450e:	ee 03 16 0c 	lsr	r3,r7,0xc
80004512:	29 23       	sub	r3,-110
80004514:	c1 28       	rjmp	80004538 <_malloc_r+0xbc>
80004516:	e0 43 01 54 	cp.w	r3,340
8000451a:	e0 8b 00 06 	brhi	80004526 <_malloc_r+0xaa>
8000451e:	ee 03 16 0f 	lsr	r3,r7,0xf
80004522:	28 93       	sub	r3,-119
80004524:	c0 a8       	rjmp	80004538 <_malloc_r+0xbc>
80004526:	e0 43 05 54 	cp.w	r3,1364
8000452a:	e0 88 00 04 	brls	80004532 <_malloc_r+0xb6>
8000452e:	37 e3       	mov	r3,126
80004530:	c0 48       	rjmp	80004538 <_malloc_r+0xbc>
80004532:	ee 03 16 12 	lsr	r3,r7,0x12
80004536:	28 43       	sub	r3,-124
80004538:	4a aa       	lddpc	r10,800045e0 <_malloc_r+0x164>
8000453a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000453e:	74 36       	ld.w	r6,r10[0xc]
80004540:	c1 98       	rjmp	80004572 <_malloc_r+0xf6>
80004542:	6c 19       	ld.w	r9,r6[0x4]
80004544:	e0 19 ff fc 	andl	r9,0xfffc
80004548:	f2 07 01 0b 	sub	r11,r9,r7
8000454c:	58 fb       	cp.w	r11,15
8000454e:	e0 8a 00 04 	brle	80004556 <_malloc_r+0xda>
80004552:	20 13       	sub	r3,1
80004554:	c1 18       	rjmp	80004576 <_malloc_r+0xfa>
80004556:	6c 38       	ld.w	r8,r6[0xc]
80004558:	58 0b       	cp.w	r11,0
8000455a:	c0 b5       	brlt	80004570 <_malloc_r+0xf4>
8000455c:	6c 2a       	ld.w	r10,r6[0x8]
8000455e:	ec 09 00 09 	add	r9,r6,r9
80004562:	0a 9c       	mov	r12,r5
80004564:	91 2a       	st.w	r8[0x8],r10
80004566:	95 38       	st.w	r10[0xc],r8
80004568:	72 18       	ld.w	r8,r9[0x4]
8000456a:	a1 a8       	sbr	r8,0x0
8000456c:	93 18       	st.w	r9[0x4],r8
8000456e:	cb a8       	rjmp	800046e2 <_malloc_r+0x266>
80004570:	10 96       	mov	r6,r8
80004572:	14 36       	cp.w	r6,r10
80004574:	ce 71       	brne	80004542 <_malloc_r+0xc6>
80004576:	2f f3       	sub	r3,-1
80004578:	49 aa       	lddpc	r10,800045e0 <_malloc_r+0x164>
8000457a:	f4 cc ff f8 	sub	r12,r10,-8
8000457e:	78 26       	ld.w	r6,r12[0x8]
80004580:	18 36       	cp.w	r6,r12
80004582:	c6 c0       	breq	8000465a <_malloc_r+0x1de>
80004584:	6c 19       	ld.w	r9,r6[0x4]
80004586:	e0 19 ff fc 	andl	r9,0xfffc
8000458a:	f2 07 01 08 	sub	r8,r9,r7
8000458e:	58 f8       	cp.w	r8,15
80004590:	e0 89 00 8e 	brgt	800046ac <_malloc_r+0x230>
80004594:	99 3c       	st.w	r12[0xc],r12
80004596:	99 2c       	st.w	r12[0x8],r12
80004598:	58 08       	cp.w	r8,0
8000459a:	c0 55       	brlt	800045a4 <_malloc_r+0x128>
8000459c:	ec 09 00 09 	add	r9,r6,r9
800045a0:	0a 9c       	mov	r12,r5
800045a2:	ce 3b       	rjmp	80004568 <_malloc_r+0xec>
800045a4:	e0 49 01 ff 	cp.w	r9,511
800045a8:	e0 8b 00 13 	brhi	800045ce <_malloc_r+0x152>
800045ac:	a3 99       	lsr	r9,0x3
800045ae:	f4 09 00 38 	add	r8,r10,r9<<0x3
800045b2:	70 2b       	ld.w	r11,r8[0x8]
800045b4:	8d 38       	st.w	r6[0xc],r8
800045b6:	8d 2b       	st.w	r6[0x8],r11
800045b8:	97 36       	st.w	r11[0xc],r6
800045ba:	91 26       	st.w	r8[0x8],r6
800045bc:	a3 49       	asr	r9,0x2
800045be:	74 18       	ld.w	r8,r10[0x4]
800045c0:	30 1b       	mov	r11,1
800045c2:	f6 09 09 49 	lsl	r9,r11,r9
800045c6:	f1 e9 10 09 	or	r9,r8,r9
800045ca:	95 19       	st.w	r10[0x4],r9
800045cc:	c4 78       	rjmp	8000465a <_malloc_r+0x1de>
800045ce:	f2 0a 16 09 	lsr	r10,r9,0x9
800045d2:	58 4a       	cp.w	r10,4
800045d4:	e0 8b 00 08 	brhi	800045e4 <_malloc_r+0x168>
800045d8:	f2 0a 16 06 	lsr	r10,r9,0x6
800045dc:	2c 8a       	sub	r10,-56
800045de:	c2 18       	rjmp	80004620 <_malloc_r+0x1a4>
800045e0:	00 00       	add	r0,r0
800045e2:	01 c8       	ld.ub	r8,r0[0x4]
800045e4:	59 4a       	cp.w	r10,20
800045e6:	e0 8b 00 04 	brhi	800045ee <_malloc_r+0x172>
800045ea:	2a 5a       	sub	r10,-91
800045ec:	c1 a8       	rjmp	80004620 <_malloc_r+0x1a4>
800045ee:	e0 4a 00 54 	cp.w	r10,84
800045f2:	e0 8b 00 06 	brhi	800045fe <_malloc_r+0x182>
800045f6:	f2 0a 16 0c 	lsr	r10,r9,0xc
800045fa:	29 2a       	sub	r10,-110
800045fc:	c1 28       	rjmp	80004620 <_malloc_r+0x1a4>
800045fe:	e0 4a 01 54 	cp.w	r10,340
80004602:	e0 8b 00 06 	brhi	8000460e <_malloc_r+0x192>
80004606:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000460a:	28 9a       	sub	r10,-119
8000460c:	c0 a8       	rjmp	80004620 <_malloc_r+0x1a4>
8000460e:	e0 4a 05 54 	cp.w	r10,1364
80004612:	e0 88 00 04 	brls	8000461a <_malloc_r+0x19e>
80004616:	37 ea       	mov	r10,126
80004618:	c0 48       	rjmp	80004620 <_malloc_r+0x1a4>
8000461a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000461e:	28 4a       	sub	r10,-124
80004620:	4c 7b       	lddpc	r11,8000473c <_malloc_r+0x2c0>
80004622:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004626:	68 28       	ld.w	r8,r4[0x8]
80004628:	08 38       	cp.w	r8,r4
8000462a:	c0 e1       	brne	80004646 <_malloc_r+0x1ca>
8000462c:	76 19       	ld.w	r9,r11[0x4]
8000462e:	a3 4a       	asr	r10,0x2
80004630:	30 1e       	mov	lr,1
80004632:	fc 0a 09 4a 	lsl	r10,lr,r10
80004636:	f3 ea 10 0a 	or	r10,r9,r10
8000463a:	10 99       	mov	r9,r8
8000463c:	97 1a       	st.w	r11[0x4],r10
8000463e:	c0 a8       	rjmp	80004652 <_malloc_r+0x1d6>
80004640:	70 28       	ld.w	r8,r8[0x8]
80004642:	08 38       	cp.w	r8,r4
80004644:	c0 60       	breq	80004650 <_malloc_r+0x1d4>
80004646:	70 1a       	ld.w	r10,r8[0x4]
80004648:	e0 1a ff fc 	andl	r10,0xfffc
8000464c:	14 39       	cp.w	r9,r10
8000464e:	cf 93       	brcs	80004640 <_malloc_r+0x1c4>
80004650:	70 39       	ld.w	r9,r8[0xc]
80004652:	8d 39       	st.w	r6[0xc],r9
80004654:	8d 28       	st.w	r6[0x8],r8
80004656:	91 36       	st.w	r8[0xc],r6
80004658:	93 26       	st.w	r9[0x8],r6
8000465a:	e6 08 14 02 	asr	r8,r3,0x2
8000465e:	30 1b       	mov	r11,1
80004660:	4b 74       	lddpc	r4,8000473c <_malloc_r+0x2c0>
80004662:	f6 08 09 4b 	lsl	r11,r11,r8
80004666:	68 18       	ld.w	r8,r4[0x4]
80004668:	10 3b       	cp.w	r11,r8
8000466a:	e0 8b 00 6b 	brhi	80004740 <_malloc_r+0x2c4>
8000466e:	f7 e8 00 09 	and	r9,r11,r8
80004672:	c0 b1       	brne	80004688 <_malloc_r+0x20c>
80004674:	e0 13 ff fc 	andl	r3,0xfffc
80004678:	a1 7b       	lsl	r11,0x1
8000467a:	2f c3       	sub	r3,-4
8000467c:	c0 38       	rjmp	80004682 <_malloc_r+0x206>
8000467e:	2f c3       	sub	r3,-4
80004680:	a1 7b       	lsl	r11,0x1
80004682:	f7 e8 00 09 	and	r9,r11,r8
80004686:	cf c0       	breq	8000467e <_malloc_r+0x202>
80004688:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000468c:	06 92       	mov	r2,r3
8000468e:	1c 91       	mov	r1,lr
80004690:	62 36       	ld.w	r6,r1[0xc]
80004692:	c2 d8       	rjmp	800046ec <_malloc_r+0x270>
80004694:	6c 1a       	ld.w	r10,r6[0x4]
80004696:	e0 1a ff fc 	andl	r10,0xfffc
8000469a:	f4 07 01 08 	sub	r8,r10,r7
8000469e:	58 f8       	cp.w	r8,15
800046a0:	e0 8a 00 15 	brle	800046ca <_malloc_r+0x24e>
800046a4:	6c 3a       	ld.w	r10,r6[0xc]
800046a6:	6c 29       	ld.w	r9,r6[0x8]
800046a8:	95 29       	st.w	r10[0x8],r9
800046aa:	93 3a       	st.w	r9[0xc],r10
800046ac:	0e 99       	mov	r9,r7
800046ae:	ec 07 00 07 	add	r7,r6,r7
800046b2:	a1 a9       	sbr	r9,0x0
800046b4:	99 37       	st.w	r12[0xc],r7
800046b6:	99 27       	st.w	r12[0x8],r7
800046b8:	8d 19       	st.w	r6[0x4],r9
800046ba:	ee 08 09 08 	st.w	r7[r8],r8
800046be:	8f 2c       	st.w	r7[0x8],r12
800046c0:	8f 3c       	st.w	r7[0xc],r12
800046c2:	a1 a8       	sbr	r8,0x0
800046c4:	0a 9c       	mov	r12,r5
800046c6:	8f 18       	st.w	r7[0x4],r8
800046c8:	c0 d8       	rjmp	800046e2 <_malloc_r+0x266>
800046ca:	6c 39       	ld.w	r9,r6[0xc]
800046cc:	58 08       	cp.w	r8,0
800046ce:	c0 e5       	brlt	800046ea <_malloc_r+0x26e>
800046d0:	ec 0a 00 0a 	add	r10,r6,r10
800046d4:	74 18       	ld.w	r8,r10[0x4]
800046d6:	a1 a8       	sbr	r8,0x0
800046d8:	0a 9c       	mov	r12,r5
800046da:	95 18       	st.w	r10[0x4],r8
800046dc:	6c 28       	ld.w	r8,r6[0x8]
800046de:	93 28       	st.w	r9[0x8],r8
800046e0:	91 39       	st.w	r8[0xc],r9
800046e2:	ce 9c       	rcall	800048b4 <__malloc_unlock>
800046e4:	ec cc ff f8 	sub	r12,r6,-8
800046e8:	d8 32       	popm	r0-r7,pc
800046ea:	12 96       	mov	r6,r9
800046ec:	02 36       	cp.w	r6,r1
800046ee:	cd 31       	brne	80004694 <_malloc_r+0x218>
800046f0:	2f f2       	sub	r2,-1
800046f2:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800046f6:	c0 30       	breq	800046fc <_malloc_r+0x280>
800046f8:	2f 81       	sub	r1,-8
800046fa:	cc bb       	rjmp	80004690 <_malloc_r+0x214>
800046fc:	1c 98       	mov	r8,lr
800046fe:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004702:	c0 81       	brne	80004712 <_malloc_r+0x296>
80004704:	68 19       	ld.w	r9,r4[0x4]
80004706:	f6 08 11 ff 	rsub	r8,r11,-1
8000470a:	f3 e8 00 08 	and	r8,r9,r8
8000470e:	89 18       	st.w	r4[0x4],r8
80004710:	c0 78       	rjmp	8000471e <_malloc_r+0x2a2>
80004712:	f0 c9 00 08 	sub	r9,r8,8
80004716:	20 13       	sub	r3,1
80004718:	70 08       	ld.w	r8,r8[0x0]
8000471a:	12 38       	cp.w	r8,r9
8000471c:	cf 10       	breq	800046fe <_malloc_r+0x282>
8000471e:	a1 7b       	lsl	r11,0x1
80004720:	68 18       	ld.w	r8,r4[0x4]
80004722:	10 3b       	cp.w	r11,r8
80004724:	e0 8b 00 0e 	brhi	80004740 <_malloc_r+0x2c4>
80004728:	58 0b       	cp.w	r11,0
8000472a:	c0 b0       	breq	80004740 <_malloc_r+0x2c4>
8000472c:	04 93       	mov	r3,r2
8000472e:	c0 38       	rjmp	80004734 <_malloc_r+0x2b8>
80004730:	2f c3       	sub	r3,-4
80004732:	a1 7b       	lsl	r11,0x1
80004734:	f7 e8 00 09 	and	r9,r11,r8
80004738:	ca 81       	brne	80004688 <_malloc_r+0x20c>
8000473a:	cf bb       	rjmp	80004730 <_malloc_r+0x2b4>
8000473c:	00 00       	add	r0,r0
8000473e:	01 c8       	ld.ub	r8,r0[0x4]
80004740:	68 23       	ld.w	r3,r4[0x8]
80004742:	66 12       	ld.w	r2,r3[0x4]
80004744:	e0 12 ff fc 	andl	r2,0xfffc
80004748:	0e 32       	cp.w	r2,r7
8000474a:	5f 39       	srlo	r9
8000474c:	e4 07 01 08 	sub	r8,r2,r7
80004750:	58 f8       	cp.w	r8,15
80004752:	5f aa       	srle	r10
80004754:	f5 e9 10 09 	or	r9,r10,r9
80004758:	e0 80 00 98 	breq	80004888 <_malloc_r+0x40c>
8000475c:	4c 68       	lddpc	r8,80004874 <_malloc_r+0x3f8>
8000475e:	70 01       	ld.w	r1,r8[0x0]
80004760:	4c 68       	lddpc	r8,80004878 <_malloc_r+0x3fc>
80004762:	2f 01       	sub	r1,-16
80004764:	70 08       	ld.w	r8,r8[0x0]
80004766:	0e 01       	add	r1,r7
80004768:	5b f8       	cp.w	r8,-1
8000476a:	c0 40       	breq	80004772 <_malloc_r+0x2f6>
8000476c:	28 11       	sub	r1,-127
8000476e:	e0 11 ff 80 	andl	r1,0xff80
80004772:	02 9b       	mov	r11,r1
80004774:	0a 9c       	mov	r12,r5
80004776:	ca 1c       	rcall	800048b8 <_sbrk_r>
80004778:	18 96       	mov	r6,r12
8000477a:	5b fc       	cp.w	r12,-1
8000477c:	c6 d0       	breq	80004856 <_malloc_r+0x3da>
8000477e:	e6 02 00 08 	add	r8,r3,r2
80004782:	10 3c       	cp.w	r12,r8
80004784:	c0 32       	brcc	8000478a <_malloc_r+0x30e>
80004786:	08 33       	cp.w	r3,r4
80004788:	c6 71       	brne	80004856 <_malloc_r+0x3da>
8000478a:	4b da       	lddpc	r10,8000487c <_malloc_r+0x400>
8000478c:	74 09       	ld.w	r9,r10[0x0]
8000478e:	e2 09 00 09 	add	r9,r1,r9
80004792:	95 09       	st.w	r10[0x0],r9
80004794:	10 36       	cp.w	r6,r8
80004796:	c0 a1       	brne	800047aa <_malloc_r+0x32e>
80004798:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000479c:	c0 71       	brne	800047aa <_malloc_r+0x32e>
8000479e:	e2 02 00 02 	add	r2,r1,r2
800047a2:	68 28       	ld.w	r8,r4[0x8]
800047a4:	a1 a2       	sbr	r2,0x0
800047a6:	91 12       	st.w	r8[0x4],r2
800047a8:	c4 b8       	rjmp	8000483e <_malloc_r+0x3c2>
800047aa:	4b 4a       	lddpc	r10,80004878 <_malloc_r+0x3fc>
800047ac:	74 0b       	ld.w	r11,r10[0x0]
800047ae:	5b fb       	cp.w	r11,-1
800047b0:	c0 31       	brne	800047b6 <_malloc_r+0x33a>
800047b2:	95 06       	st.w	r10[0x0],r6
800047b4:	c0 68       	rjmp	800047c0 <_malloc_r+0x344>
800047b6:	ec 09 00 09 	add	r9,r6,r9
800047ba:	4b 1a       	lddpc	r10,8000487c <_malloc_r+0x400>
800047bc:	10 19       	sub	r9,r8
800047be:	95 09       	st.w	r10[0x0],r9
800047c0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800047c4:	f0 09 11 08 	rsub	r9,r8,8
800047c8:	58 08       	cp.w	r8,0
800047ca:	f2 08 17 10 	movne	r8,r9
800047ce:	ed d8 e1 06 	addne	r6,r6,r8
800047d2:	28 08       	sub	r8,-128
800047d4:	ec 01 00 01 	add	r1,r6,r1
800047d8:	0a 9c       	mov	r12,r5
800047da:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800047de:	f0 01 01 01 	sub	r1,r8,r1
800047e2:	02 9b       	mov	r11,r1
800047e4:	c6 ac       	rcall	800048b8 <_sbrk_r>
800047e6:	4a 68       	lddpc	r8,8000487c <_malloc_r+0x400>
800047e8:	5b fc       	cp.w	r12,-1
800047ea:	ec 0c 17 00 	moveq	r12,r6
800047ee:	f9 b1 00 00 	moveq	r1,0
800047f2:	70 09       	ld.w	r9,r8[0x0]
800047f4:	0c 1c       	sub	r12,r6
800047f6:	89 26       	st.w	r4[0x8],r6
800047f8:	02 0c       	add	r12,r1
800047fa:	12 01       	add	r1,r9
800047fc:	a1 ac       	sbr	r12,0x0
800047fe:	91 01       	st.w	r8[0x0],r1
80004800:	8d 1c       	st.w	r6[0x4],r12
80004802:	08 33       	cp.w	r3,r4
80004804:	c1 d0       	breq	8000483e <_malloc_r+0x3c2>
80004806:	58 f2       	cp.w	r2,15
80004808:	e0 8b 00 05 	brhi	80004812 <_malloc_r+0x396>
8000480c:	30 18       	mov	r8,1
8000480e:	8d 18       	st.w	r6[0x4],r8
80004810:	c2 38       	rjmp	80004856 <_malloc_r+0x3da>
80004812:	30 59       	mov	r9,5
80004814:	20 c2       	sub	r2,12
80004816:	e0 12 ff f8 	andl	r2,0xfff8
8000481a:	e6 02 00 08 	add	r8,r3,r2
8000481e:	91 29       	st.w	r8[0x8],r9
80004820:	91 19       	st.w	r8[0x4],r9
80004822:	66 18       	ld.w	r8,r3[0x4]
80004824:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004828:	e5 e8 10 08 	or	r8,r2,r8
8000482c:	87 18       	st.w	r3[0x4],r8
8000482e:	58 f2       	cp.w	r2,15
80004830:	e0 88 00 07 	brls	8000483e <_malloc_r+0x3c2>
80004834:	e6 cb ff f8 	sub	r11,r3,-8
80004838:	0a 9c       	mov	r12,r5
8000483a:	fe b0 fd 2d 	rcall	80004294 <_free_r>
8000483e:	49 19       	lddpc	r9,80004880 <_malloc_r+0x404>
80004840:	72 0a       	ld.w	r10,r9[0x0]
80004842:	48 f8       	lddpc	r8,8000487c <_malloc_r+0x400>
80004844:	70 08       	ld.w	r8,r8[0x0]
80004846:	14 38       	cp.w	r8,r10
80004848:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000484c:	48 e9       	lddpc	r9,80004884 <_malloc_r+0x408>
8000484e:	72 0a       	ld.w	r10,r9[0x0]
80004850:	14 38       	cp.w	r8,r10
80004852:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004856:	68 28       	ld.w	r8,r4[0x8]
80004858:	70 18       	ld.w	r8,r8[0x4]
8000485a:	e0 18 ff fc 	andl	r8,0xfffc
8000485e:	0e 38       	cp.w	r8,r7
80004860:	5f 39       	srlo	r9
80004862:	0e 18       	sub	r8,r7
80004864:	58 f8       	cp.w	r8,15
80004866:	5f aa       	srle	r10
80004868:	f5 e9 10 09 	or	r9,r10,r9
8000486c:	c0 e0       	breq	80004888 <_malloc_r+0x40c>
8000486e:	0a 9c       	mov	r12,r5
80004870:	c2 2c       	rcall	800048b4 <__malloc_unlock>
80004872:	d8 3a       	popm	r0-r7,pc,r12=0
80004874:	00 00       	add	r0,r0
80004876:	0c 68       	and	r8,r6
80004878:	00 00       	add	r0,r0
8000487a:	05 d4       	ld.ub	r4,r2[0x5]
8000487c:	00 00       	add	r0,r0
8000487e:	0c 6c       	and	r12,r6
80004880:	00 00       	add	r0,r0
80004882:	0c 64       	and	r4,r6
80004884:	00 00       	add	r0,r0
80004886:	0c 60       	and	r0,r6
80004888:	68 26       	ld.w	r6,r4[0x8]
8000488a:	a1 a8       	sbr	r8,0x0
8000488c:	0e 99       	mov	r9,r7
8000488e:	a1 a9       	sbr	r9,0x0
80004890:	8d 19       	st.w	r6[0x4],r9
80004892:	ec 07 00 07 	add	r7,r6,r7
80004896:	0a 9c       	mov	r12,r5
80004898:	89 27       	st.w	r4[0x8],r7
8000489a:	8f 18       	st.w	r7[0x4],r8
8000489c:	c0 cc       	rcall	800048b4 <__malloc_unlock>
8000489e:	ec cc ff f8 	sub	r12,r6,-8
800048a2:	d8 32       	popm	r0-r7,pc

800048a4 <memset>:
800048a4:	18 98       	mov	r8,r12
800048a6:	c0 38       	rjmp	800048ac <memset+0x8>
800048a8:	10 cb       	st.b	r8++,r11
800048aa:	20 1a       	sub	r10,1
800048ac:	58 0a       	cp.w	r10,0
800048ae:	cf d1       	brne	800048a8 <memset+0x4>
800048b0:	5e fc       	retal	r12

800048b2 <__malloc_lock>:
800048b2:	5e fc       	retal	r12

800048b4 <__malloc_unlock>:
800048b4:	5e fc       	retal	r12
800048b6:	d7 03       	nop

800048b8 <_sbrk_r>:
800048b8:	d4 21       	pushm	r4-r7,lr
800048ba:	30 08       	mov	r8,0
800048bc:	18 97       	mov	r7,r12
800048be:	48 66       	lddpc	r6,800048d4 <_sbrk_r+0x1c>
800048c0:	16 9c       	mov	r12,r11
800048c2:	8d 08       	st.w	r6[0x0],r8
800048c4:	c5 ac       	rcall	80004978 <_sbrk>
800048c6:	5b fc       	cp.w	r12,-1
800048c8:	c0 51       	brne	800048d2 <_sbrk_r+0x1a>
800048ca:	6c 08       	ld.w	r8,r6[0x0]
800048cc:	58 08       	cp.w	r8,0
800048ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800048d2:	d8 22       	popm	r4-r7,pc
800048d4:	00 00       	add	r0,r0
800048d6:	0c c4       	st.b	r6++,r4

800048d8 <__sclose>:
800048d8:	d4 01       	pushm	lr
800048da:	96 7b       	ld.sh	r11,r11[0xe]
800048dc:	c8 0c       	rcall	800049dc <_close_r>
800048de:	d8 02       	popm	pc

800048e0 <__sseek>:
800048e0:	d4 21       	pushm	r4-r7,lr
800048e2:	16 97       	mov	r7,r11
800048e4:	96 7b       	ld.sh	r11,r11[0xe]
800048e6:	cf 7c       	rcall	80004ad4 <_lseek_r>
800048e8:	8e 68       	ld.sh	r8,r7[0xc]
800048ea:	10 99       	mov	r9,r8
800048ec:	ad c8       	cbr	r8,0xc
800048ee:	ad a9       	sbr	r9,0xc
800048f0:	5b fc       	cp.w	r12,-1
800048f2:	ef f8 0c 06 	st.heq	r7[0xc],r8
800048f6:	ef f9 1c 06 	st.hne	r7[0xc],r9
800048fa:	ef fc 1a 15 	st.wne	r7[0x54],r12
800048fe:	d8 22       	popm	r4-r7,pc

80004900 <__swrite>:
80004900:	d4 21       	pushm	r4-r7,lr
80004902:	96 68       	ld.sh	r8,r11[0xc]
80004904:	16 97       	mov	r7,r11
80004906:	14 95       	mov	r5,r10
80004908:	12 94       	mov	r4,r9
8000490a:	e2 18 01 00 	andl	r8,0x100,COH
8000490e:	18 96       	mov	r6,r12
80004910:	c0 50       	breq	8000491a <__swrite+0x1a>
80004912:	30 29       	mov	r9,2
80004914:	30 0a       	mov	r10,0
80004916:	96 7b       	ld.sh	r11,r11[0xe]
80004918:	cd ec       	rcall	80004ad4 <_lseek_r>
8000491a:	8e 68       	ld.sh	r8,r7[0xc]
8000491c:	ad c8       	cbr	r8,0xc
8000491e:	08 99       	mov	r9,r4
80004920:	0a 9a       	mov	r10,r5
80004922:	8e 7b       	ld.sh	r11,r7[0xe]
80004924:	0c 9c       	mov	r12,r6
80004926:	ae 68       	st.h	r7[0xc],r8
80004928:	c4 6c       	rcall	800049b4 <_write_r>
8000492a:	d8 22       	popm	r4-r7,pc

8000492c <__sread>:
8000492c:	d4 21       	pushm	r4-r7,lr
8000492e:	16 97       	mov	r7,r11
80004930:	96 7b       	ld.sh	r11,r11[0xe]
80004932:	ce 5c       	rcall	80004afc <_read_r>
80004934:	c0 65       	brlt	80004940 <__sread+0x14>
80004936:	6f 58       	ld.w	r8,r7[0x54]
80004938:	18 08       	add	r8,r12
8000493a:	ef 48 00 54 	st.w	r7[84],r8
8000493e:	d8 22       	popm	r4-r7,pc
80004940:	8e 68       	ld.sh	r8,r7[0xc]
80004942:	ad c8       	cbr	r8,0xc
80004944:	ae 68       	st.h	r7[0xc],r8
80004946:	d8 22       	popm	r4-r7,pc

80004948 <_close>:
80004948:	30 28       	mov	r8,2
8000494a:	d6 73       	breakpoint
8000494c:	3f fc       	mov	r12,-1
8000494e:	35 8b       	mov	r11,88
80004950:	58 0c       	cp.w	r12,0
80004952:	5e 4c       	retge	r12
80004954:	48 2a       	lddpc	r10,8000495c <_close+0x14>
80004956:	95 0b       	st.w	r10[0x0],r11
80004958:	5e fc       	retal	r12
8000495a:	d7 03       	nop
8000495c:	00 00       	add	r0,r0
8000495e:	0c c4       	st.b	r6++,r4

80004960 <_lseek>:
80004960:	30 58       	mov	r8,5
80004962:	d6 73       	breakpoint
80004964:	3f fc       	mov	r12,-1
80004966:	35 8b       	mov	r11,88
80004968:	58 0c       	cp.w	r12,0
8000496a:	5e 4c       	retge	r12
8000496c:	48 2a       	lddpc	r10,80004974 <_lseek+0x14>
8000496e:	95 0b       	st.w	r10[0x0],r11
80004970:	5e fc       	retal	r12
80004972:	d7 03       	nop
80004974:	00 00       	add	r0,r0
80004976:	0c c4       	st.b	r6++,r4

80004978 <_sbrk>:
80004978:	d4 01       	pushm	lr
8000497a:	48 c8       	lddpc	r8,800049a8 <_sbrk+0x30>
8000497c:	70 09       	ld.w	r9,r8[0x0]
8000497e:	58 09       	cp.w	r9,0
80004980:	c0 31       	brne	80004986 <_sbrk+0xe>
80004982:	48 b9       	lddpc	r9,800049ac <_sbrk+0x34>
80004984:	91 09       	st.w	r8[0x0],r9
80004986:	48 99       	lddpc	r9,800049a8 <_sbrk+0x30>
80004988:	48 aa       	lddpc	r10,800049b0 <_sbrk+0x38>
8000498a:	72 08       	ld.w	r8,r9[0x0]
8000498c:	f0 0c 00 0c 	add	r12,r8,r12
80004990:	14 3c       	cp.w	r12,r10
80004992:	e0 8b 00 04 	brhi	8000499a <_sbrk+0x22>
80004996:	93 0c       	st.w	r9[0x0],r12
80004998:	c0 58       	rjmp	800049a2 <_sbrk+0x2a>
8000499a:	c3 1c       	rcall	800049fc <__errno>
8000499c:	30 c8       	mov	r8,12
8000499e:	99 08       	st.w	r12[0x0],r8
800049a0:	3f f8       	mov	r8,-1
800049a2:	10 9c       	mov	r12,r8
800049a4:	d8 02       	popm	pc
800049a6:	d7 03       	nop
800049a8:	00 00       	add	r0,r0
800049aa:	0c 94       	mov	r4,r6
800049ac:	00 00       	add	r0,r0
800049ae:	0c c8       	st.b	r6++,r8
800049b0:	00 00       	add	r0,r0
800049b2:	f0 00       	*unknown*

800049b4 <_write_r>:
800049b4:	d4 21       	pushm	r4-r7,lr
800049b6:	16 98       	mov	r8,r11
800049b8:	18 97       	mov	r7,r12
800049ba:	10 9c       	mov	r12,r8
800049bc:	30 08       	mov	r8,0
800049be:	14 9b       	mov	r11,r10
800049c0:	48 66       	lddpc	r6,800049d8 <_write_r+0x24>
800049c2:	12 9a       	mov	r10,r9
800049c4:	8d 08       	st.w	r6[0x0],r8
800049c6:	fe b0 f8 85 	rcall	80003ad0 <_write>
800049ca:	5b fc       	cp.w	r12,-1
800049cc:	c0 51       	brne	800049d6 <_write_r+0x22>
800049ce:	6c 08       	ld.w	r8,r6[0x0]
800049d0:	58 08       	cp.w	r8,0
800049d2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800049d6:	d8 22       	popm	r4-r7,pc
800049d8:	00 00       	add	r0,r0
800049da:	0c c4       	st.b	r6++,r4

800049dc <_close_r>:
800049dc:	d4 21       	pushm	r4-r7,lr
800049de:	30 08       	mov	r8,0
800049e0:	18 97       	mov	r7,r12
800049e2:	48 66       	lddpc	r6,800049f8 <_close_r+0x1c>
800049e4:	16 9c       	mov	r12,r11
800049e6:	8d 08       	st.w	r6[0x0],r8
800049e8:	cb 0f       	rcall	80004948 <_close>
800049ea:	5b fc       	cp.w	r12,-1
800049ec:	c0 51       	brne	800049f6 <_close_r+0x1a>
800049ee:	6c 08       	ld.w	r8,r6[0x0]
800049f0:	58 08       	cp.w	r8,0
800049f2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800049f6:	d8 22       	popm	r4-r7,pc
800049f8:	00 00       	add	r0,r0
800049fa:	0c c4       	st.b	r6++,r4

800049fc <__errno>:
800049fc:	48 28       	lddpc	r8,80004a04 <__errno+0x8>
800049fe:	70 0c       	ld.w	r12,r8[0x0]
80004a00:	2f 4c       	sub	r12,-12
80004a02:	5e fc       	retal	r12
80004a04:	00 00       	add	r0,r0
80004a06:	01 c4       	ld.ub	r4,r0[0x4]

80004a08 <_fclose_r>:
80004a08:	d4 21       	pushm	r4-r7,lr
80004a0a:	18 96       	mov	r6,r12
80004a0c:	16 97       	mov	r7,r11
80004a0e:	58 0b       	cp.w	r11,0
80004a10:	c0 31       	brne	80004a16 <_fclose_r+0xe>
80004a12:	16 95       	mov	r5,r11
80004a14:	c5 08       	rjmp	80004ab4 <_fclose_r+0xac>
80004a16:	fe b0 fb 4f 	rcall	800040b4 <__sfp_lock_acquire>
80004a1a:	58 06       	cp.w	r6,0
80004a1c:	c0 70       	breq	80004a2a <_fclose_r+0x22>
80004a1e:	6c 68       	ld.w	r8,r6[0x18]
80004a20:	58 08       	cp.w	r8,0
80004a22:	c0 41       	brne	80004a2a <_fclose_r+0x22>
80004a24:	0c 9c       	mov	r12,r6
80004a26:	fe b0 fb 9b 	rcall	8000415c <__sinit>
80004a2a:	4a 48       	lddpc	r8,80004ab8 <_fclose_r+0xb0>
80004a2c:	10 37       	cp.w	r7,r8
80004a2e:	c0 31       	brne	80004a34 <_fclose_r+0x2c>
80004a30:	6c 07       	ld.w	r7,r6[0x0]
80004a32:	c0 a8       	rjmp	80004a46 <_fclose_r+0x3e>
80004a34:	4a 28       	lddpc	r8,80004abc <_fclose_r+0xb4>
80004a36:	10 37       	cp.w	r7,r8
80004a38:	c0 31       	brne	80004a3e <_fclose_r+0x36>
80004a3a:	6c 17       	ld.w	r7,r6[0x4]
80004a3c:	c0 58       	rjmp	80004a46 <_fclose_r+0x3e>
80004a3e:	4a 18       	lddpc	r8,80004ac0 <_fclose_r+0xb8>
80004a40:	10 37       	cp.w	r7,r8
80004a42:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80004a46:	8e 69       	ld.sh	r9,r7[0xc]
80004a48:	30 08       	mov	r8,0
80004a4a:	f0 09 19 00 	cp.h	r9,r8
80004a4e:	c0 51       	brne	80004a58 <_fclose_r+0x50>
80004a50:	fe b0 fb 33 	rcall	800040b6 <__sfp_lock_release>
80004a54:	30 05       	mov	r5,0
80004a56:	c2 f8       	rjmp	80004ab4 <_fclose_r+0xac>
80004a58:	0e 9b       	mov	r11,r7
80004a5a:	0c 9c       	mov	r12,r6
80004a5c:	fe b0 fa a4 	rcall	80003fa4 <_fflush_r>
80004a60:	6e c8       	ld.w	r8,r7[0x30]
80004a62:	18 95       	mov	r5,r12
80004a64:	58 08       	cp.w	r8,0
80004a66:	c0 60       	breq	80004a72 <_fclose_r+0x6a>
80004a68:	6e 8b       	ld.w	r11,r7[0x20]
80004a6a:	0c 9c       	mov	r12,r6
80004a6c:	5d 18       	icall	r8
80004a6e:	f9 b5 05 ff 	movlt	r5,-1
80004a72:	8e 68       	ld.sh	r8,r7[0xc]
80004a74:	ed b8 00 07 	bld	r8,0x7
80004a78:	c0 51       	brne	80004a82 <_fclose_r+0x7a>
80004a7a:	6e 4b       	ld.w	r11,r7[0x10]
80004a7c:	0c 9c       	mov	r12,r6
80004a7e:	fe b0 fc 0b 	rcall	80004294 <_free_r>
80004a82:	6e db       	ld.w	r11,r7[0x34]
80004a84:	58 0b       	cp.w	r11,0
80004a86:	c0 a0       	breq	80004a9a <_fclose_r+0x92>
80004a88:	ee c8 ff bc 	sub	r8,r7,-68
80004a8c:	10 3b       	cp.w	r11,r8
80004a8e:	c0 40       	breq	80004a96 <_fclose_r+0x8e>
80004a90:	0c 9c       	mov	r12,r6
80004a92:	fe b0 fc 01 	rcall	80004294 <_free_r>
80004a96:	30 08       	mov	r8,0
80004a98:	8f d8       	st.w	r7[0x34],r8
80004a9a:	6f 2b       	ld.w	r11,r7[0x48]
80004a9c:	58 0b       	cp.w	r11,0
80004a9e:	c0 70       	breq	80004aac <_fclose_r+0xa4>
80004aa0:	0c 9c       	mov	r12,r6
80004aa2:	fe b0 fb f9 	rcall	80004294 <_free_r>
80004aa6:	30 08       	mov	r8,0
80004aa8:	ef 48 00 48 	st.w	r7[72],r8
80004aac:	30 08       	mov	r8,0
80004aae:	ae 68       	st.h	r7[0xc],r8
80004ab0:	fe b0 fb 03 	rcall	800040b6 <__sfp_lock_release>
80004ab4:	0a 9c       	mov	r12,r5
80004ab6:	d8 22       	popm	r4-r7,pc
80004ab8:	80 00       	ld.sh	r0,r0[0x0]
80004aba:	4e f8       	lddpc	r8,80004c74 <_handle_DTLB_Miss_Write+0x4>
80004abc:	80 00       	ld.sh	r0,r0[0x0]
80004abe:	4f 18       	lddpc	r8,80004c80 <_handle_DTLB_Miss_Write+0x10>
80004ac0:	80 00       	ld.sh	r0,r0[0x0]
80004ac2:	4f 38       	lddpc	r8,80004c8c <_handle_DTLB_Miss_Write+0x1c>

80004ac4 <fclose>:
80004ac4:	d4 01       	pushm	lr
80004ac6:	48 38       	lddpc	r8,80004ad0 <fclose+0xc>
80004ac8:	18 9b       	mov	r11,r12
80004aca:	70 0c       	ld.w	r12,r8[0x0]
80004acc:	c9 ef       	rcall	80004a08 <_fclose_r>
80004ace:	d8 02       	popm	pc
80004ad0:	00 00       	add	r0,r0
80004ad2:	01 c4       	ld.ub	r4,r0[0x4]

80004ad4 <_lseek_r>:
80004ad4:	d4 21       	pushm	r4-r7,lr
80004ad6:	16 98       	mov	r8,r11
80004ad8:	18 97       	mov	r7,r12
80004ada:	10 9c       	mov	r12,r8
80004adc:	30 08       	mov	r8,0
80004ade:	14 9b       	mov	r11,r10
80004ae0:	48 66       	lddpc	r6,80004af8 <_lseek_r+0x24>
80004ae2:	12 9a       	mov	r10,r9
80004ae4:	8d 08       	st.w	r6[0x0],r8
80004ae6:	c3 df       	rcall	80004960 <_lseek>
80004ae8:	5b fc       	cp.w	r12,-1
80004aea:	c0 51       	brne	80004af4 <_lseek_r+0x20>
80004aec:	6c 08       	ld.w	r8,r6[0x0]
80004aee:	58 08       	cp.w	r8,0
80004af0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004af4:	d8 22       	popm	r4-r7,pc
80004af6:	d7 03       	nop
80004af8:	00 00       	add	r0,r0
80004afa:	0c c4       	st.b	r6++,r4

80004afc <_read_r>:
80004afc:	d4 21       	pushm	r4-r7,lr
80004afe:	16 98       	mov	r8,r11
80004b00:	18 97       	mov	r7,r12
80004b02:	10 9c       	mov	r12,r8
80004b04:	30 08       	mov	r8,0
80004b06:	14 9b       	mov	r11,r10
80004b08:	48 66       	lddpc	r6,80004b20 <_read_r+0x24>
80004b0a:	12 9a       	mov	r10,r9
80004b0c:	8d 08       	st.w	r6[0x0],r8
80004b0e:	fe b0 f7 69 	rcall	800039e0 <_read>
80004b12:	5b fc       	cp.w	r12,-1
80004b14:	c0 51       	brne	80004b1e <_read_r+0x22>
80004b16:	6c 08       	ld.w	r8,r6[0x0]
80004b18:	58 08       	cp.w	r8,0
80004b1a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004b1e:	d8 22       	popm	r4-r7,pc
80004b20:	00 00       	add	r0,r0
80004b22:	0c c4       	st.b	r6++,r4

Disassembly of section .exception:

80004c00 <_evba>:
80004c00:	c0 08       	rjmp	80004c00 <_evba>
	...

80004c04 <_handle_TLB_Multiple_Hit>:
80004c04:	c0 08       	rjmp	80004c04 <_handle_TLB_Multiple_Hit>
	...

80004c08 <_handle_Bus_Error_Data_Fetch>:
80004c08:	c0 08       	rjmp	80004c08 <_handle_Bus_Error_Data_Fetch>
	...

80004c0c <_handle_Bus_Error_Instruction_Fetch>:
80004c0c:	c0 08       	rjmp	80004c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80004c10 <_handle_NMI>:
80004c10:	c0 08       	rjmp	80004c10 <_handle_NMI>
	...

80004c14 <_handle_Instruction_Address>:
80004c14:	c0 08       	rjmp	80004c14 <_handle_Instruction_Address>
	...

80004c18 <_handle_ITLB_Protection>:
80004c18:	c0 08       	rjmp	80004c18 <_handle_ITLB_Protection>
	...

80004c1c <_handle_Breakpoint>:
80004c1c:	c0 08       	rjmp	80004c1c <_handle_Breakpoint>
	...

80004c20 <_handle_Illegal_Opcode>:
80004c20:	c0 08       	rjmp	80004c20 <_handle_Illegal_Opcode>
	...

80004c24 <_handle_Unimplemented_Instruction>:
80004c24:	c0 08       	rjmp	80004c24 <_handle_Unimplemented_Instruction>
	...

80004c28 <_handle_Privilege_Violation>:
80004c28:	c0 08       	rjmp	80004c28 <_handle_Privilege_Violation>
	...

80004c2c <_handle_Floating_Point>:
80004c2c:	c0 08       	rjmp	80004c2c <_handle_Floating_Point>
	...

80004c30 <_handle_Coprocessor_Absent>:
80004c30:	c0 08       	rjmp	80004c30 <_handle_Coprocessor_Absent>
	...

80004c34 <_handle_Data_Address_Read>:
80004c34:	c0 08       	rjmp	80004c34 <_handle_Data_Address_Read>
	...

80004c38 <_handle_Data_Address_Write>:
80004c38:	c0 08       	rjmp	80004c38 <_handle_Data_Address_Write>
	...

80004c3c <_handle_DTLB_Protection_Read>:
80004c3c:	c0 08       	rjmp	80004c3c <_handle_DTLB_Protection_Read>
	...

80004c40 <_handle_DTLB_Protection_Write>:
80004c40:	c0 08       	rjmp	80004c40 <_handle_DTLB_Protection_Write>
	...

80004c44 <_handle_DTLB_Modified>:
80004c44:	c0 08       	rjmp	80004c44 <_handle_DTLB_Modified>
	...

80004c50 <_handle_ITLB_Miss>:
80004c50:	c0 08       	rjmp	80004c50 <_handle_ITLB_Miss>
	...

80004c60 <_handle_DTLB_Miss_Read>:
80004c60:	c0 08       	rjmp	80004c60 <_handle_DTLB_Miss_Read>
	...

80004c70 <_handle_DTLB_Miss_Write>:
80004c70:	c0 08       	rjmp	80004c70 <_handle_DTLB_Miss_Write>
	...

80004d00 <_handle_Supervisor_Call>:
80004d00:	c0 08       	rjmp	80004d00 <_handle_Supervisor_Call>
80004d02:	d7 03       	nop

80004d04 <_int0>:
80004d04:	30 0c       	mov	r12,0
80004d06:	fe b0 ea 5d 	rcall	800021c0 <_get_interrupt_handler>
80004d0a:	58 0c       	cp.w	r12,0
80004d0c:	f8 0f 17 10 	movne	pc,r12
80004d10:	d6 03       	rete

80004d12 <_int1>:
80004d12:	30 1c       	mov	r12,1
80004d14:	fe b0 ea 56 	rcall	800021c0 <_get_interrupt_handler>
80004d18:	58 0c       	cp.w	r12,0
80004d1a:	f8 0f 17 10 	movne	pc,r12
80004d1e:	d6 03       	rete

80004d20 <_int2>:
80004d20:	30 2c       	mov	r12,2
80004d22:	fe b0 ea 4f 	rcall	800021c0 <_get_interrupt_handler>
80004d26:	58 0c       	cp.w	r12,0
80004d28:	f8 0f 17 10 	movne	pc,r12
80004d2c:	d6 03       	rete

80004d2e <_int3>:
80004d2e:	30 3c       	mov	r12,3
80004d30:	fe b0 ea 48 	rcall	800021c0 <_get_interrupt_handler>
80004d34:	58 0c       	cp.w	r12,0
80004d36:	f8 0f 17 10 	movne	pc,r12
80004d3a:	d6 03       	rete

80004d3c <ipr_val>:
80004d3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80004d4c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004d5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004d6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004d7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004d8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004d9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004dac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004dbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004dcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004ddc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004dec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004dfc:	d7 03 d7 03                                         ....
