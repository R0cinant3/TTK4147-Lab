
AVR32 FreeRTOS Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000039f8  80002024  80002024  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80005c00  80005c00  00006000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80005e00  80005e00  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000160  80005e18  80005e18  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  80005f78  00006408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  80005f80  00006410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  80005f88  00006418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          0000000c  0000001c  80005f8c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000005d8  00000028  80005f98  00006428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00000430  00000600  00000600  00000000  2**2
                  ALLOC
 14 .heap         0000e5d0  00000a30  00000a30  00000000  2**0
                  ALLOC
 15 .comment      00000030  00000000  00000000  00006a00  2**0
                  CONTENTS, READONLY
 16 .debug_aranges 00000ce0  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 000019fd  00000000  00000000  00007710  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00025b63  00000000  00000000  0000910d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000047b9  00000000  00000000  0002ec70  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0000e75c  00000000  00000000  00033429  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00001db0  00000000  00000000  00041b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00007e5d  00000000  00000000  00043938  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    000043c3  00000000  00000000  0004b795  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macinfo 014ad906  00000000  00000000  0004fb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 26 .debug_ranges 00000d68  00000000  00000000  014fd45e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	48 1f       	lddpc	pc,80002004 <program_start+0x4>
80002002:	00 00       	add	r0,r0
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	20 24       	sub	r4,2

Disassembly of section .init:

80002008 <_init>:
80002008:	eb cd 40 40 	pushm	r6,lr
8000200c:	48 26       	lddpc	r6,80002014 <_init+0xc>
8000200e:	1e 26       	rsub	r6,pc
80002010:	c0 48       	rjmp	80002018 <_init+0x10>
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1f f2       	ld.ub	r2,pc[0x7]
80002018:	f0 16 00 01 	mcall	r6[4]
8000201c:	f0 16 00 00 	mcall	r6[0]
80002020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002024 <_stext>:
80002024:	30 07       	mov	r7,0
80002026:	49 5a       	lddpc	r10,80002078 <_stext+0x54>
80002028:	5b fa       	cp.w	r10,-1
8000202a:	f4 0d 17 10 	movne	sp,r10
8000202e:	49 4b       	lddpc	r11,8000207c <_stext+0x58>
80002030:	49 4c       	lddpc	r12,80002080 <_stext+0x5c>
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 60       	breq	80002040 <_stext+0x1c>
80002036:	49 4a       	lddpc	r10,80002084 <_stext+0x60>
80002038:	b7 09       	ld.d	r8,r11++
8000203a:	b9 28       	st.d	r12++,r8
8000203c:	14 3c       	cp.w	r12,r10
8000203e:	cf d5       	brlt	80002038 <_stext+0x14>
80002040:	49 2a       	lddpc	r10,80002088 <_stext+0x64>
80002042:	49 1c       	lddpc	r12,80002084 <_stext+0x60>
80002044:	30 08       	mov	r8,0
80002046:	30 09       	mov	r9,0
80002048:	b9 28       	st.d	r12++,r8
8000204a:	14 3c       	cp.w	r12,r10
8000204c:	cf e5       	brlt	80002048 <_stext+0x24>
8000204e:	f0 1f 00 10 	mcall	8000208c <_stext+0x68>
80002052:	49 0c       	lddpc	r12,80002090 <_stext+0x6c>
80002054:	f0 1f 00 10 	mcall	80002094 <_stext+0x70>
80002058:	f0 1f 00 10 	mcall	80002098 <_stext+0x74>
8000205c:	1a 9c       	mov	r12,sp
8000205e:	30 0b       	mov	r11,0
80002060:	f0 1f 00 0f 	mcall	8000209c <_stext+0x78>
80002064:	5b fc       	cp.w	r12,-1
80002066:	f9 bc 00 00 	moveq	r12,0
8000206a:	f9 ba 00 00 	moveq	r10,0
8000206e:	14 1d       	sub	sp,r10
80002070:	f0 1f 00 0c 	mcall	800020a0 <_stext+0x7c>
80002074:	f0 1f 00 0c 	mcall	800020a4 <_stext+0x80>
80002078:	00 01       	add	r1,r0
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	5f 78       	srpl	r8
80002080:	00 00       	add	r0,r0
80002082:	00 08       	add	r8,r0
80002084:	00 00       	add	r0,r0
80002086:	06 00       	add	r0,r3
80002088:	00 00       	add	r0,r0
8000208a:	0a 30       	cp.w	r0,r5
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	42 f0       	lddsp	r0,sp[0xbc]
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	5e 00       	reteq	r0
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	4a 54       	lddpc	r4,80002128 <board_init+0x1c>
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 08       	sub	r8,0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	50 a4       	stdsp	sp[0x28],r4
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	49 f8       	lddpc	r8,8000211c <board_init+0x10>
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	4a 68       	lddpc	r8,8000213c <gpio_configure_pin>

800020a8 <__do_global_dtors_aux>:
800020a8:	d4 21       	pushm	r4-r7,lr
800020aa:	48 e8       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020ac:	11 89       	ld.ub	r9,r8[0x0]
800020ae:	30 08       	mov	r8,0
800020b0:	f0 09 18 00 	cp.b	r9,r8
800020b4:	c1 41       	brne	800020dc <__do_global_dtors_aux+0x34>
800020b6:	48 c8       	lddpc	r8,800020e4 <__do_global_dtors_aux+0x3c>
800020b8:	48 c6       	lddpc	r6,800020e8 <__do_global_dtors_aux+0x40>
800020ba:	10 95       	mov	r5,r8
800020bc:	10 16       	sub	r6,r8
800020be:	48 c7       	lddpc	r7,800020ec <__do_global_dtors_aux+0x44>
800020c0:	a3 46       	asr	r6,0x2
800020c2:	20 16       	sub	r6,1
800020c4:	c0 68       	rjmp	800020d0 <__do_global_dtors_aux+0x28>
800020c6:	2f f8       	sub	r8,-1
800020c8:	8f 08       	st.w	r7[0x0],r8
800020ca:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020ce:	5d 18       	icall	r8
800020d0:	6e 08       	ld.w	r8,r7[0x0]
800020d2:	0c 38       	cp.w	r8,r6
800020d4:	cf 93       	brcs	800020c6 <__do_global_dtors_aux+0x1e>
800020d6:	30 19       	mov	r9,1
800020d8:	48 28       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020da:	b0 89       	st.b	r8[0x0],r9
800020dc:	d8 22       	popm	r4-r7,pc
800020de:	00 00       	add	r0,r0
800020e0:	00 00       	add	r0,r0
800020e2:	06 00       	add	r0,r3
800020e4:	00 00       	add	r0,r0
800020e6:	00 10       	sub	r0,r0
800020e8:	00 00       	add	r0,r0
800020ea:	00 14       	sub	r4,r0
800020ec:	00 00       	add	r0,r0
800020ee:	06 04       	add	r4,r3

800020f0 <frame_dummy>:
800020f0:	d4 01       	pushm	lr
800020f2:	48 5c       	lddpc	r12,80002104 <frame_dummy+0x14>
800020f4:	78 08       	ld.w	r8,r12[0x0]
800020f6:	58 08       	cp.w	r8,0
800020f8:	c0 50       	breq	80002102 <frame_dummy+0x12>
800020fa:	48 48       	lddpc	r8,80002108 <frame_dummy+0x18>
800020fc:	58 08       	cp.w	r8,0
800020fe:	c0 20       	breq	80002102 <frame_dummy+0x12>
80002100:	5d 18       	icall	r8
80002102:	d8 02       	popm	pc
80002104:	00 00       	add	r0,r0
80002106:	00 18       	sub	r8,r0
80002108:	00 00       	add	r0,r0
	...

8000210c <board_init>:
#endif



void board_init (void)
{
8000210c:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000210e:	30 3b       	mov	r11,3
80002110:	32 3c       	mov	r12,35
80002112:	f0 1f 00 0a 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002116:	30 3b       	mov	r11,3
80002118:	34 9c       	mov	r12,73
8000211a:	f0 1f 00 08 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000211e:	30 3b       	mov	r11,3
80002120:	32 2c       	mov	r12,34
80002122:	f0 1f 00 06 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002126:	30 3b       	mov	r11,3
80002128:	32 6c       	mov	r12,38
8000212a:	f0 1f 00 04 	mcall	80002138 <board_init+0x2c>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000212e:	30 4b       	mov	r11,4
80002130:	32 1c       	mov	r12,33
80002132:	f0 1f 00 02 	mcall	80002138 <board_init+0x2c>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002136:	d8 02       	popm	pc
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	21 3c       	sub	r12,19

8000213c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000213c:	f8 08 16 05 	lsr	r8,r12,0x5
80002140:	a9 68       	lsl	r8,0x8
80002142:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002146:	16 99       	mov	r9,r11
80002148:	e2 19 00 04 	andl	r9,0x4,COH
8000214c:	c0 70       	breq	8000215a <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
8000214e:	30 19       	mov	r9,1
80002150:	f2 0c 09 49 	lsl	r9,r9,r12
80002154:	f1 49 00 74 	st.w	r8[116],r9
80002158:	c0 68       	rjmp	80002164 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000215a:	30 19       	mov	r9,1
8000215c:	f2 0c 09 49 	lsl	r9,r9,r12
80002160:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002164:	16 99       	mov	r9,r11
80002166:	e2 19 00 80 	andl	r9,0x80,COH
8000216a:	c2 40       	breq	800021b2 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
8000216c:	16 99       	mov	r9,r11
8000216e:	e2 19 01 80 	andl	r9,0x180,COH
80002172:	c0 90       	breq	80002184 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002174:	30 19       	mov	r9,1
80002176:	f2 0c 09 49 	lsl	r9,r9,r12
8000217a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000217e:	f1 49 00 b8 	st.w	r8[184],r9
80002182:	c1 88       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002184:	16 99       	mov	r9,r11
80002186:	e2 19 02 80 	andl	r9,0x280,COH
8000218a:	c0 90       	breq	8000219c <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000218c:	30 19       	mov	r9,1
8000218e:	f2 0c 09 49 	lsl	r9,r9,r12
80002192:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002196:	f1 49 00 b8 	st.w	r8[184],r9
8000219a:	c0 c8       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
8000219c:	16 99       	mov	r9,r11
8000219e:	e2 19 03 80 	andl	r9,0x380,COH
800021a2:	c0 80       	breq	800021b2 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800021a4:	30 19       	mov	r9,1
800021a6:	f2 0c 09 49 	lsl	r9,r9,r12
800021aa:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800021ae:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800021b2:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021b6:	c1 50       	breq	800021e0 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
800021b8:	e2 1b 00 02 	andl	r11,0x2,COH
800021bc:	c0 70       	breq	800021ca <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800021be:	30 19       	mov	r9,1
800021c0:	f2 0c 09 49 	lsl	r9,r9,r12
800021c4:	f1 49 00 54 	st.w	r8[84],r9
800021c8:	c0 68       	rjmp	800021d4 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 49 	lsl	r9,r9,r12
800021d0:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800021d4:	30 19       	mov	r9,1
800021d6:	f2 0c 09 49 	lsl	r9,r9,r12
800021da:	f1 49 00 44 	st.w	r8[68],r9
800021de:	c0 68       	rjmp	800021ea <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800021e0:	30 19       	mov	r9,1
800021e2:	f2 0c 09 49 	lsl	r9,r9,r12
800021e6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800021ea:	30 19       	mov	r9,1
800021ec:	f2 0c 09 4c 	lsl	r12,r9,r12
800021f0:	91 1c       	st.w	r8[0x4],r12
}
800021f2:	5e fc       	retal	r12

800021f4 <gpio_toggle_pin>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_toggle_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021f4:	f8 08 16 05 	lsr	r8,r12,0x5
800021f8:	a9 68       	lsl	r8,0x8
800021fa:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800021fe:	30 19       	mov	r9,1
80002200:	f2 0c 09 4c 	lsl	r12,r9,r12
80002204:	f1 4c 00 5c 	st.w	r8[92],r12
}
80002208:	5e fc       	retal	r12

8000220a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000220a:	c0 08       	rjmp	8000220a <_unhandled_interrupt>

8000220c <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000220c:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002210:	48 99       	lddpc	r9,80002234 <INTC_register_interrupt+0x28>
80002212:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002216:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000221a:	72 19       	ld.w	r9,r9[0x4]
8000221c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002220:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80002224:	48 59       	lddpc	r9,80002238 <INTC_register_interrupt+0x2c>
80002226:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000222a:	fe 79 08 00 	mov	r9,-63488
8000222e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002232:	5e fc       	retal	r12
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	5e 18       	retne	r8
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	5d 3c       	musfr	r12

8000223c <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
8000223c:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000223e:	49 18       	lddpc	r8,80002280 <INTC_init_interrupts+0x44>
80002240:	e3 b8 00 01 	mtsr	0x4,r8
80002244:	49 0e       	lddpc	lr,80002284 <INTC_init_interrupts+0x48>
80002246:	30 07       	mov	r7,0
80002248:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000224a:	49 0c       	lddpc	r12,80002288 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000224c:	49 08       	lddpc	r8,8000228c <INTC_init_interrupts+0x50>
8000224e:	70 05       	ld.w	r5,r8[0x0]
80002250:	fe 76 08 00 	mov	r6,-63488
80002254:	c1 08       	rjmp	80002274 <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002256:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002258:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000225a:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000225c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002260:	2f f8       	sub	r8,-1
80002262:	10 3a       	cp.w	r10,r8
80002264:	fe 9b ff fc 	brhi	8000225c <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002268:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000226c:	2f f7       	sub	r7,-1
8000226e:	2f 8e       	sub	lr,-8
80002270:	59 e7       	cp.w	r7,30
80002272:	c0 50       	breq	8000227c <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002274:	7c 08       	ld.w	r8,lr[0x0]
80002276:	58 08       	cp.w	r8,0
80002278:	ce f1       	brne	80002256 <INTC_init_interrupts+0x1a>
8000227a:	cf 7b       	rjmp	80002268 <INTC_init_interrupts+0x2c>
8000227c:	d8 22       	popm	r4-r7,pc
8000227e:	00 00       	add	r0,r0
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	5c 00       	acr	r0
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	5e 18       	retne	r8
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	22 0a       	sub	r10,32
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	5d 3c       	musfr	r12

80002290 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002290:	fe 78 08 00 	mov	r8,-63488
80002294:	e0 69 00 83 	mov	r9,131
80002298:	f2 0c 01 0c 	sub	r12,r9,r12
8000229c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022a0:	f2 ca ff c0 	sub	r10,r9,-64
800022a4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022a8:	58 08       	cp.w	r8,0
800022aa:	c0 21       	brne	800022ae <_get_interrupt_handler+0x1e>
800022ac:	5e fd       	retal	0
800022ae:	f0 08 12 00 	clz	r8,r8
800022b2:	48 5a       	lddpc	r10,800022c4 <_get_interrupt_handler+0x34>
800022b4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800022b8:	f0 08 11 1f 	rsub	r8,r8,31
800022bc:	72 19       	ld.w	r9,r9[0x4]
800022be:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800022c2:	5e fc       	retal	r12
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	5e 18       	retne	r8

800022c8 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800022c8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800022ca:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800022ce:	99 a8       	st.w	r12[0x28],r8
}
800022d0:	5e fc       	retal	r12
800022d2:	d7 03       	nop

800022d4 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800022d4:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800022d6:	ec 5b bb 9f 	cp.w	r11,899999
800022da:	e0 8b 00 04 	brhi	800022e2 <pm_enable_osc0_crystal+0xe>
800022de:	30 4b       	mov	r11,4
800022e0:	c1 38       	rjmp	80002306 <pm_enable_osc0_crystal+0x32>
800022e2:	e0 68 c6 bf 	mov	r8,50879
800022e6:	ea 18 00 2d 	orh	r8,0x2d
800022ea:	10 3b       	cp.w	r11,r8
800022ec:	e0 8b 00 04 	brhi	800022f4 <pm_enable_osc0_crystal+0x20>
800022f0:	30 5b       	mov	r11,5
800022f2:	c0 a8       	rjmp	80002306 <pm_enable_osc0_crystal+0x32>
800022f4:	e0 68 12 00 	mov	r8,4608
800022f8:	ea 18 00 7a 	orh	r8,0x7a
800022fc:	10 3b       	cp.w	r11,r8
800022fe:	f9 bb 03 06 	movlo	r11,6
80002302:	f9 bb 02 07 	movhs	r11,7
80002306:	f0 1f 00 02 	mcall	8000230c <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000230a:	d8 02       	popm	pc
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	22 c8       	sub	r8,44

80002310 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002310:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002312:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002316:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002318:	78 08       	ld.w	r8,r12[0x0]
8000231a:	a3 a8       	sbr	r8,0x2
8000231c:	99 08       	st.w	r12[0x0],r8
}
8000231e:	5e fc       	retal	r12

80002320 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002320:	79 58       	ld.w	r8,r12[0x54]
80002322:	e2 18 00 80 	andl	r8,0x80,COH
80002326:	cf d0       	breq	80002320 <pm_wait_for_clk0_ready>
}
80002328:	5e fc       	retal	r12
8000232a:	d7 03       	nop

8000232c <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000232c:	eb cd 40 80 	pushm	r7,lr
80002330:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002332:	f0 1f 00 04 	mcall	80002340 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002336:	0e 9c       	mov	r12,r7
80002338:	f0 1f 00 03 	mcall	80002344 <pm_enable_clk0+0x18>
}
8000233c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	23 10       	sub	r0,49
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	23 20       	sub	r0,50

80002348 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002348:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000234a:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000234e:	99 08       	st.w	r12[0x0],r8
}
80002350:	5e fc       	retal	r12
80002352:	d7 03       	nop

80002354 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002354:	eb cd 40 c0 	pushm	r6-r7,lr
80002358:	18 97       	mov	r7,r12
8000235a:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
8000235c:	f0 1f 00 06 	mcall	80002374 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002360:	0c 9b       	mov	r11,r6
80002362:	0e 9c       	mov	r12,r7
80002364:	f0 1f 00 05 	mcall	80002378 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002368:	30 1b       	mov	r11,1
8000236a:	0e 9c       	mov	r12,r7
8000236c:	f0 1f 00 04 	mcall	8000237c <pm_switch_to_osc0+0x28>
}
80002370:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	22 d4       	sub	r4,45
80002378:	80 00       	ld.sh	r0,r0[0x0]
8000237a:	23 2c       	sub	r12,50
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	23 48       	sub	r8,52

80002380 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3C device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002380:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002382:	58 0c       	cp.w	r12,0
80002384:	c0 40       	breq	8000238c <pcl_switch_to_osc+0xc>
80002386:	fe 7c d8 f0 	mov	r12,-10000
8000238a:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
8000238c:	fe 7c 0c 00 	mov	r12,-62464
80002390:	f0 1f 00 02 	mcall	80002398 <pcl_switch_to_osc+0x18>
80002394:	d8 0a       	popm	pc,r12=0
80002396:	00 00       	add	r0,r0
80002398:	80 00       	ld.sh	r0,r0[0x0]
8000239a:	23 54       	sub	r4,53

8000239c <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
8000239c:	5e ff       	retal	1

8000239e <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
8000239e:	5e fd       	retal	0

800023a0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800023a0:	fe 68 00 00 	mov	r8,-131072
800023a4:	70 09       	ld.w	r9,r8[0x0]
800023a6:	a7 d9       	cbr	r9,0x7
800023a8:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023aa:	70 09       	ld.w	r9,r8[0x0]
800023ac:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023b0:	e0 19 ff 80 	andl	r9,0xff80
800023b4:	f9 e9 10 09 	or	r9,r12,r9
800023b8:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023ba:	70 09       	ld.w	r9,r8[0x0]
800023bc:	a7 b9       	sbr	r9,0x7
800023be:	91 09       	st.w	r8[0x0],r9
}
800023c0:	5e fc       	retal	r12

800023c2 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023c2:	fe 68 00 00 	mov	r8,-131072
800023c6:	70 0c       	ld.w	r12,r8[0x0]
}
800023c8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023cc:	5e fc       	retal	r12

800023ce <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023ce:	fe 68 00 00 	mov	r8,-131072
800023d2:	70 8c       	ld.w	r12,r8[0x20]
}
800023d4:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800023d8:	5e fc       	retal	r12

800023da <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800023da:	fe 68 00 00 	mov	r8,-131072
800023de:	70 8c       	ld.w	r12,r8[0x20]
}
800023e0:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800023e4:	5e fc       	retal	r12
800023e6:	d7 03       	nop

800023e8 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800023e8:	48 28       	lddpc	r8,800023f0 <udd_set_setup_payload+0x8>
800023ea:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800023ec:	b0 6b       	st.h	r8[0xc],r11
}
800023ee:	5e fc       	retal	r12
800023f0:	00 00       	add	r0,r0
800023f2:	0a 00       	add	r0,r5

800023f4 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800023f4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800023f8:	a3 68       	lsl	r8,0x2
800023fa:	e0 38 fe 40 	sub	r8,130624
800023fe:	70 0c       	ld.w	r12,r8[0x0]
}
80002400:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002404:	5e fc       	retal	r12
80002406:	d7 03       	nop

80002408 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002408:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
8000240c:	30 38       	mov	r8,3
8000240e:	f0 0c 18 00 	cp.b	r12,r8
80002412:	e0 8b 00 35 	brhi	8000247c <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002416:	18 99       	mov	r9,r12
80002418:	f8 c8 00 01 	sub	r8,r12,1
8000241c:	a5 68       	lsl	r8,0x4
8000241e:	49 9a       	lddpc	r10,80002480 <udd_ep_set_halt+0x78>
80002420:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
80002424:	70 0a       	ld.w	r10,r8[0x0]
80002426:	58 0a       	cp.w	r10,0
80002428:	c2 a5       	brlt	8000247c <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
8000242a:	a3 69       	lsl	r9,0x2
8000242c:	fe 6b 01 30 	mov	r11,-130768
80002430:	f2 0b 00 0a 	add	r10,r9,r11
80002434:	74 0a       	ld.w	r10,r10[0x0]
80002436:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
8000243a:	c1 10       	breq	8000245c <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
8000243c:	70 0b       	ld.w	r11,r8[0x0]
8000243e:	30 1a       	mov	r10,1
80002440:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002444:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
80002446:	e0 39 fe 10 	sub	r9,130576
8000244a:	e0 68 10 00 	mov	r8,4096
8000244e:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
80002450:	f0 0c 09 4c 	lsl	r12,r8,r12
80002454:	fe 69 00 00 	mov	r9,-131072
80002458:	93 6c       	st.w	r9[0x18],r12
8000245a:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
8000245c:	fe 6a 01 00 	mov	r10,-130816
80002460:	f2 0a 00 08 	add	r8,r9,r10
80002464:	70 0a       	ld.w	r10,r8[0x0]
80002466:	a9 da       	cbr	r10,0x9
80002468:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
8000246a:	e0 39 fe 10 	sub	r9,130576
8000246e:	e8 68 00 00 	mov	r8,524288
80002472:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80002474:	e4 68 00 00 	mov	r8,262144
80002478:	93 08       	st.w	r9[0x0],r8
8000247a:	5e ff       	retal	1
8000247c:	5e fd       	retal	0
8000247e:	00 00       	add	r0,r0
80002480:	00 00       	add	r0,r0
80002482:	07 18       	ld.sh	r8,r3++

80002484 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002484:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002486:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000248a:	30 38       	mov	r8,3
8000248c:	f0 0c 18 00 	cp.b	r12,r8
80002490:	e0 88 00 03 	brls	80002496 <udd_ep_clear_halt+0x12>
80002494:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002496:	f8 c8 00 01 	sub	r8,r12,1
8000249a:	a5 68       	lsl	r8,0x4
8000249c:	49 69       	lddpc	r9,800024f4 <udd_ep_clear_halt+0x70>
8000249e:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800024a2:	a3 6c       	lsl	r12,0x2
800024a4:	fe 6a 01 c0 	mov	r10,-130624
800024a8:	f8 0a 00 09 	add	r9,r12,r10
800024ac:	72 09       	ld.w	r9,r9[0x0]
800024ae:	e6 19 00 08 	andh	r9,0x8,COH
800024b2:	c0 51       	brne	800024bc <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024b4:	70 09       	ld.w	r9,r8[0x0]
800024b6:	e6 19 10 00 	andh	r9,0x1000,COH
800024ba:	c1 c0       	breq	800024f2 <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024bc:	70 09       	ld.w	r9,r8[0x0]
800024be:	30 0a       	mov	r10,0
800024c0:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024c4:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024c6:	fe 6a 02 20 	mov	r10,-130528
800024ca:	f8 0a 00 09 	add	r9,r12,r10
800024ce:	e8 6a 00 00 	mov	r10,524288
800024d2:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
800024d4:	e0 3c ff 00 	sub	r12,130816
800024d8:	78 09       	ld.w	r9,r12[0x0]
800024da:	a9 b9       	sbr	r9,0x9
800024dc:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800024de:	70 09       	ld.w	r9,r8[0x0]
800024e0:	58 09       	cp.w	r9,0
800024e2:	c0 84       	brge	800024f2 <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
800024e4:	30 0a       	mov	r10,0
800024e6:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800024ea:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800024ec:	70 38       	ld.w	r8,r8[0xc]
800024ee:	5d 18       	icall	r8
800024f0:	da 0a       	popm	pc,r12=1
800024f2:	da 0a       	popm	pc,r12=1
800024f4:	00 00       	add	r0,r0
800024f6:	07 18       	ld.sh	r8,r3++

800024f8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800024f8:	30 59       	mov	r9,5
800024fa:	48 58       	lddpc	r8,8000250c <udd_ctrl_stall_data+0x14>
800024fc:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
800024fe:	e8 69 00 00 	mov	r9,524288
80002502:	fe 68 01 f0 	mov	r8,-130576
80002506:	91 09       	st.w	r8[0x0],r9
}
80002508:	5e fc       	retal	r12
8000250a:	00 00       	add	r0,r0
8000250c:	00 00       	add	r0,r0
8000250e:	07 4c       	ld.w	r12,--r3

80002510 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002510:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002512:	48 48       	lddpc	r8,80002520 <udd_ctrl_endofrequest+0x10>
80002514:	70 48       	ld.w	r8,r8[0x10]
80002516:	58 08       	cp.w	r8,0
80002518:	c0 20       	breq	8000251c <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
8000251a:	5d 18       	icall	r8
8000251c:	d8 02       	popm	pc
8000251e:	00 00       	add	r0,r0
80002520:	00 00       	add	r0,r0
80002522:	0a 00       	add	r0,r5

80002524 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002524:	d4 01       	pushm	lr
80002526:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002528:	78 08       	ld.w	r8,r12[0x0]
8000252a:	58 08       	cp.w	r8,0
8000252c:	c0 b4       	brge	80002542 <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
8000252e:	30 0a       	mov	r10,0
80002530:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002534:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
80002536:	78 38       	ld.w	r8,r12[0xc]
80002538:	58 08       	cp.w	r8,0
8000253a:	c0 40       	breq	80002542 <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000253c:	78 2b       	ld.w	r11,r12[0x8]
8000253e:	12 9c       	mov	r12,r9
80002540:	5d 18       	icall	r8
80002542:	d8 02       	popm	pc

80002544 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80002544:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002546:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000254a:	20 18       	sub	r8,1
8000254c:	a5 68       	lsl	r8,0x4
8000254e:	30 1b       	mov	r11,1
80002550:	48 3c       	lddpc	r12,8000255c <udd_ep_abort_job+0x18>
80002552:	10 0c       	add	r12,r8
80002554:	f0 1f 00 03 	mcall	80002560 <udd_ep_abort_job+0x1c>
}
80002558:	d8 02       	popm	pc
8000255a:	00 00       	add	r0,r0
8000255c:	00 00       	add	r0,r0
8000255e:	07 18       	ld.sh	r8,r3++
80002560:	80 00       	ld.sh	r0,r0[0x0]
80002562:	25 24       	sub	r4,82

80002564 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002564:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
80002566:	fe 69 00 00 	mov	r9,-131072
8000256a:	72 7b       	ld.w	r11,r9[0x1c]
8000256c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002570:	30 1a       	mov	r10,1
80002572:	f4 08 09 4a 	lsl	r10,r10,r8
80002576:	5c da       	com	r10
80002578:	16 6a       	and	r10,r11
8000257a:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
8000257c:	a3 68       	lsl	r8,0x2
8000257e:	e0 38 ff 00 	sub	r8,130816
80002582:	70 09       	ld.w	r9,r8[0x0]
80002584:	a1 d9       	cbr	r9,0x1
80002586:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80002588:	f0 1f 00 02 	mcall	80002590 <udd_ep_free+0x2c>
}
8000258c:	d8 02       	popm	pc
8000258e:	00 00       	add	r0,r0
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	25 44       	sub	r4,84

80002594 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002594:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
80002598:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000259c:	30 37       	mov	r7,3
8000259e:	ee 0e 18 00 	cp.b	lr,r7
800025a2:	e0 8b 00 99 	brhi	800026d4 <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025a6:	fe 67 00 00 	mov	r7,-131072
800025aa:	6e 76       	ld.w	r6,r7[0x1c]
800025ac:	1c 95       	mov	r5,lr
800025ae:	30 17       	mov	r7,1
800025b0:	ee 0e 09 47 	lsl	r7,r7,lr
800025b4:	0c 67       	and	r7,r6
800025b6:	e0 80 00 8f 	breq	800026d4 <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
800025ba:	fc 06 15 02 	lsl	r6,lr,0x2
800025be:	fe 64 01 c0 	mov	r4,-130624
800025c2:	ec 04 00 07 	add	r7,r6,r4
800025c6:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025c8:	e6 17 00 08 	andh	r7,0x8,COH
800025cc:	e0 81 00 84 	brne	800026d4 <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800025d0:	fc c7 00 01 	sub	r7,lr,1
800025d4:	a5 67       	lsl	r7,0x4
800025d6:	4c 14       	lddpc	r4,800026d8 <udd_ep_run+0x144>
800025d8:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800025dc:	6e 04       	ld.w	r4,r7[0x0]
800025de:	e6 14 10 00 	andh	r4,0x1000,COH
800025e2:	c7 91       	brne	800026d4 <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025e4:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
800025e8:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800025ea:	6e 03       	ld.w	r3,r7[0x0]
800025ec:	58 03       	cp.w	r3,0
800025ee:	c0 54       	brge	800025f8 <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800025f0:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
800025f4:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
800025f8:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
800025fc:	6e 03       	ld.w	r3,r7[0x0]
800025fe:	30 12       	mov	r2,1
80002600:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
80002604:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002606:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
8000260a:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
8000260c:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
8000260e:	6e 08       	ld.w	r8,r7[0x0]
80002610:	30 04       	mov	r4,0
80002612:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
80002616:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002618:	e0 49 ff ff 	cp.w	r9,65535
8000261c:	e0 88 00 07 	brls	8000262a <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002620:	e0 78 00 00 	mov	r8,65536
80002624:	8f 28       	st.w	r7[0x8],r8
80002626:	08 99       	mov	r9,r4
80002628:	c3 58       	rjmp	80002692 <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
8000262a:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
8000262c:	58 0c       	cp.w	r12,0
8000262e:	c3 20       	breq	80002692 <udd_ep_run+0xfe>
			if (buf_size==0) {
80002630:	58 09       	cp.w	r9,0
80002632:	c1 71       	brne	80002660 <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
80002634:	6e 08       	ld.w	r8,r7[0x0]
80002636:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
80002638:	bd b8       	sbr	r8,0x1d
8000263a:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
8000263e:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002640:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002644:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
80002646:	20 15       	sub	r5,1
80002648:	fc 19 02 00 	movh	r9,0x200
8000264c:	f2 05 09 49 	lsl	r9,r9,r5
80002650:	fe 68 00 00 	mov	r8,-131072
80002654:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
80002656:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002658:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
8000265c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002660:	e0 36 ff 00 	sub	r6,130816
80002664:	6c 08       	ld.w	r8,r6[0x0]
80002666:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
8000266a:	30 86       	mov	r6,8
8000266c:	ec 08 09 48 	lsl	r8,r6,r8
80002670:	20 18       	sub	r8,1
80002672:	12 68       	and	r8,r9
80002674:	c0 b0       	breq	8000268a <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
80002676:	6e 08       	ld.w	r8,r7[0x0]
80002678:	30 0b       	mov	r11,0
8000267a:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000267e:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002680:	a5 6e       	lsl	lr,0x4
80002682:	e0 3e fd 00 	sub	lr,130304
80002686:	9d 1a       	st.w	lr[0x4],r10
80002688:	c1 18       	rjmp	800026aa <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
8000268a:	6e 08       	ld.w	r8,r7[0x0]
8000268c:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002690:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002692:	a5 6e       	lsl	lr,0x4
80002694:	e0 3e fd 00 	sub	lr,130304
80002698:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
8000269a:	58 0b       	cp.w	r11,0
8000269c:	c0 31       	brne	800026a2 <udd_ep_run+0x10e>
8000269e:	30 08       	mov	r8,0
800026a0:	c0 68       	rjmp	800026ac <udd_ep_run+0x118>
		if (b_dir_in) {
800026a2:	58 0c       	cp.w	r12,0
800026a4:	c0 31       	brne	800026aa <udd_ep_run+0x116>
800026a6:	31 48       	mov	r8,20
800026a8:	c0 28       	rjmp	800026ac <udd_ep_run+0x118>
800026aa:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026ac:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026b0:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026b4:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026b6:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026ba:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026bc:	20 15       	sub	r5,1
800026be:	fc 19 02 00 	movh	r9,0x200
800026c2:	f2 05 09 45 	lsl	r5,r9,r5
800026c6:	fe 69 00 00 	mov	r9,-131072
800026ca:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026cc:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800026d0:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
800026d4:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800026d8:	00 00       	add	r0,r0
800026da:	07 18       	ld.sh	r8,r3++

800026dc <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800026dc:	58 0c       	cp.w	r12,0
800026de:	c1 11       	brne	80002700 <udd_sleep_mode+0x24>
800026e0:	49 18       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
800026e2:	11 89       	ld.ub	r9,r8[0x0]
800026e4:	30 08       	mov	r8,0
800026e6:	f0 09 18 00 	cp.b	r9,r8
800026ea:	c1 a0       	breq	8000271e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026ec:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800026f0:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800026f2:	48 e8       	lddpc	r8,80002728 <udd_sleep_mode+0x4c>
800026f4:	11 9a       	ld.ub	r10,r8[0x1]
800026f6:	2f fa       	sub	r10,-1
800026f8:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026fa:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800026fe:	c1 08       	rjmp	8000271e <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002700:	48 98       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
80002702:	11 89       	ld.ub	r9,r8[0x0]
80002704:	30 08       	mov	r8,0
80002706:	f0 09 18 00 	cp.b	r9,r8
8000270a:	c0 a1       	brne	8000271e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000270c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002710:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002712:	48 68       	lddpc	r8,80002728 <udd_sleep_mode+0x4c>
80002714:	11 9a       	ld.ub	r10,r8[0x1]
80002716:	20 1a       	sub	r10,1
80002718:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000271a:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000271e:	48 28       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
80002720:	b0 8c       	st.b	r8[0x0],r12
}
80002722:	5e fc       	retal	r12
80002724:	00 00       	add	r0,r0
80002726:	07 48       	ld.w	r8,--r3
80002728:	00 00       	add	r0,r0
8000272a:	0a 18       	sub	r8,r5

8000272c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
8000272c:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000272e:	fe 68 00 00 	mov	r8,-131072
80002732:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002736:	af c9       	cbr	r9,0xe
80002738:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
8000273c:	70 09       	ld.w	r9,r8[0x0]
8000273e:	a9 a9       	sbr	r9,0x8
80002740:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002742:	30 0c       	mov	r12,0
80002744:	f0 1f 00 02 	mcall	8000274c <udd_detach+0x20>
}
80002748:	d8 02       	popm	pc
8000274a:	00 00       	add	r0,r0
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	26 dc       	sub	r12,109

80002750 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002750:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002754:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002756:	30 1a       	mov	r10,1
80002758:	fe 69 02 20 	mov	r9,-130528
8000275c:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000275e:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002762:	30 29       	mov	r9,2
80002764:	fe 68 01 60 	mov	r8,-130720
80002768:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000276a:	48 59       	lddpc	r9,8000277c <udd_ctrl_init+0x2c>
8000276c:	30 08       	mov	r8,0
8000276e:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002770:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002772:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002774:	48 39       	lddpc	r9,80002780 <udd_ctrl_init+0x30>
80002776:	93 08       	st.w	r9[0x0],r8
}
80002778:	5e fc       	retal	r12
8000277a:	00 00       	add	r0,r0
8000277c:	00 00       	add	r0,r0
8000277e:	0a 00       	add	r0,r5
80002780:	00 00       	add	r0,r0
80002782:	07 4c       	ld.w	r12,--r3

80002784 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002784:	30 39       	mov	r9,3
80002786:	48 a8       	lddpc	r8,800027ac <udd_ctrl_send_zlp_in+0x28>
80002788:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000278a:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000278e:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002790:	fe 6a 01 60 	mov	r10,-130720
80002794:	30 19       	mov	r9,1
80002796:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80002798:	fe 68 01 f0 	mov	r8,-130576
8000279c:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000279e:	30 89       	mov	r9,8
800027a0:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027a2:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027a4:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800027a8:	5e fc       	retal	r12
800027aa:	00 00       	add	r0,r0
800027ac:	00 00       	add	r0,r0
800027ae:	07 4c       	ld.w	r12,--r3

800027b0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027b0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027b4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027b8:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027ba:	30 1a       	mov	r10,1
800027bc:	fe 69 02 20 	mov	r9,-130528
800027c0:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027c2:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027c6:	4c 38       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
800027c8:	70 08       	ld.w	r8,r8[0x0]
800027ca:	58 38       	cp.w	r8,3
800027cc:	c0 71       	brne	800027da <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
800027ce:	f0 1f 00 42 	mcall	800028d4 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
800027d2:	f0 1f 00 42 	mcall	800028d8 <udd_ctrl_in_sent+0x128>
		return;
800027d6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800027da:	4c 18       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
800027dc:	90 68       	ld.sh	r8,r8[0xc]
800027de:	4c 19       	lddpc	r9,800028e0 <udd_ctrl_in_sent+0x130>
800027e0:	92 07       	ld.sh	r7,r9[0x0]
800027e2:	f0 07 01 07 	sub	r7,r8,r7
800027e6:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
800027e8:	c3 b1       	brne	8000285e <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
800027ea:	4b f9       	lddpc	r9,800028e4 <udd_ctrl_in_sent+0x134>
800027ec:	13 8a       	ld.ub	r10,r9[0x0]
800027ee:	30 09       	mov	r9,0
800027f0:	f2 0a 18 00 	cp.b	r10,r9
800027f4:	c1 21       	brne	80002818 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800027f6:	30 49       	mov	r9,4
800027f8:	4b 68       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
800027fa:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027fc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002800:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002802:	31 08       	mov	r8,16
80002804:	fe 6a 01 60 	mov	r10,-130720
80002808:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
8000280a:	fe 6a 01 f0 	mov	r10,-130576
8000280e:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002810:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002814:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002818:	4b 19       	lddpc	r9,800028dc <udd_ctrl_in_sent+0x12c>
8000281a:	92 b9       	ld.uh	r9,r9[0x6]
8000281c:	5c 78       	castu.h	r8
8000281e:	4b 3a       	lddpc	r10,800028e8 <udd_ctrl_in_sent+0x138>
80002820:	94 8a       	ld.uh	r10,r10[0x0]
80002822:	14 08       	add	r8,r10
80002824:	10 39       	cp.w	r9,r8
80002826:	e0 89 00 08 	brgt	80002836 <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
8000282a:	4a d8       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
8000282c:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000282e:	58 0c       	cp.w	r12,0
80002830:	c0 30       	breq	80002836 <udd_ctrl_in_sent+0x86>
80002832:	5d 1c       	icall	r12
80002834:	c0 51       	brne	8000283e <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002836:	30 09       	mov	r9,0
80002838:	4a b8       	lddpc	r8,800028e4 <udd_ctrl_in_sent+0x134>
8000283a:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000283c:	c1 18       	rjmp	8000285e <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000283e:	4a b9       	lddpc	r9,800028e8 <udd_ctrl_in_sent+0x138>
80002840:	4a 88       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
80002842:	90 0b       	ld.sh	r11,r8[0x0]
80002844:	92 0a       	ld.sh	r10,r9[0x0]
80002846:	f6 0a 00 0a 	add	r10,r11,r10
8000284a:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
8000284c:	30 09       	mov	r9,0
8000284e:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002850:	4a 38       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
80002852:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002854:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002858:	5f 09       	sreq	r9
8000285a:	4a 38       	lddpc	r8,800028e4 <udd_ctrl_in_sent+0x134>
8000285c:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000285e:	4a 08       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
80002860:	70 2a       	ld.w	r10,r8[0x8]
80002862:	4a 08       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
80002864:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002866:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000286a:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000286c:	fe 68 01 30 	mov	r8,-130768
80002870:	70 08       	ld.w	r8,r8[0x0]
80002872:	e2 18 00 02 	andl	r8,0x2,COH
80002876:	c0 91       	brne	80002888 <udd_ctrl_in_sent+0xd8>
80002878:	34 08       	mov	r8,64
8000287a:	f0 07 19 00 	cp.h	r7,r8
8000287e:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002882:	58 07       	cp.w	r7,0
80002884:	c0 91       	brne	80002896 <udd_ctrl_in_sent+0xe6>
80002886:	c1 48       	rjmp	800028ae <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002888:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000288c:	30 49       	mov	r9,4
8000288e:	49 18       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
80002890:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
80002892:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002896:	5c 79       	castu.h	r9
80002898:	f4 09 00 09 	add	r9,r10,r9
8000289c:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028a0:	13 3a       	ld.ub	r10,r9++
800028a2:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028a4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028a8:	ee 0a 19 00 	cp.h	r10,r7
800028ac:	cf a3       	brcs	800028a0 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028ae:	48 d8       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
800028b0:	90 09       	ld.sh	r9,r8[0x0]
800028b2:	f2 07 00 07 	add	r7,r9,r7
800028b6:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028b8:	30 18       	mov	r8,1
800028ba:	fe 69 01 60 	mov	r9,-130720
800028be:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028c0:	fe 69 01 f0 	mov	r9,-130576
800028c4:	93 08       	st.w	r9[0x0],r8
800028c6:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
800028ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800028ce:	00 00       	add	r0,r0
800028d0:	00 00       	add	r0,r0
800028d2:	07 4c       	ld.w	r12,--r3
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	25 10       	sub	r0,81
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	27 50       	sub	r0,117
800028dc:	00 00       	add	r0,r0
800028de:	0a 00       	add	r0,r5
800028e0:	00 00       	add	r0,r0
800028e2:	07 4a       	ld.w	r10,--r3
800028e4:	00 00       	add	r0,r0
800028e6:	07 50       	ld.sh	r0,--r3
800028e8:	00 00       	add	r0,r0
800028ea:	07 14       	ld.sh	r4,r3++

800028ec <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800028ec:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
800028f0:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
800028f4:	30 39       	mov	r9,3
800028f6:	f2 08 18 00 	cp.b	r8,r9
800028fa:	e0 8b 00 88 	brhi	80002a0a <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
800028fe:	fe 69 00 00 	mov	r9,-131072
80002902:	72 79       	ld.w	r9,r9[0x1c]
80002904:	30 17       	mov	r7,1
80002906:	ee 08 09 47 	lsl	r7,r7,r8
8000290a:	ef e9 00 09 	and	r9,r7,r9
8000290e:	c7 e1       	brne	80002a0a <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002910:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80002914:	58 19       	cp.w	r9,1
80002916:	c7 a5       	brlt	80002a0a <udd_ep_alloc+0x11e>
80002918:	58 29       	cp.w	r9,2
8000291a:	e0 8a 00 06 	brle	80002926 <udd_ep_alloc+0x3a>
8000291e:	58 39       	cp.w	r9,3
80002920:	c7 51       	brne	80002a0a <udd_ep_alloc+0x11e>
80002922:	30 06       	mov	r6,0
80002924:	c0 28       	rjmp	80002928 <udd_ep_alloc+0x3c>
80002926:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002928:	f0 09 15 02 	lsl	r9,r8,0x2
8000292c:	e0 39 ff 00 	sub	r9,130816
80002930:	72 0e       	ld.w	lr,r9[0x0]
80002932:	5c 7a       	castu.h	r10
80002934:	30 85       	mov	r5,8
80002936:	f4 05 0c 4a 	max	r10,r10,r5
8000293a:	e0 65 04 00 	mov	r5,1024
8000293e:	f4 05 0d 4a 	min	r10,r10,r5
80002942:	a1 7a       	lsl	r10,0x1
80002944:	20 1a       	sub	r10,1
80002946:	f4 0a 12 00 	clz	r10,r10
8000294a:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
8000294e:	ab 7b       	lsl	r11,0xb
80002950:	e2 1b 18 00 	andl	r11,0x1800,COH
80002954:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80002958:	f4 0b 11 1c 	rsub	r11,r10,28
8000295c:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
80002960:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
80002964:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002968:	1c 9a       	mov	r10,lr
8000296a:	e0 1a e6 83 	andl	r10,0xe683
8000296e:	f7 ea 10 0a 	or	r10,r11,r10
80002972:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002974:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002976:	30 29       	mov	r9,2
80002978:	f2 08 18 00 	cp.b	r8,r9
8000297c:	e0 8b 00 1d 	brhi	800029b6 <udd_ep_alloc+0xca>
80002980:	fe 6a 01 0c 	mov	r10,-130804
80002984:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
80002986:	fe 6c 00 00 	mov	r12,-131072
8000298a:	30 16       	mov	r6,1
8000298c:	78 7e       	ld.w	lr,r12[0x1c]
8000298e:	ec 09 09 4b 	lsl	r11,r6,r9
80002992:	f7 ee 00 0e 	and	lr,r11,lr
80002996:	c0 b0       	breq	800029ac <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
80002998:	f7 e7 10 07 	or	r7,r11,r7
8000299c:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
8000299e:	78 7e       	ld.w	lr,r12[0x1c]
800029a0:	5c db       	com	r11
800029a2:	1c 6b       	and	r11,lr
800029a4:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029a6:	74 0b       	ld.w	r11,r10[0x0]
800029a8:	a1 db       	cbr	r11,0x1
800029aa:	95 0b       	st.w	r10[0x0],r11
800029ac:	20 19       	sub	r9,1
800029ae:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029b0:	f2 08 18 00 	cp.b	r8,r9
800029b4:	ce c3       	brcs	8000298c <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029b6:	0e 9c       	mov	r12,r7
800029b8:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029ba:	fe 6e 00 00 	mov	lr,-131072
800029be:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029c0:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029c2:	f8 08 08 49 	asr	r9,r12,r8
800029c6:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800029ca:	c1 80       	breq	800029fa <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
800029cc:	f0 0b 15 02 	lsl	r11,r8,0x2
800029d0:	fe 65 01 00 	mov	r5,-130816
800029d4:	f6 05 00 09 	add	r9,r11,r5
800029d8:	72 05       	ld.w	r5,r9[0x0]
800029da:	a1 b5       	sbr	r5,0x1
800029dc:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
800029de:	7c 75       	ld.w	r5,lr[0x1c]
800029e0:	ec 08 09 4a 	lsl	r10,r6,r8
800029e4:	0a 4a       	or	r10,r5
800029e6:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
800029e8:	e0 3b fe d0 	sub	r11,130768
800029ec:	76 0a       	ld.w	r10,r11[0x0]
800029ee:	e6 1a 00 04 	andh	r10,0x4,COH
800029f2:	c0 c0       	breq	80002a0a <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
800029f4:	72 0a       	ld.w	r10,r9[0x0]
800029f6:	a9 ba       	sbr	r10,0x9
800029f8:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029fa:	2f f8       	sub	r8,-1
800029fc:	5c 58       	castu.b	r8
800029fe:	ee 08 18 00 	cp.b	r8,r7
80002a02:	fe 98 ff e0 	brls	800029c2 <udd_ep_alloc+0xd6>
80002a06:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a0a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a0e <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a0e:	fe 68 00 00 	mov	r8,-131072
80002a12:	70 09       	ld.w	r9,r8[0x0]
80002a14:	e0 19 ff 80 	andl	r9,0xff80
80002a18:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a1a:	70 09       	ld.w	r9,r8[0x0]
80002a1c:	a7 b9       	sbr	r9,0x7
80002a1e:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a20:	fe 69 01 00 	mov	r9,-130816
80002a24:	72 0b       	ld.w	r11,r9[0x0]
80002a26:	30 8c       	mov	r12,8
80002a28:	34 0a       	mov	r10,64
80002a2a:	f4 0c 0c 4a 	max	r10,r10,r12
80002a2e:	e0 6c 04 00 	mov	r12,1024
80002a32:	f4 0c 0d 4a 	min	r10,r10,r12
80002a36:	a1 7a       	lsl	r10,0x1
80002a38:	20 1a       	sub	r10,1
80002a3a:	f4 0a 12 00 	clz	r10,r10
80002a3e:	f4 0a 11 1c 	rsub	r10,r10,28
80002a42:	a5 6a       	lsl	r10,0x4
80002a44:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a48:	e0 1b e6 83 	andl	r11,0xe683
80002a4c:	16 4a       	or	r10,r11
80002a4e:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a50:	72 0a       	ld.w	r10,r9[0x0]
80002a52:	a1 ba       	sbr	r10,0x1
80002a54:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a56:	70 79       	ld.w	r9,r8[0x1c]
80002a58:	a1 a9       	sbr	r9,0x0
80002a5a:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a5c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a60:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a62:	fe 69 01 f0 	mov	r9,-130576
80002a66:	30 4b       	mov	r11,4
80002a68:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002a6a:	30 2b       	mov	r11,2
80002a6c:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002a6e:	e0 69 10 00 	mov	r9,4096
80002a72:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002a74:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002a78:	5e fc       	retal	r12
80002a7a:	d7 03       	nop

80002a7c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002a7c:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a80:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002a84:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002a86:	30 1c       	mov	r12,1
80002a88:	f0 1f 00 15 	mcall	80002adc <udd_attach+0x60>
	otg_unfreeze_clock();
80002a8c:	fe 67 00 00 	mov	r7,-131072
80002a90:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a94:	af c8       	cbr	r8,0xe
80002a96:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002a9a:	6e 08       	ld.w	r8,r7[0x0]
80002a9c:	a9 c8       	cbr	r8,0x8
80002a9e:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002aa0:	f0 1f 00 10 	mcall	80002ae0 <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002aa4:	f0 1f 00 10 	mcall	80002ae4 <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002aa8:	f0 1f 00 10 	mcall	80002ae8 <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002aac:	30 8b       	mov	r11,8
80002aae:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002ab0:	30 19       	mov	r9,1
80002ab2:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002ab4:	31 08       	mov	r8,16
80002ab6:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002ab8:	30 4a       	mov	r10,4
80002aba:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002abc:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002abe:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002ac0:	30 2a       	mov	r10,2
80002ac2:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002ac4:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002ac6:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002ac8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002acc:	af a8       	sbr	r8,0xe
80002ace:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ad2:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002ad6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	26 dc       	sub	r12,109
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	39 b0       	mov	r0,-101
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	2a 0e       	sub	lr,-96
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	27 50       	sub	r0,117

80002aec <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002aec:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002af0:	f0 1f 00 39 	mcall	80002bd4 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002af4:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002af8:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002afa:	fe 67 00 00 	mov	r7,-131072
80002afe:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b02:	af d8       	cbr	r8,0xf
80002b04:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b08:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b0c:	30 0a       	mov	r10,0
80002b0e:	e0 6b 02 20 	mov	r11,544
80002b12:	4b 2c       	lddpc	r12,80002bd8 <udd_enable+0xec>
80002b14:	f0 1f 00 32 	mcall	80002bdc <udd_enable+0xf0>
	otg_force_device_mode();
80002b18:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b1c:	b9 b8       	sbr	r8,0x19
80002b1e:	ef 48 08 00 	st.w	r7[2048],r8
80002b22:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b26:	b9 c8       	cbr	r8,0x18
80002b28:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b2c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b30:	ad c8       	cbr	r8,0xc
80002b32:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b36:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b3a:	ad a8       	sbr	r8,0xc
80002b3c:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b40:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b44:	af b8       	sbr	r8,0xf
80002b46:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b4a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b4e:	af c8       	cbr	r8,0xe
80002b50:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b54:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b58:	4a 28       	lddpc	r8,80002be0 <udd_enable+0xf4>
80002b5a:	70 0a       	ld.w	r10,r8[0x0]
80002b5c:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b5e:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b62:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b66:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b68:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002b6a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b6e:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b72:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b74:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002b76:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b7a:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b7e:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002b80:	6e 08       	ld.w	r8,r7[0x0]
80002b82:	ad c8       	cbr	r8,0xc
80002b84:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002b86:	6e 08       	ld.w	r8,r7[0x0]
80002b88:	e8 18 0c 00 	orl	r8,0xc00
80002b8c:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002b8e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b92:	a1 b8       	sbr	r8,0x1
80002b94:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002b98:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b9c:	af a8       	sbr	r8,0xe
80002b9e:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002ba2:	fe 78 0c 00 	mov	r8,-62464
80002ba6:	f0 fa 01 44 	ld.w	r10,r8[324]
80002baa:	30 1b       	mov	r11,1
80002bac:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002bb0:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002bb4:	48 c8       	lddpc	r8,80002be4 <udd_enable+0xf8>
80002bb6:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bb8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bbc:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bbe:	48 b8       	lddpc	r8,80002be8 <udd_enable+0xfc>
80002bc0:	11 ba       	ld.ub	r10,r8[0x3]
80002bc2:	2f fa       	sub	r10,-1
80002bc4:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002bc6:	e3 b9 00 00 	mtsr	0x0,r9
80002bca:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002bce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd2:	00 00       	add	r0,r0
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	32 94       	mov	r4,41
80002bd8:	80 00       	ld.sh	r0,r0[0x0]
80002bda:	2b ec       	sub	r12,-66
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	22 0c       	sub	r12,32
80002be0:	00 00       	add	r0,r0
80002be2:	07 18       	ld.sh	r8,r3++
80002be4:	00 00       	add	r0,r0
80002be6:	07 48       	ld.w	r8,--r3
80002be8:	00 00       	add	r0,r0
80002bea:	0a 18       	sub	r8,r5

80002bec <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002bec:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002bf0:	fe 68 00 00 	mov	r8,-131072
80002bf4:	70 18       	ld.w	r8,r8[0x4]
80002bf6:	e2 18 00 04 	andl	r8,0x4,COH
80002bfa:	c0 f0       	breq	80002c18 <udd_interrupt+0x2c>
		udd_ack_sof();
80002bfc:	fe 68 00 00 	mov	r8,-131072
80002c00:	30 49       	mov	r9,4
80002c02:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c04:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c08:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c0c:	e0 81 02 ce 	brne	800031a8 <udd_interrupt+0x5bc>
		udc_sof_notify();
80002c10:	f0 1f 01 6f 	mcall	800031cc <udd_interrupt+0x5e0>
80002c14:	e0 8f 02 ca 	bral	800031a8 <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c18:	fe 68 00 00 	mov	r8,-131072
80002c1c:	70 18       	ld.w	r8,r8[0x4]
80002c1e:	e2 18 00 02 	andl	r8,0x2,COH
80002c22:	c0 90       	breq	80002c34 <udd_interrupt+0x48>
		udd_ack_msof();
80002c24:	30 29       	mov	r9,2
80002c26:	fe 68 00 00 	mov	r8,-131072
80002c2a:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c2c:	f0 1f 01 68 	mcall	800031cc <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002c30:	e0 8f 02 bc 	bral	800031a8 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c34:	fe 68 00 00 	mov	r8,-131072
80002c38:	70 18       	ld.w	r8,r8[0x4]
80002c3a:	e2 18 10 00 	andl	r8,0x1000,COH
80002c3e:	e0 80 01 6f 	breq	80002f1c <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c42:	fe 68 02 20 	mov	r8,-130528
80002c46:	31 09       	mov	r9,16
80002c48:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c4a:	30 89       	mov	r9,8
80002c4c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c4e:	fe 68 01 30 	mov	r8,-130768
80002c52:	70 08       	ld.w	r8,r8[0x0]
80002c54:	e2 18 00 04 	andl	r8,0x4,COH
80002c58:	e0 80 00 87 	breq	80002d66 <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002c5c:	fe f8 05 74 	ld.w	r8,pc[1396]
80002c60:	70 08       	ld.w	r8,r8[0x0]
80002c62:	58 08       	cp.w	r8,0
80002c64:	c0 50       	breq	80002c6e <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002c66:	f0 1f 01 5c 	mcall	800031d4 <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002c6a:	f0 1f 01 5c 	mcall	800031d8 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002c6e:	fe 68 01 30 	mov	r8,-130768
80002c72:	70 08       	ld.w	r8,r8[0x0]
80002c74:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002c78:	58 88       	cp.w	r8,8
80002c7a:	c0 90       	breq	80002c8c <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002c7c:	f0 1f 01 58 	mcall	800031dc <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002c80:	30 49       	mov	r9,4
80002c82:	fe 68 01 60 	mov	r8,-130720
80002c86:	91 09       	st.w	r8[0x0],r9
80002c88:	e0 8f 02 90 	bral	800031a8 <udd_interrupt+0x5bc>
80002c8c:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002c90:	fe fc 05 50 	ld.w	r12,pc[1360]
80002c94:	fc 1b 20 00 	movh	r11,0x2000
80002c98:	f0 0c 00 09 	add	r9,r8,r12
80002c9c:	11 3a       	ld.ub	r10,r8++
80002c9e:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002ca2:	30 8a       	mov	r10,8
80002ca4:	ea 1a e0 00 	orh	r10,0xe000
80002ca8:	14 38       	cp.w	r8,r10
80002caa:	cf 71       	brne	80002c98 <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002cac:	fe f8 05 34 	ld.w	r8,pc[1332]
80002cb0:	90 19       	ld.sh	r9,r8[0x2]
80002cb2:	5c c9       	swap.bh	r9
80002cb4:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002cb6:	90 29       	ld.sh	r9,r8[0x4]
80002cb8:	5c c9       	swap.bh	r9
80002cba:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002cbc:	90 39       	ld.sh	r9,r8[0x6]
80002cbe:	5c c9       	swap.bh	r9
80002cc0:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002cc2:	f0 1f 01 49 	mcall	800031e4 <udd_interrupt+0x5f8>
80002cc6:	c0 91       	brne	80002cd8 <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002cc8:	f0 1f 01 45 	mcall	800031dc <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002ccc:	30 49       	mov	r9,4
80002cce:	fe 68 01 60 	mov	r8,-130720
80002cd2:	91 09       	st.w	r8[0x0],r9
80002cd4:	e0 8f 02 6a 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002cd8:	30 49       	mov	r9,4
80002cda:	fe 68 01 60 	mov	r8,-130720
80002cde:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002ce0:	fe f8 05 00 	ld.w	r8,pc[1280]
80002ce4:	11 89       	ld.ub	r9,r8[0x0]
80002ce6:	30 08       	mov	r8,0
80002ce8:	f0 09 18 00 	cp.b	r9,r8
80002cec:	c1 94       	brge	80002d1e <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002cee:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002cf2:	90 e8       	ld.uh	r8,r8[0xc]
80002cf4:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002cf8:	5f 09       	sreq	r9
80002cfa:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002cfe:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d00:	30 08       	mov	r8,0
80002d02:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002d06:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d08:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002d0c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d0e:	30 29       	mov	r9,2
80002d10:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002d14:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d16:	f0 1f 01 38 	mcall	800031f4 <udd_interrupt+0x608>
80002d1a:	e0 8f 02 47 	bral	800031a8 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d1e:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002d22:	90 39       	ld.sh	r9,r8[0x6]
80002d24:	30 08       	mov	r8,0
80002d26:	f0 09 19 00 	cp.h	r9,r8
80002d2a:	c0 51       	brne	80002d34 <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d2c:	f0 1f 01 33 	mcall	800031f8 <udd_interrupt+0x60c>
80002d30:	e0 8f 02 3c 	bral	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d34:	30 08       	mov	r8,0
80002d36:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002d3a:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d3c:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002d40:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d42:	30 19       	mov	r9,1
80002d44:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002d48:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d4a:	31 08       	mov	r8,16
80002d4c:	fe 69 01 60 	mov	r9,-130720
80002d50:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d52:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d56:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d58:	fe 6a 01 f0 	mov	r10,-130576
80002d5c:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002d5e:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002d62:	e0 8f 02 23 	bral	800031a8 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002d66:	fe 68 01 30 	mov	r8,-130768
80002d6a:	70 08       	ld.w	r8,r8[0x0]
80002d6c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d70:	c0 b0       	breq	80002d86 <udd_interrupt+0x19a>
80002d72:	fe 68 01 c0 	mov	r8,-130624
80002d76:	70 08       	ld.w	r8,r8[0x0]
80002d78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d7c:	c0 50       	breq	80002d86 <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002d7e:	f0 1f 01 1e 	mcall	800031f4 <udd_interrupt+0x608>
80002d82:	e0 8f 02 13 	bral	800031a8 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002d86:	fe 68 01 30 	mov	r8,-130768
80002d8a:	70 08       	ld.w	r8,r8[0x0]
80002d8c:	e2 18 00 02 	andl	r8,0x2,COH
80002d90:	e0 80 00 a3 	breq	80002ed6 <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002d94:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002d98:	70 08       	ld.w	r8,r8[0x0]
80002d9a:	58 18       	cp.w	r8,1
80002d9c:	c1 10       	breq	80002dbe <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002d9e:	58 28       	cp.w	r8,2
80002da0:	5f 09       	sreq	r9
80002da2:	58 48       	cp.w	r8,4
80002da4:	5f 08       	sreq	r8
80002da6:	f3 e8 10 08 	or	r8,r9,r8
80002daa:	c0 40       	breq	80002db2 <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002dac:	f0 1f 01 0a 	mcall	800031d4 <udd_interrupt+0x5e8>
80002db0:	c0 38       	rjmp	80002db6 <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002db2:	f0 1f 01 0b 	mcall	800031dc <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002db6:	f0 1f 01 09 	mcall	800031d8 <udd_interrupt+0x5ec>
80002dba:	e0 8f 01 f7 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002dbe:	fe 68 01 30 	mov	r8,-130768
80002dc2:	70 0b       	ld.w	r11,r8[0x0]
80002dc4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002dc8:	fe f8 04 18 	ld.w	r8,pc[1048]
80002dcc:	90 69       	ld.sh	r9,r8[0xc]
80002dce:	fe f8 04 22 	ld.w	r8,pc[1058]
80002dd2:	90 08       	ld.sh	r8,r8[0x0]
80002dd4:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002dd8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002ddc:	f6 0a 00 0a 	add	r10,r11,r10
80002de0:	14 3c       	cp.w	r12,r10
80002de2:	c0 44       	brge	80002dea <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002de4:	10 19       	sub	r9,r8
80002de6:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002dea:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002dee:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002df0:	58 0b       	cp.w	r11,0
80002df2:	e0 80 01 e2 	breq	800031b6 <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002df6:	5c 78       	castu.h	r8
80002df8:	10 09       	add	r9,r8
80002dfa:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002dfe:	11 3a       	ld.ub	r10,r8++
80002e00:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e02:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e06:	f6 0a 19 00 	cp.h	r10,r11
80002e0a:	cf a3       	brcs	80002dfe <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e0c:	fe f9 03 e4 	ld.w	r9,pc[996]
80002e10:	92 08       	ld.sh	r8,r9[0x0]
80002e12:	16 08       	add	r8,r11
80002e14:	5c 88       	casts.h	r8
80002e16:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e18:	34 09       	mov	r9,64
80002e1a:	f2 0b 19 00 	cp.h	r11,r9
80002e1e:	c0 e1       	brne	80002e3a <udd_interrupt+0x24e>
80002e20:	fe f9 03 c0 	ld.w	r9,pc[960]
80002e24:	92 ba       	ld.uh	r10,r9[0x6]
80002e26:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e2a:	fe f9 03 c2 	ld.w	r9,pc[962]
80002e2e:	92 89       	ld.uh	r9,r9[0x0]
80002e30:	f6 09 00 09 	add	r9,r11,r9
80002e34:	12 3a       	cp.w	r10,r9
80002e36:	e0 89 00 1a 	brgt	80002e6a <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e3a:	fe f9 03 a6 	ld.w	r9,pc[934]
80002e3e:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e40:	72 5c       	ld.w	r12,r9[0x14]
80002e42:	58 0c       	cp.w	r12,0
80002e44:	c0 b0       	breq	80002e5a <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e46:	5d 1c       	icall	r12
80002e48:	c0 91       	brne	80002e5a <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e4a:	f0 1f 00 e5 	mcall	800031dc <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e4e:	30 29       	mov	r9,2
80002e50:	fe 68 01 60 	mov	r8,-130720
80002e54:	91 09       	st.w	r8[0x0],r9
80002e56:	e0 8f 01 a9 	bral	800031a8 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002e5a:	30 29       	mov	r9,2
80002e5c:	fe 68 01 60 	mov	r8,-130720
80002e60:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002e62:	f0 1f 00 e6 	mcall	800031f8 <udd_interrupt+0x60c>
80002e66:	e0 8f 01 a1 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002e6a:	fe f9 03 76 	ld.w	r9,pc[886]
80002e6e:	92 69       	ld.sh	r9,r9[0xc]
80002e70:	f0 09 19 00 	cp.h	r9,r8
80002e74:	c2 21       	brne	80002eb8 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002e76:	fe f8 03 6a 	ld.w	r8,pc[874]
80002e7a:	70 5c       	ld.w	r12,r8[0x14]
80002e7c:	58 0c       	cp.w	r12,0
80002e7e:	c0 91       	brne	80002e90 <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002e80:	f0 1f 00 d7 	mcall	800031dc <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e84:	30 29       	mov	r9,2
80002e86:	fe 68 01 60 	mov	r8,-130720
80002e8a:	91 09       	st.w	r8[0x0],r9
80002e8c:	e0 8f 01 8e 	bral	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002e90:	5d 1c       	icall	r12
80002e92:	c0 81       	brne	80002ea2 <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002e94:	f0 1f 00 d2 	mcall	800031dc <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e98:	30 29       	mov	r9,2
80002e9a:	fe 68 01 60 	mov	r8,-130720
80002e9e:	91 09       	st.w	r8[0x0],r9
80002ea0:	c8 49       	rjmp	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002ea2:	fe f9 03 4a 	ld.w	r9,pc[842]
80002ea6:	fe f8 03 4a 	ld.w	r8,pc[842]
80002eaa:	90 0b       	ld.sh	r11,r8[0x0]
80002eac:	92 0a       	ld.sh	r10,r9[0x0]
80002eae:	f6 0a 00 0a 	add	r10,r11,r10
80002eb2:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002eb4:	30 09       	mov	r9,0
80002eb6:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002eb8:	fe 69 01 60 	mov	r9,-130720
80002ebc:	30 28       	mov	r8,2
80002ebe:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002ec0:	31 08       	mov	r8,16
80002ec2:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ec4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002ec8:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002eca:	fe 6a 01 f0 	mov	r10,-130576
80002ece:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ed0:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002ed4:	c6 a9       	rjmp	800031a8 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002ed6:	fe 68 01 30 	mov	r8,-130768
80002eda:	70 08       	ld.w	r8,r8[0x0]
80002edc:	e2 18 00 08 	andl	r8,0x8,COH
80002ee0:	c1 80       	breq	80002f10 <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002ee2:	30 89       	mov	r9,8
80002ee4:	fe 68 01 60 	mov	r8,-130720
80002ee8:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002eea:	fe 68 01 30 	mov	r8,-130768
80002eee:	70 08       	ld.w	r8,r8[0x0]
80002ef0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ef4:	e0 81 01 5a 	brne	800031a8 <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002ef8:	fe f8 02 d8 	ld.w	r8,pc[728]
80002efc:	70 08       	ld.w	r8,r8[0x0]
80002efe:	58 38       	cp.w	r8,3
80002f00:	e0 81 01 54 	brne	800031a8 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f04:	e8 69 00 00 	mov	r9,524288
80002f08:	fe 68 01 f0 	mov	r8,-130576
80002f0c:	91 09       	st.w	r8[0x0],r9
80002f0e:	c4 d9       	rjmp	800031a8 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f10:	fe 68 01 30 	mov	r8,-130768
80002f14:	70 08       	ld.w	r8,r8[0x0]
80002f16:	e2 18 00 10 	andl	r8,0x10,COH
80002f1a:	c0 e1       	brne	80002f36 <udd_interrupt+0x34a>
80002f1c:	fe f7 02 e0 	ld.w	r7,pc[736]
80002f20:	0e 9a       	mov	r10,r7
80002f22:	fe 69 01 34 	mov	r9,-130764
80002f26:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f28:	fe 66 00 00 	mov	r6,-131072
80002f2c:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f30:	e0 63 10 00 	mov	r3,4096
80002f34:	c1 e8       	rjmp	80002f70 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f36:	31 09       	mov	r9,16
80002f38:	fe 68 01 60 	mov	r8,-130720
80002f3c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f3e:	fe 68 01 30 	mov	r8,-130768
80002f42:	70 08       	ld.w	r8,r8[0x0]
80002f44:	e2 18 00 02 	andl	r8,0x2,COH
80002f48:	e0 81 01 30 	brne	800031a8 <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f4c:	fe f8 02 84 	ld.w	r8,pc[644]
80002f50:	70 08       	ld.w	r8,r8[0x0]
80002f52:	58 18       	cp.w	r8,1
80002f54:	c0 41       	brne	80002f5c <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002f56:	f0 1f 00 a9 	mcall	800031f8 <udd_interrupt+0x60c>
80002f5a:	c2 79       	rjmp	800031a8 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002f5c:	58 48       	cp.w	r8,4
80002f5e:	e0 81 01 25 	brne	800031a8 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002f62:	e8 69 00 00 	mov	r9,524288
80002f66:	fe 68 01 f0 	mov	r8,-130576
80002f6a:	91 09       	st.w	r8[0x0],r9
80002f6c:	c1 e9       	rjmp	800031a8 <udd_interrupt+0x5bc>
80002f6e:	10 9b       	mov	r11,r8
80002f70:	f6 c8 ff ff 	sub	r8,r11,-1
80002f74:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f76:	6c 45       	ld.w	r5,r6[0x10]
80002f78:	10 9e       	mov	lr,r8
80002f7a:	e8 0b 09 4b 	lsl	r11,r4,r11
80002f7e:	f7 e5 00 05 	and	r5,r11,r5
80002f82:	c4 b0       	breq	80003018 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002f84:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f86:	f7 e5 00 05 	and	r5,r11,r5
80002f8a:	c4 70       	breq	80003018 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002f8c:	fe 69 00 00 	mov	r9,-131072
80002f90:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002f92:	74 09       	ld.w	r9,r10[0x0]
80002f94:	e6 19 20 00 	andh	r9,0x2000,COH
80002f98:	c0 50       	breq	80002fa2 <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002f9a:	fe 69 00 00 	mov	r9,-131072
80002f9e:	93 3b       	st.w	r9[0xc],r11
80002fa0:	c0 a8       	rjmp	80002fb4 <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002fa2:	f0 09 15 04 	lsl	r9,r8,0x4
80002fa6:	e0 39 fd 00 	sub	r9,130304
80002faa:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002fac:	b1 89       	lsr	r9,0x10
80002fae:	74 2a       	ld.w	r10,r10[0x8]
80002fb0:	12 1a       	sub	r10,r9
80002fb2:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002fb4:	a3 68       	lsl	r8,0x2
80002fb6:	fe 6b 01 00 	mov	r11,-130816
80002fba:	f0 0b 00 09 	add	r9,r8,r11
80002fbe:	72 09       	ld.w	r9,r9[0x0]
80002fc0:	e2 19 01 00 	andl	r9,0x100,COH
80002fc4:	c2 60       	breq	80003010 <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002fc6:	78 09       	ld.w	r9,r12[0x0]
80002fc8:	e6 19 40 00 	andh	r9,0x4000,COH
80002fcc:	c2 20       	breq	80003010 <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002fce:	fe 6a 01 60 	mov	r10,-130720
80002fd2:	f0 0a 00 09 	add	r9,r8,r10
80002fd6:	30 1a       	mov	r10,1
80002fd8:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
80002fda:	fe 6b 01 30 	mov	r11,-130768
80002fde:	f0 0b 00 09 	add	r9,r8,r11
80002fe2:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
80002fe4:	fe 6b 01 90 	mov	r11,-130672
80002fe8:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002fec:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80002ff0:	f9 ba 01 01 	movne	r10,1
80002ff4:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80002ff8:	e0 38 fe 10 	sub	r8,130576
80002ffc:	30 19       	mov	r9,1
80002ffe:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80003000:	e0 68 10 00 	mov	r8,4096
80003004:	f0 0e 09 4e 	lsl	lr,r8,lr
80003008:	fe 68 00 00 	mov	r8,-131072
8000300c:	91 6e       	st.w	r8[0x18],lr
8000300e:	cc d8       	rjmp	800031a8 <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80003010:	30 0b       	mov	r11,0
80003012:	f0 1f 00 7c 	mcall	80003200 <udd_interrupt+0x614>
80003016:	cc 98       	rjmp	800031a8 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003018:	6c 4b       	ld.w	r11,r6[0x10]
8000301a:	e6 0e 09 4e 	lsl	lr,r3,lr
8000301e:	fd eb 00 0b 	and	r11,lr,r11
80003022:	c4 60       	breq	800030ae <udd_interrupt+0x4c2>
80003024:	e0 7b fe d0 	mov	r11,130768
80003028:	f2 0b 00 02 	add	r2,r9,r11
8000302c:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003030:	76 05       	ld.w	r5,r11[0x0]
80003032:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003036:	c1 50       	breq	80003060 <udd_interrupt+0x474>
80003038:	72 05       	ld.w	r5,r9[0x0]
8000303a:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000303e:	c1 10       	breq	80003060 <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
80003040:	fe 6a 02 20 	mov	r10,-130528
80003044:	e4 0a 00 08 	add	r8,r2,r10
80003048:	30 19       	mov	r9,1
8000304a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000304c:	e0 32 fe a0 	sub	r2,130720
80003050:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
80003052:	e0 69 40 00 	mov	r9,16384
80003056:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80003058:	30 0b       	mov	r11,0
8000305a:	f0 1f 00 6a 	mcall	80003200 <udd_interrupt+0x614>
8000305e:	ca 58       	rjmp	800031a8 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80003060:	76 0b       	ld.w	r11,r11[0x0]
80003062:	e2 1b 10 00 	andl	r11,0x1000,COH
80003066:	c2 40       	breq	800030ae <udd_interrupt+0x4c2>
80003068:	72 0b       	ld.w	r11,r9[0x0]
8000306a:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
8000306e:	c2 01       	brne	800030ae <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80003070:	fe 69 02 20 	mov	r9,-130528
80003074:	e4 09 00 08 	add	r8,r2,r9
80003078:	e0 69 10 00 	mov	r9,4096
8000307c:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000307e:	fe 68 00 00 	mov	r8,-131072
80003082:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80003084:	78 08       	ld.w	r8,r12[0x0]
80003086:	30 09       	mov	r9,0
80003088:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
8000308c:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000308e:	fe 6b 01 00 	mov	r11,-130816
80003092:	e4 0b 00 08 	add	r8,r2,r11
80003096:	70 09       	ld.w	r9,r8[0x0]
80003098:	a9 d9       	cbr	r9,0x9
8000309a:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000309c:	e0 32 fe 10 	sub	r2,130576
800030a0:	e8 68 00 00 	mov	r8,524288
800030a4:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030a6:	e4 68 00 00 	mov	r8,262144
800030aa:	85 08       	st.w	r2[0x0],r8
800030ac:	c7 e8       	rjmp	800031a8 <udd_interrupt+0x5bc>
800030ae:	2f 0a       	sub	r10,-16
800030b0:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800030b2:	58 38       	cp.w	r8,3
800030b4:	fe 91 ff 5d 	brne	80002f6e <udd_interrupt+0x382>
800030b8:	c8 38       	rjmp	800031be <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800030ba:	30 89       	mov	r9,8
800030bc:	fe 68 00 00 	mov	r8,-131072
800030c0:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800030c2:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
800030c6:	30 15       	mov	r5,1
800030c8:	0a 9b       	mov	r11,r5
800030ca:	0e 9c       	mov	r12,r7
800030cc:	f0 1f 00 4d 	mcall	80003200 <udd_interrupt+0x614>
800030d0:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800030d2:	0c 37       	cp.w	r7,r6
800030d4:	cf a1       	brne	800030c8 <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
800030d6:	f0 1f 00 4c 	mcall	80003204 <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800030da:	f0 1f 00 4c 	mcall	80003208 <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
800030de:	f0 1f 00 3f 	mcall	800031d8 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
800030e2:	c6 38       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800030e4:	fe 68 00 00 	mov	r8,-131072
800030e8:	70 48       	ld.w	r8,r8[0x10]
800030ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030ee:	c1 b0       	breq	80003124 <udd_interrupt+0x538>
800030f0:	fe 68 00 00 	mov	r8,-131072
800030f4:	70 18       	ld.w	r8,r8[0x4]
800030f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030fa:	c1 50       	breq	80003124 <udd_interrupt+0x538>
		otg_unfreeze_clock();
800030fc:	fe 68 00 00 	mov	r8,-131072
80003100:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003104:	af c9       	cbr	r9,0xe
80003106:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000310a:	30 19       	mov	r9,1
8000310c:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
8000310e:	31 09       	mov	r9,16
80003110:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003112:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003116:	af a9       	sbr	r9,0xe
80003118:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
8000311c:	30 0c       	mov	r12,0
8000311e:	f0 1f 00 3c 	mcall	8000320c <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80003122:	c4 38       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003124:	fe 68 00 00 	mov	r8,-131072
80003128:	70 48       	ld.w	r8,r8[0x10]
8000312a:	e2 18 00 10 	andl	r8,0x10,COH
8000312e:	c2 10       	breq	80003170 <udd_interrupt+0x584>
80003130:	fe 68 00 00 	mov	r8,-131072
80003134:	70 18       	ld.w	r8,r8[0x4]
80003136:	e2 18 00 10 	andl	r8,0x10,COH
8000313a:	c1 b0       	breq	80003170 <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
8000313c:	fe 68 00 00 	mov	r8,-131072
80003140:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003144:	af c9       	cbr	r9,0xe
80003146:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
8000314a:	c0 58       	rjmp	80003154 <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
8000314c:	70 19       	ld.w	r9,r8[0x4]
8000314e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003152:	c0 61       	brne	8000315e <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003154:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003158:	e2 19 40 00 	andl	r9,0x4000,COH
8000315c:	cf 80       	breq	8000314c <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
8000315e:	fe 68 00 00 	mov	r8,-131072
80003162:	31 09       	mov	r9,16
80003164:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
80003166:	30 1c       	mov	r12,1
80003168:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
8000316a:	f0 1f 00 29 	mcall	8000320c <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000316e:	c1 d8       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
80003170:	fe 68 00 00 	mov	r8,-131072
80003174:	f0 f8 08 04 	ld.w	r8,r8[2052]
80003178:	e2 18 00 02 	andl	r8,0x2,COH
8000317c:	c1 60       	breq	800031a8 <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
8000317e:	fe 68 00 00 	mov	r8,-131072
80003182:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003186:	af c9       	cbr	r9,0xe
80003188:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
8000318c:	30 29       	mov	r9,2
8000318e:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
80003192:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003196:	af a9       	sbr	r9,0xe
80003198:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
8000319c:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031a0:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031a4:	f0 1f 00 1b 	mcall	80003210 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031a8:	fe 68 00 00 	mov	r8,-131072
800031ac:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800031b0:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
800031b4:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800031b6:	48 f9       	lddpc	r9,800031f0 <udd_interrupt+0x604>
800031b8:	b2 08       	st.h	r9[0x0],r8
800031ba:	fe 9f fe 40 	bral	80002e3a <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800031be:	fe 68 00 00 	mov	r8,-131072
800031c2:	70 18       	ld.w	r8,r8[0x4]
800031c4:	e2 18 00 08 	andl	r8,0x8,COH
800031c8:	c8 e0       	breq	800030e4 <udd_interrupt+0x4f8>
800031ca:	c7 8b       	rjmp	800030ba <udd_interrupt+0x4ce>
800031cc:	80 00       	ld.sh	r0,r0[0x0]
800031ce:	37 90       	mov	r0,121
800031d0:	00 00       	add	r0,r0
800031d2:	07 4c       	ld.w	r12,--r3
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	25 10       	sub	r0,81
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	27 50       	sub	r0,117
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	24 f8       	sub	r8,79
800031e0:	00 00       	add	r0,r0
800031e2:	0a 00       	add	r0,r5
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	3a 10       	mov	r0,-95
800031e8:	00 00       	add	r0,r0
800031ea:	07 50       	ld.sh	r0,--r3
800031ec:	00 00       	add	r0,r0
800031ee:	07 14       	ld.sh	r4,r3++
800031f0:	00 00       	add	r0,r0
800031f2:	07 4a       	ld.w	r10,--r3
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	27 b0       	sub	r0,123
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	27 84       	sub	r4,120
800031fc:	00 00       	add	r0,r0
800031fe:	07 18       	ld.sh	r8,r3++
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	25 24       	sub	r4,82
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	39 b0       	mov	r0,-101
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	2a 0e       	sub	lr,-96
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	26 dc       	sub	r12,109
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	3f 10       	mov	r0,-15

80003214 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003214:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003218:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000321a:	fe 78 0c 00 	mov	r8,-62464
8000321e:	71 59       	ld.w	r9,r8[0x54]
80003220:	e2 19 00 40 	andl	r9,0x40,COH
80003224:	cf d0       	breq	8000321e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80003226:	a3 6c       	lsl	r12,0x2
80003228:	e0 2c f3 f8 	sub	r12,62456
8000322c:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
8000322e:	30 19       	mov	r9,1
80003230:	f2 0b 09 4b 	lsl	r11,r9,r11
80003234:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003236:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003238:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
8000323c:	5e fc       	retal	r12
8000323e:	d7 03       	nop

80003240 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003240:	eb cd 40 e0 	pushm	r5-r7,lr
80003244:	18 96       	mov	r6,r12
80003246:	58 9c       	cp.w	r12,9
80003248:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000324a:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
8000324e:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80003250:	48 f8       	lddpc	r8,8000328c <sysclk_enable_pbb_module+0x4c>
80003252:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003256:	30 08       	mov	r8,0
80003258:	f0 09 18 00 	cp.b	r9,r8
8000325c:	c0 a1       	brne	80003270 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000325e:	ee 0b 15 01 	lsl	r11,r7,0x1
80003262:	f9 bb 01 06 	movne	r11,6
80003266:	f9 bb 00 02 	moveq	r11,2
8000326a:	30 1c       	mov	r12,1
8000326c:	f0 1f 00 09 	mcall	80003290 <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
80003270:	48 78       	lddpc	r8,8000328c <sysclk_enable_pbb_module+0x4c>
80003272:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003276:	2f f9       	sub	r9,-1
80003278:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000327c:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003280:	0c 9b       	mov	r11,r6
80003282:	30 3c       	mov	r12,3
80003284:	f0 1f 00 03 	mcall	80003290 <sysclk_enable_pbb_module+0x50>
}
80003288:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000328c:	00 00       	add	r0,r0
8000328e:	07 54       	ld.sh	r4,--r3
80003290:	80 00       	ld.sh	r0,r0[0x0]
80003292:	32 14       	mov	r4,33

80003294 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80003294:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003296:	30 1c       	mov	r12,1
80003298:	f0 1f 00 0f 	mcall	800032d4 <sysclk_enable_usb+0x40>
8000329c:	30 3b       	mov	r11,3
8000329e:	30 1c       	mov	r12,1
800032a0:	f0 1f 00 0e 	mcall	800032d8 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032a4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032a8:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032aa:	fe 78 0c 00 	mov	r8,-62464
800032ae:	e0 6a 03 07 	mov	r10,775
800032b2:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032b4:	70 0a       	ld.w	r10,r8[0x0]
800032b6:	a3 aa       	sbr	r10,0x2
800032b8:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032ba:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032be:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032c0:	e2 19 00 80 	andl	r9,0x80,COH
800032c4:	cf d0       	breq	800032be <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032c6:	30 49       	mov	r9,4
800032c8:	fe 78 0c 00 	mov	r8,-62464
800032cc:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
800032d0:	d8 02       	popm	pc
800032d2:	00 00       	add	r0,r0
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	32 40       	mov	r0,36
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	32 14       	mov	r4,33

800032dc <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
800032dc:	5e fc       	retal	r12
800032de:	d7 03       	nop

800032e0 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
800032e0:	49 e8       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
800032e2:	11 88       	ld.ub	r8,r8[0x0]
800032e4:	30 09       	mov	r9,0
800032e6:	f2 08 18 00 	cp.b	r8,r9
800032ea:	c1 84       	brge	8000331a <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800032ec:	e2 18 00 60 	andl	r8,0x60,COH
800032f0:	e0 48 00 20 	cp.w	r8,32
800032f4:	c3 11       	brne	80003356 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800032f6:	49 98       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
800032f8:	11 99       	ld.ub	r9,r8[0x1]
800032fa:	32 18       	mov	r8,33
800032fc:	f0 09 18 00 	cp.b	r9,r8
80003300:	c2 b1       	brne	80003356 <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003302:	49 68       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003304:	90 39       	ld.sh	r9,r8[0x6]
80003306:	30 78       	mov	r8,7
80003308:	f0 09 19 00 	cp.h	r9,r8
8000330c:	c2 51       	brne	80003356 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
8000330e:	49 38       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003310:	49 39       	lddpc	r9,8000335c <udi_cdc_comm_setup+0x7c>
80003312:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003314:	30 79       	mov	r9,7
80003316:	b0 69       	st.h	r8[0xc],r9
80003318:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000331a:	e2 18 00 60 	andl	r8,0x60,COH
8000331e:	e0 48 00 20 	cp.w	r8,32
80003322:	c1 a1       	brne	80003356 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003324:	48 d8       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003326:	11 98       	ld.ub	r8,r8[0x1]
80003328:	32 09       	mov	r9,32
8000332a:	f2 08 18 00 	cp.b	r8,r9
8000332e:	c0 60       	breq	8000333a <udi_cdc_comm_setup+0x5a>
80003330:	32 29       	mov	r9,34
80003332:	f2 08 18 00 	cp.b	r8,r9
80003336:	c1 01       	brne	80003356 <udi_cdc_comm_setup+0x76>
80003338:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000333a:	48 88       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
8000333c:	90 39       	ld.sh	r9,r8[0x6]
8000333e:	30 78       	mov	r8,7
80003340:	f0 09 19 00 	cp.h	r9,r8
80003344:	c0 91       	brne	80003356 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
80003346:	48 58       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003348:	48 69       	lddpc	r9,80003360 <udi_cdc_comm_setup+0x80>
8000334a:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
8000334c:	48 49       	lddpc	r9,8000335c <udi_cdc_comm_setup+0x7c>
8000334e:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003350:	30 79       	mov	r9,7
80003352:	b0 69       	st.h	r8[0xc],r9
80003354:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
80003356:	5e fd       	retal	0
80003358:	00 00       	add	r0,r0
8000335a:	0a 00       	add	r0,r5
8000335c:	00 00       	add	r0,r0
8000335e:	07 58       	ld.sh	r8,--r3
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	33 68       	mov	r8,54

80003364 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003364:	5e fd       	retal	0

80003366 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003366:	5e fd       	retal	0

80003368 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003368:	5e fc       	retal	r12
8000336a:	d7 03       	nop

8000336c <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
8000336c:	48 68       	lddpc	r8,80003384 <udi_cdc_is_rx_ready+0x18>
8000336e:	11 8a       	ld.ub	r10,r8[0x0]
80003370:	48 68       	lddpc	r8,80003388 <udi_cdc_is_rx_ready+0x1c>
80003372:	90 08       	ld.sh	r8,r8[0x0]
80003374:	48 69       	lddpc	r9,8000338c <udi_cdc_is_rx_ready+0x20>
80003376:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
8000337a:	f0 09 19 00 	cp.h	r9,r8
}
8000337e:	5f bc       	srhi	r12
80003380:	5e fc       	retal	r12
80003382:	00 00       	add	r0,r0
80003384:	00 00       	add	r0,r0
80003386:	07 ec       	ld.ub	r12,r3[0x6]
80003388:	00 00       	add	r0,r0
8000338a:	07 e8       	ld.ub	r8,r3[0x6]
8000338c:	00 00       	add	r0,r0
8000338e:	07 e4       	ld.ub	r4,r3[0x6]

80003390 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
80003390:	49 58       	lddpc	r8,800033e4 <udi_cdc_is_tx_ready+0x54>
80003392:	11 89       	ld.ub	r9,r8[0x0]
80003394:	49 58       	lddpc	r8,800033e8 <udi_cdc_is_tx_ready+0x58>
80003396:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000339a:	34 08       	mov	r8,64
8000339c:	f0 09 19 00 	cp.h	r9,r8
800033a0:	c0 20       	breq	800033a4 <udi_cdc_is_tx_ready+0x14>
800033a2:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033a4:	49 28       	lddpc	r8,800033ec <udi_cdc_is_tx_ready+0x5c>
800033a6:	11 88       	ld.ub	r8,r8[0x0]
800033a8:	58 08       	cp.w	r8,0
800033aa:	c1 21       	brne	800033ce <udi_cdc_is_tx_ready+0x3e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033ac:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033b0:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033b2:	49 09       	lddpc	r9,800033f0 <udi_cdc_is_tx_ready+0x60>
800033b4:	13 89       	ld.ub	r9,r9[0x0]
800033b6:	58 09       	cp.w	r9,0
800033b8:	c0 91       	brne	800033ca <udi_cdc_is_tx_ready+0x3a>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033ba:	30 1a       	mov	r10,1
800033bc:	48 c9       	lddpc	r9,800033ec <udi_cdc_is_tx_ready+0x5c>
800033be:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033c0:	48 99       	lddpc	r9,800033e4 <udi_cdc_is_tx_ready+0x54>
800033c2:	13 8a       	ld.ub	r10,r9[0x0]
800033c4:	58 0a       	cp.w	r10,0
800033c6:	5f 0a       	sreq	r10
800033c8:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800033ca:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800033ce:	48 68       	lddpc	r8,800033e4 <udi_cdc_is_tx_ready+0x54>
800033d0:	11 89       	ld.ub	r9,r8[0x0]
800033d2:	48 68       	lddpc	r8,800033e8 <udi_cdc_is_tx_ready+0x58>
800033d4:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033d8:	34 08       	mov	r8,64
800033da:	f0 09 19 00 	cp.h	r9,r8
800033de:	5f 1c       	srne	r12
}
800033e0:	5e fc       	retal	r12
800033e2:	00 00       	add	r0,r0
800033e4:	00 00       	add	r0,r0
800033e6:	07 5f       	ld.sh	pc,--r3
800033e8:	00 00       	add	r0,r0
800033ea:	07 60       	ld.uh	r0,--r3
800033ec:	00 00       	add	r0,r0
800033ee:	08 71       	tst	r1,r4
800033f0:	00 00       	add	r0,r0
800033f2:	07 ee       	ld.ub	lr,r3[0x6]

800033f4 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
800033f4:	eb cd 40 fe 	pushm	r1-r7,lr
800033f8:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800033fa:	49 88       	lddpc	r8,80003458 <udi_cdc_putc+0x64>
800033fc:	11 e9       	ld.ub	r9,r8[0x6]
800033fe:	30 98       	mov	r8,9
80003400:	f0 09 18 00 	cp.b	r9,r8
80003404:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003406:	49 66       	lddpc	r6,8000345c <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003408:	49 63       	lddpc	r3,80003460 <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000340a:	49 75       	lddpc	r5,80003464 <udi_cdc_putc+0x70>
8000340c:	49 72       	lddpc	r2,80003468 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000340e:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003410:	f0 1f 00 17 	mcall	8000346c <udi_cdc_putc+0x78>
80003414:	c0 51       	brne	8000341e <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
80003416:	0d 88       	ld.ub	r8,r6[0x0]
80003418:	58 08       	cp.w	r8,0
8000341a:	cf b1       	brne	80003410 <udi_cdc_putc+0x1c>
8000341c:	c1 b8       	rjmp	80003452 <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000341e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003422:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003424:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003426:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
8000342a:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
8000342e:	f0 0c 15 06 	lsl	r12,r8,0x6
80003432:	f8 0b 00 0b 	add	r11,r12,r11
80003436:	e4 0b 0b 07 	st.b	r2[r11],r7
8000343a:	2f f9       	sub	r9,-1
8000343c:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003440:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003444:	58 04       	cp.w	r4,0
80003446:	c0 31       	brne	8000344c <udi_cdc_putc+0x58>
80003448:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000344c:	a9 47       	asr	r7,0x8
8000344e:	02 94       	mov	r4,r1
80003450:	ce 0b       	rjmp	80003410 <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
80003452:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003456:	00 00       	add	r0,r0
80003458:	00 00       	add	r0,r0
8000345a:	07 58       	ld.sh	r8,--r3
8000345c:	00 00       	add	r0,r0
8000345e:	07 ed       	ld.ub	sp,r3[0x6]
80003460:	00 00       	add	r0,r0
80003462:	07 5f       	ld.sh	pc,--r3
80003464:	00 00       	add	r0,r0
80003466:	07 60       	ld.uh	r0,--r3
80003468:	00 00       	add	r0,r0
8000346a:	07 64       	ld.uh	r4,--r3
8000346c:	80 00       	ld.sh	r0,r0[0x0]
8000346e:	33 90       	mov	r0,57

80003470 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
80003470:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003474:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003478:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
8000347a:	49 78       	lddpc	r8,800034d4 <udi_cdc_rx_start+0x64>
8000347c:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
8000347e:	49 78       	lddpc	r8,800034d8 <udi_cdc_rx_start+0x68>
80003480:	11 88       	ld.ub	r8,r8[0x0]
80003482:	58 08       	cp.w	r8,0
80003484:	c0 a1       	brne	80003498 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
80003486:	49 68       	lddpc	r8,800034dc <udi_cdc_rx_start+0x6c>
80003488:	90 08       	ld.sh	r8,r8[0x0]
8000348a:	49 6a       	lddpc	r10,800034e0 <udi_cdc_rx_start+0x70>
8000348c:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
80003490:	f0 0a 19 00 	cp.h	r10,r8
80003494:	e0 88 00 06 	brls	800034a0 <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003498:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
8000349c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034a0:	30 0a       	mov	r10,0
800034a2:	48 f8       	lddpc	r8,800034dc <udi_cdc_rx_start+0x6c>
800034a4:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034a6:	58 07       	cp.w	r7,0
800034a8:	5f 0a       	sreq	r10
800034aa:	48 b8       	lddpc	r8,800034d4 <udi_cdc_rx_start+0x64>
800034ac:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034ae:	30 1a       	mov	r10,1
800034b0:	48 a8       	lddpc	r8,800034d8 <udi_cdc_rx_start+0x68>
800034b2:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034b4:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034b8:	f0 1f 00 0b 	mcall	800034e4 <udi_cdc_rx_start+0x74>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034bc:	a7 67       	lsl	r7,0x6
800034be:	48 b8       	lddpc	r8,800034e8 <udi_cdc_rx_start+0x78>
800034c0:	34 09       	mov	r9,64
800034c2:	48 ba       	lddpc	r10,800034ec <udi_cdc_rx_start+0x7c>
800034c4:	0e 0a       	add	r10,r7
800034c6:	30 1b       	mov	r11,1
800034c8:	30 2c       	mov	r12,2
800034ca:	f0 1f 00 0a 	mcall	800034f0 <udi_cdc_rx_start+0x80>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800034ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800034d2:	00 00       	add	r0,r0
800034d4:	00 00       	add	r0,r0
800034d6:	07 ec       	ld.ub	r12,r3[0x6]
800034d8:	00 00       	add	r0,r0
800034da:	08 70       	tst	r0,r4
800034dc:	00 00       	add	r0,r0
800034de:	07 e8       	ld.ub	r8,r3[0x6]
800034e0:	00 00       	add	r0,r0
800034e2:	07 e4       	ld.ub	r4,r3[0x6]
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	33 6c       	mov	r12,54
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	35 70       	mov	r0,87
800034ec:	00 00       	add	r0,r0
800034ee:	07 f0       	ld.ub	r0,r3[0x7]
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	25 94       	sub	r4,89

800034f4 <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
800034f4:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800034f6:	49 88       	lddpc	r8,80003554 <udi_cdc_getc+0x60>
800034f8:	11 e9       	ld.ub	r9,r8[0x6]
800034fa:	30 98       	mov	r8,9
800034fc:	f0 09 18 00 	cp.b	r9,r8
80003500:	5f 02       	sreq	r2
80003502:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003504:	49 56       	lddpc	r6,80003558 <udi_cdc_getc+0x64>
80003506:	49 67       	lddpc	r7,8000355c <udi_cdc_getc+0x68>
80003508:	49 65       	lddpc	r5,80003560 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
8000350a:	49 74       	lddpc	r4,80003564 <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000350c:	49 71       	lddpc	r1,80003568 <udi_cdc_getc+0x74>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000350e:	06 90       	mov	r0,r3
80003510:	c0 48       	rjmp	80003518 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
80003512:	09 88       	ld.ub	r8,r4[0x0]
80003514:	58 08       	cp.w	r8,0
80003516:	c1 b0       	breq	8000354c <udi_cdc_getc+0x58>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003518:	0d 89       	ld.ub	r9,r6[0x0]
8000351a:	8e 08       	ld.sh	r8,r7[0x0]
8000351c:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003520:	f0 09 19 00 	cp.h	r9,r8
80003524:	fe 98 ff f7 	brls	80003512 <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003528:	0d 88       	ld.ub	r8,r6[0x0]
8000352a:	8e 09       	ld.sh	r9,r7[0x0]
8000352c:	5c 79       	castu.h	r9
8000352e:	a7 68       	lsl	r8,0x6
80003530:	12 08       	add	r8,r9
80003532:	e2 08 07 08 	ld.ub	r8,r1[r8]
80003536:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
80003538:	8e 08       	ld.sh	r8,r7[0x0]
8000353a:	2f f8       	sub	r8,-1
8000353c:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
8000353e:	f0 1f 00 0c 	mcall	8000356c <udi_cdc_getc+0x78>

	if (b_databit_9) {
80003542:	58 02       	cp.w	r2,0
80003544:	c0 50       	breq	8000354e <udi_cdc_getc+0x5a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003546:	a9 63       	lsl	r3,0x8
80003548:	00 92       	mov	r2,r0
8000354a:	ce 7b       	rjmp	80003518 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
8000354c:	30 03       	mov	r3,0
	}
	return rx_data;
}
8000354e:	06 9c       	mov	r12,r3
80003550:	d8 32       	popm	r0-r7,pc
80003552:	00 00       	add	r0,r0
80003554:	00 00       	add	r0,r0
80003556:	07 58       	ld.sh	r8,--r3
80003558:	00 00       	add	r0,r0
8000355a:	07 ec       	ld.ub	r12,r3[0x6]
8000355c:	00 00       	add	r0,r0
8000355e:	07 e8       	ld.ub	r8,r3[0x6]
80003560:	00 00       	add	r0,r0
80003562:	07 e4       	ld.ub	r4,r3[0x6]
80003564:	00 00       	add	r0,r0
80003566:	07 ed       	ld.ub	sp,r3[0x6]
80003568:	00 00       	add	r0,r0
8000356a:	07 f0       	ld.ub	r0,r3[0x7]
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	34 70       	mov	r0,71

80003570 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
80003570:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
80003572:	58 0c       	cp.w	r12,0
80003574:	c1 01       	brne	80003594 <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
80003576:	48 98       	lddpc	r8,80003598 <udi_cdc_data_recevied+0x28>
80003578:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
8000357a:	58 08       	cp.w	r8,0
8000357c:	f9 b8 01 00 	movne	r8,0
80003580:	f9 b8 00 02 	moveq	r8,2
80003584:	48 69       	lddpc	r9,8000359c <udi_cdc_data_recevied+0x2c>
80003586:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
8000358a:	30 09       	mov	r9,0
8000358c:	48 58       	lddpc	r8,800035a0 <udi_cdc_data_recevied+0x30>
8000358e:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
80003590:	f0 1f 00 05 	mcall	800035a4 <udi_cdc_data_recevied+0x34>
80003594:	d8 02       	popm	pc
80003596:	00 00       	add	r0,r0
80003598:	00 00       	add	r0,r0
8000359a:	07 ec       	ld.ub	r12,r3[0x6]
8000359c:	00 00       	add	r0,r0
8000359e:	07 e4       	ld.ub	r4,r3[0x6]
800035a0:	00 00       	add	r0,r0
800035a2:	08 70       	tst	r0,r4
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	34 70       	mov	r0,71

800035a8 <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035a8:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035ac:	4a a8       	lddpc	r8,80003654 <udi_cdc_tx_send+0xac>
800035ae:	11 88       	ld.ub	r8,r8[0x0]
800035b0:	58 08       	cp.w	r8,0
800035b2:	c4 f1       	brne	80003650 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035b4:	f0 1f 00 29 	mcall	80003658 <udi_cdc_tx_send+0xb0>
800035b8:	c0 a0       	breq	800035cc <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035ba:	f0 1f 00 29 	mcall	8000365c <udi_cdc_tx_send+0xb4>
800035be:	4a 98       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
800035c0:	90 08       	ld.sh	r8,r8[0x0]
800035c2:	f8 08 19 00 	cp.h	r8,r12
800035c6:	c0 a1       	brne	800035da <udi_cdc_tx_send+0x32>
800035c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800035cc:	f0 1f 00 26 	mcall	80003664 <udi_cdc_tx_send+0xbc>
800035d0:	4a 48       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
800035d2:	90 08       	ld.sh	r8,r8[0x0]
800035d4:	f8 08 19 00 	cp.h	r8,r12
800035d8:	c3 c0       	breq	80003650 <udi_cdc_tx_send+0xa8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035da:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800035de:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
800035e0:	4a 29       	lddpc	r9,80003668 <udi_cdc_tx_send+0xc0>
800035e2:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
800035e4:	4a 29       	lddpc	r9,8000366c <udi_cdc_tx_send+0xc4>
800035e6:	13 89       	ld.ub	r9,r9[0x0]
800035e8:	58 09       	cp.w	r9,0
800035ea:	c0 61       	brne	800035f6 <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
800035ec:	58 07       	cp.w	r7,0
800035ee:	5f 0a       	sreq	r10
800035f0:	49 e9       	lddpc	r9,80003668 <udi_cdc_tx_send+0xc0>
800035f2:	b2 8a       	st.b	r9[0x0],r10
800035f4:	c0 38       	rjmp	800035fa <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
800035f6:	58 07       	cp.w	r7,0
800035f8:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
800035fa:	30 1a       	mov	r10,1
800035fc:	49 69       	lddpc	r9,80003654 <udi_cdc_tx_send+0xac>
800035fe:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003600:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003604:	0e 95       	mov	r5,r7
80003606:	49 b8       	lddpc	r8,80003670 <udi_cdc_tx_send+0xc8>
80003608:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
8000360c:	34 08       	mov	r8,64
8000360e:	f0 09 19 00 	cp.h	r9,r8
80003612:	5f 16       	srne	r6
	if (b_short_packet) {
80003614:	58 06       	cp.w	r6,0
80003616:	c0 e0       	breq	80003632 <udi_cdc_tx_send+0x8a>
		if (udd_is_high_speed()) {
80003618:	f0 1f 00 10 	mcall	80003658 <udi_cdc_tx_send+0xb0>
8000361c:	c0 60       	breq	80003628 <udi_cdc_tx_send+0x80>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
8000361e:	f0 1f 00 10 	mcall	8000365c <udi_cdc_tx_send+0xb4>
80003622:	49 08       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
80003624:	b0 0c       	st.h	r8[0x0],r12
80003626:	c0 98       	rjmp	80003638 <udi_cdc_tx_send+0x90>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003628:	f0 1f 00 0f 	mcall	80003664 <udi_cdc_tx_send+0xbc>
8000362c:	48 d8       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
8000362e:	b0 0c       	st.h	r8[0x0],r12
80003630:	c0 48       	rjmp	80003638 <udi_cdc_tx_send+0x90>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
80003632:	30 09       	mov	r9,0
80003634:	48 b8       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
80003636:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003638:	a7 67       	lsl	r7,0x6
8000363a:	48 f8       	lddpc	r8,80003674 <udi_cdc_tx_send+0xcc>
8000363c:	48 d9       	lddpc	r9,80003670 <udi_cdc_tx_send+0xc8>
8000363e:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80003642:	48 ea       	lddpc	r10,80003678 <udi_cdc_tx_send+0xd0>
80003644:	0e 0a       	add	r10,r7
80003646:	0c 9b       	mov	r11,r6
80003648:	e0 6c 00 81 	mov	r12,129
8000364c:	f0 1f 00 0c 	mcall	8000367c <udi_cdc_tx_send+0xd4>
80003650:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003654:	00 00       	add	r0,r0
80003656:	07 ee       	ld.ub	lr,r3[0x6]
80003658:	80 00       	ld.sh	r0,r0[0x0]
8000365a:	23 9e       	sub	lr,57
8000365c:	80 00       	ld.sh	r0,r0[0x0]
8000365e:	23 da       	sub	r10,61
80003660:	00 00       	add	r0,r0
80003662:	07 ea       	ld.ub	r10,r3[0x6]
80003664:	80 00       	ld.sh	r0,r0[0x0]
80003666:	23 ce       	sub	lr,60
80003668:	00 00       	add	r0,r0
8000366a:	07 5f       	ld.sh	pc,--r3
8000366c:	00 00       	add	r0,r0
8000366e:	08 71       	tst	r1,r4
80003670:	00 00       	add	r0,r0
80003672:	07 60       	ld.uh	r0,--r3
80003674:	80 00       	ld.sh	r0,r0[0x0]
80003676:	36 80       	mov	r0,104
80003678:	00 00       	add	r0,r0
8000367a:	07 64       	ld.uh	r4,--r3
8000367c:	80 00       	ld.sh	r0,r0[0x0]
8000367e:	25 94       	sub	r4,89

80003680 <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
80003680:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
80003682:	58 0c       	cp.w	r12,0
80003684:	c1 21       	brne	800036a8 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
80003686:	48 a8       	lddpc	r8,800036ac <udi_cdc_data_sent+0x2c>
80003688:	11 88       	ld.ub	r8,r8[0x0]
8000368a:	58 08       	cp.w	r8,0
8000368c:	f9 b9 01 00 	movne	r9,0
80003690:	f9 b9 00 02 	moveq	r9,2
80003694:	30 08       	mov	r8,0
80003696:	48 7a       	lddpc	r10,800036b0 <udi_cdc_data_sent+0x30>
80003698:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
8000369c:	48 69       	lddpc	r9,800036b4 <udi_cdc_data_sent+0x34>
8000369e:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036a0:	48 69       	lddpc	r9,800036b8 <udi_cdc_data_sent+0x38>
800036a2:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036a4:	f0 1f 00 06 	mcall	800036bc <udi_cdc_data_sent+0x3c>
800036a8:	d8 02       	popm	pc
800036aa:	00 00       	add	r0,r0
800036ac:	00 00       	add	r0,r0
800036ae:	07 5f       	ld.sh	pc,--r3
800036b0:	00 00       	add	r0,r0
800036b2:	07 60       	ld.uh	r0,--r3
800036b4:	00 00       	add	r0,r0
800036b6:	08 71       	tst	r1,r4
800036b8:	00 00       	add	r0,r0
800036ba:	07 ee       	ld.ub	lr,r3[0x6]
800036bc:	80 00       	ld.sh	r0,r0[0x0]
800036be:	35 a8       	mov	r8,90

800036c0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036c0:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036c2:	f0 1f 00 02 	mcall	800036c8 <udi_cdc_data_sof_notify+0x8>
}
800036c6:	d8 02       	popm	pc
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	35 a8       	mov	r8,90

800036cc <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
800036cc:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
800036d0:	30 06       	mov	r6,0
800036d2:	48 f8       	lddpc	r8,8000370c <udi_cdc_data_enable+0x40>
800036d4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
800036d6:	48 f8       	lddpc	r8,80003710 <udi_cdc_data_enable+0x44>
800036d8:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
800036da:	48 f8       	lddpc	r8,80003714 <udi_cdc_data_enable+0x48>
800036dc:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
800036de:	48 f8       	lddpc	r8,80003718 <udi_cdc_data_enable+0x4c>
800036e0:	30 07       	mov	r7,0
800036e2:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
800036e4:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
800036e6:	48 e8       	lddpc	r8,8000371c <udi_cdc_data_enable+0x50>
800036e8:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
800036ea:	f0 1f 00 0e 	mcall	80003720 <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
800036ee:	48 e8       	lddpc	r8,80003724 <udi_cdc_data_enable+0x58>
800036f0:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
800036f2:	48 e8       	lddpc	r8,80003728 <udi_cdc_data_enable+0x5c>
800036f4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
800036f6:	48 e8       	lddpc	r8,8000372c <udi_cdc_data_enable+0x60>
800036f8:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
800036fa:	48 e8       	lddpc	r8,80003730 <udi_cdc_data_enable+0x64>
800036fc:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
800036fe:	f0 1f 00 0e 	mcall	80003734 <udi_cdc_data_enable+0x68>
80003702:	48 e8       	lddpc	r8,80003738 <udi_cdc_data_enable+0x6c>
80003704:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
80003706:	11 8c       	ld.ub	r12,r8[0x0]
}
80003708:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000370c:	00 00       	add	r0,r0
8000370e:	07 ee       	ld.ub	lr,r3[0x6]
80003710:	00 00       	add	r0,r0
80003712:	08 71       	tst	r1,r4
80003714:	00 00       	add	r0,r0
80003716:	07 5f       	ld.sh	pc,--r3
80003718:	00 00       	add	r0,r0
8000371a:	07 60       	ld.uh	r0,--r3
8000371c:	00 00       	add	r0,r0
8000371e:	07 ea       	ld.ub	r10,r3[0x6]
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	35 a8       	mov	r8,90
80003724:	00 00       	add	r0,r0
80003726:	08 70       	tst	r0,r4
80003728:	00 00       	add	r0,r0
8000372a:	07 ec       	ld.ub	r12,r3[0x6]
8000372c:	00 00       	add	r0,r0
8000372e:	07 e4       	ld.ub	r4,r3[0x6]
80003730:	00 00       	add	r0,r0
80003732:	07 e8       	ld.ub	r8,r3[0x6]
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	34 70       	mov	r0,71
80003738:	00 00       	add	r0,r0
8000373a:	07 ed       	ld.ub	sp,r3[0x6]

8000373c <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
8000373c:	d4 01       	pushm	lr
	udi_cdc_running = false;
8000373e:	30 09       	mov	r9,0
80003740:	48 38       	lddpc	r8,8000374c <udi_cdc_comm_disable+0x10>
80003742:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
80003744:	f0 1f 00 03 	mcall	80003750 <udi_cdc_comm_disable+0x14>
}
80003748:	d8 02       	popm	pc
8000374a:	00 00       	add	r0,r0
8000374c:	00 00       	add	r0,r0
8000374e:	07 ed       	ld.ub	sp,r3[0x6]
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	3f 04       	mov	r4,-16

80003754 <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
80003754:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003756:	30 0a       	mov	r10,0
80003758:	48 a8       	lddpc	r8,80003780 <udi_cdc_comm_enable+0x2c>
8000375a:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
8000375c:	48 a8       	lddpc	r8,80003784 <udi_cdc_comm_enable+0x30>
8000375e:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003760:	48 a8       	lddpc	r8,80003788 <udi_cdc_comm_enable+0x34>
80003762:	30 09       	mov	r9,0
80003764:	b0 8a       	st.b	r8[0x0],r10
80003766:	3c 2a       	mov	r10,-62
80003768:	b0 9a       	st.b	r8[0x1],r10
8000376a:	30 1a       	mov	r10,1
8000376c:	b0 aa       	st.b	r8[0x2],r10
8000376e:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003770:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
80003772:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003774:	30 89       	mov	r9,8
80003776:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
80003778:	f0 1f 00 05 	mcall	8000378c <udi_cdc_comm_enable+0x38>
}
8000377c:	d8 02       	popm	pc
8000377e:	00 00       	add	r0,r0
80003780:	00 00       	add	r0,r0
80003782:	08 72       	tst	r2,r4
80003784:	00 00       	add	r0,r0
80003786:	00 50       	eor	r0,r0
80003788:	00 00       	add	r0,r0
8000378a:	07 58       	ld.sh	r8,--r3
8000378c:	80 00       	ld.sh	r0,r0[0x0]
8000378e:	3e f8       	mov	r8,-17

80003790 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80003790:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80003794:	49 18       	lddpc	r8,800037d8 <udc_sof_notify+0x48>
80003796:	11 89       	ld.ub	r9,r8[0x0]
80003798:	30 08       	mov	r8,0
8000379a:	f0 09 18 00 	cp.b	r9,r8
8000379e:	c1 b0       	breq	800037d4 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037a0:	48 f8       	lddpc	r8,800037dc <udc_sof_notify+0x4c>
800037a2:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037a4:	70 09       	ld.w	r9,r8[0x0]
800037a6:	13 ca       	ld.ub	r10,r9[0x4]
800037a8:	30 09       	mov	r9,0
800037aa:	f2 0a 18 00 	cp.b	r10,r9
800037ae:	c1 30       	breq	800037d4 <udc_sof_notify+0x44>
800037b0:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037b2:	48 b6       	lddpc	r6,800037dc <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037b4:	70 18       	ld.w	r8,r8[0x4]
800037b6:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037ba:	70 48       	ld.w	r8,r8[0x10]
800037bc:	58 08       	cp.w	r8,0
800037be:	c0 20       	breq	800037c2 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037c0:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037c2:	2f f7       	sub	r7,-1
800037c4:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037c6:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037c8:	70 09       	ld.w	r9,r8[0x0]
800037ca:	13 c9       	ld.ub	r9,r9[0x4]
800037cc:	ee 09 18 00 	cp.b	r9,r7
800037d0:	fe 9b ff f2 	brhi	800037b4 <udc_sof_notify+0x24>
800037d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037d8:	00 00       	add	r0,r0
800037da:	08 7e       	tst	lr,r4
800037dc:	00 00       	add	r0,r0
800037de:	08 78       	tst	r8,r4

800037e0 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800037e0:	48 78       	lddpc	r8,800037fc <udc_get_eof_conf+0x1c>
800037e2:	70 08       	ld.w	r8,r8[0x0]
800037e4:	70 08       	ld.w	r8,r8[0x0]
800037e6:	11 aa       	ld.ub	r10,r8[0x2]
800037e8:	11 b9       	ld.ub	r9,r8[0x3]
800037ea:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800037ee:	5c c9       	swap.bh	r9
800037f0:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
800037f4:	f0 0c 00 0c 	add	r12,r8,r12
800037f8:	5e fc       	retal	r12
800037fa:	00 00       	add	r0,r0
800037fc:	00 00       	add	r0,r0
800037fe:	08 78       	tst	r8,r4

80003800 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003800:	eb cd 40 e0 	pushm	r5-r7,lr
80003804:	18 97       	mov	r7,r12
80003806:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003808:	49 b8       	lddpc	r8,80003874 <udc_update_iface_desc+0x74>
8000380a:	11 89       	ld.ub	r9,r8[0x0]
8000380c:	30 08       	mov	r8,0
8000380e:	f0 09 18 00 	cp.b	r9,r8
80003812:	c2 f0       	breq	80003870 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003814:	49 98       	lddpc	r8,80003878 <udc_update_iface_desc+0x78>
80003816:	70 08       	ld.w	r8,r8[0x0]
80003818:	70 08       	ld.w	r8,r8[0x0]
8000381a:	11 c9       	ld.ub	r9,r8[0x4]
8000381c:	18 9e       	mov	lr,r12
8000381e:	f8 09 18 00 	cp.b	r9,r12
80003822:	e0 88 00 27 	brls	80003870 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003826:	49 65       	lddpc	r5,8000387c <udc_update_iface_desc+0x7c>
80003828:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000382a:	f0 1f 00 16 	mcall	80003880 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000382e:	6a 08       	ld.w	r8,r5[0x0]
80003830:	10 3c       	cp.w	r12,r8
80003832:	e0 88 00 1f 	brls	80003870 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003836:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003838:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000383a:	11 9a       	ld.ub	r10,r8[0x1]
8000383c:	f6 0a 18 00 	cp.b	r10,r11
80003840:	c0 a1       	brne	80003854 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
80003842:	11 aa       	ld.ub	r10,r8[0x2]
80003844:	0e 9e       	mov	lr,r7
80003846:	ee 0a 18 00 	cp.b	r10,r7
8000384a:	c0 51       	brne	80003854 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
8000384c:	11 ba       	ld.ub	r10,r8[0x3]
8000384e:	ec 0a 18 00 	cp.b	r10,r6
80003852:	c0 b0       	breq	80003868 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80003854:	13 88       	ld.ub	r8,r9[0x0]
80003856:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000385a:	10 3c       	cp.w	r12,r8
8000385c:	fe 9b ff ee 	brhi	80003838 <udc_update_iface_desc+0x38>
80003860:	48 79       	lddpc	r9,8000387c <udc_update_iface_desc+0x7c>
80003862:	93 08       	st.w	r9[0x0],r8
80003864:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003868:	48 59       	lddpc	r9,8000387c <udc_update_iface_desc+0x7c>
8000386a:	93 08       	st.w	r9[0x0],r8
8000386c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003870:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003874:	00 00       	add	r0,r0
80003876:	08 7e       	tst	lr,r4
80003878:	00 00       	add	r0,r0
8000387a:	08 78       	tst	r8,r4
8000387c:	00 00       	add	r0,r0
8000387e:	08 84       	andn	r4,r4
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	37 e0       	mov	r0,126

80003884 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80003884:	eb cd 40 c0 	pushm	r6-r7,lr
80003888:	18 96       	mov	r6,r12
8000388a:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000388c:	f0 1f 00 11 	mcall	800038d0 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003890:	0d 88       	ld.ub	r8,r6[0x0]
80003892:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003894:	0c 3c       	cp.w	r12,r6
80003896:	e0 88 00 19 	brls	800038c8 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
8000389a:	0d 98       	ld.ub	r8,r6[0x1]
8000389c:	30 49       	mov	r9,4
8000389e:	f2 08 18 00 	cp.b	r8,r9
800038a2:	c1 30       	breq	800038c8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038a4:	ee 08 18 00 	cp.b	r8,r7
800038a8:	c0 a1       	brne	800038bc <udc_next_desc_in_iface+0x38>
800038aa:	c1 08       	rjmp	800038ca <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038ac:	0d 98       	ld.ub	r8,r6[0x1]
800038ae:	f2 08 18 00 	cp.b	r8,r9
800038b2:	c0 b0       	breq	800038c8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038b4:	ee 08 18 00 	cp.b	r8,r7
800038b8:	c0 31       	brne	800038be <udc_next_desc_in_iface+0x3a>
800038ba:	c0 88       	rjmp	800038ca <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038bc:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038be:	0d 88       	ld.ub	r8,r6[0x0]
800038c0:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038c2:	0c 3c       	cp.w	r12,r6
800038c4:	fe 9b ff f4 	brhi	800038ac <udc_next_desc_in_iface+0x28>
800038c8:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
800038ca:	0c 9c       	mov	r12,r6
800038cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800038d0:	80 00       	ld.sh	r0,r0[0x0]
800038d2:	37 e0       	mov	r0,126

800038d4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800038d4:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800038d6:	48 48       	lddpc	r8,800038e4 <udc_valid_address+0x10>
800038d8:	11 bc       	ld.ub	r12,r8[0x3]
800038da:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800038de:	f0 1f 00 03 	mcall	800038e8 <udc_valid_address+0x14>
}
800038e2:	d8 02       	popm	pc
800038e4:	00 00       	add	r0,r0
800038e6:	0a 00       	add	r0,r5
800038e8:	80 00       	ld.sh	r0,r0[0x0]
800038ea:	23 a0       	sub	r0,58

800038ec <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
800038ec:	eb cd 40 e0 	pushm	r5-r7,lr
800038f0:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
800038f2:	f0 1f 00 12 	mcall	80003938 <udc_iface_enable+0x4c>
800038f6:	c1 f0       	breq	80003934 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800038f8:	49 18       	lddpc	r8,8000393c <udc_iface_enable+0x50>
800038fa:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800038fc:	30 56       	mov	r6,5
800038fe:	0c 9b       	mov	r11,r6
80003900:	0e 9c       	mov	r12,r7
80003902:	f0 1f 00 10 	mcall	80003940 <udc_iface_enable+0x54>
80003906:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003908:	c0 d0       	breq	80003922 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
8000390a:	19 ca       	ld.ub	r10,r12[0x4]
8000390c:	19 d8       	ld.ub	r8,r12[0x5]
8000390e:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80003912:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003914:	5c 7a       	castu.h	r10
80003916:	19 bb       	ld.ub	r11,r12[0x3]
80003918:	19 ac       	ld.ub	r12,r12[0x2]
8000391a:	f0 1f 00 0b 	mcall	80003944 <udc_iface_enable+0x58>
8000391e:	cf 01       	brne	800038fe <udc_iface_enable+0x12>
80003920:	c0 a8       	rjmp	80003934 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003922:	48 a8       	lddpc	r8,80003948 <udc_iface_enable+0x5c>
80003924:	70 08       	ld.w	r8,r8[0x0]
80003926:	70 18       	ld.w	r8,r8[0x4]
80003928:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
8000392c:	70 0c       	ld.w	r12,r8[0x0]
8000392e:	5d 1c       	icall	r12
80003930:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003934:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	38 00       	mov	r0,-128
8000393c:	00 00       	add	r0,r0
8000393e:	08 84       	andn	r4,r4
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	38 84       	mov	r4,-120
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	28 ec       	sub	r12,-114
80003948:	00 00       	add	r0,r0
8000394a:	08 78       	tst	r8,r4

8000394c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000394c:	eb cd 40 e0 	pushm	r5-r7,lr
80003950:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003952:	18 97       	mov	r7,r12
80003954:	30 0b       	mov	r11,0
80003956:	f0 1f 00 12 	mcall	8000399c <udc_iface_disable+0x50>
8000395a:	c1 e0       	breq	80003996 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000395c:	49 18       	lddpc	r8,800039a0 <udc_iface_disable+0x54>
8000395e:	70 08       	ld.w	r8,r8[0x0]
80003960:	70 18       	ld.w	r8,r8[0x4]
80003962:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003966:	6a 3c       	ld.w	r12,r5[0xc]
80003968:	5d 1c       	icall	r12
8000396a:	18 9b       	mov	r11,r12
8000396c:	0c 9c       	mov	r12,r6
8000396e:	f0 1f 00 0c 	mcall	8000399c <udc_iface_disable+0x50>
80003972:	c1 20       	breq	80003996 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003974:	48 c8       	lddpc	r8,800039a4 <udc_iface_disable+0x58>
80003976:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003978:	30 56       	mov	r6,5
8000397a:	0c 9b       	mov	r11,r6
8000397c:	0e 9c       	mov	r12,r7
8000397e:	f0 1f 00 0b 	mcall	800039a8 <udc_iface_disable+0x5c>
80003982:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80003984:	c0 50       	breq	8000398e <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80003986:	19 ac       	ld.ub	r12,r12[0x2]
80003988:	f0 1f 00 09 	mcall	800039ac <udc_iface_disable+0x60>
		}
8000398c:	cf 7b       	rjmp	8000397a <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
8000398e:	6a 18       	ld.w	r8,r5[0x4]
80003990:	5d 18       	icall	r8
80003992:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80003996:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000399a:	00 00       	add	r0,r0
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	38 00       	mov	r0,-128
800039a0:	00 00       	add	r0,r0
800039a2:	08 78       	tst	r8,r4
800039a4:	00 00       	add	r0,r0
800039a6:	08 84       	andn	r4,r4
800039a8:	80 00       	ld.sh	r0,r0[0x0]
800039aa:	38 84       	mov	r4,-120
800039ac:	80 00       	ld.sh	r0,r0[0x0]
800039ae:	25 64       	sub	r4,86

800039b0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039b0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039b4:	49 38       	lddpc	r8,80003a00 <udc_reset+0x50>
800039b6:	11 89       	ld.ub	r9,r8[0x0]
800039b8:	30 08       	mov	r8,0
800039ba:	f0 09 18 00 	cp.b	r9,r8
800039be:	c1 70       	breq	800039ec <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039c0:	49 18       	lddpc	r8,80003a04 <udc_reset+0x54>
800039c2:	70 08       	ld.w	r8,r8[0x0]
800039c4:	70 08       	ld.w	r8,r8[0x0]
800039c6:	11 c9       	ld.ub	r9,r8[0x4]
800039c8:	30 08       	mov	r8,0
800039ca:	f0 09 18 00 	cp.b	r9,r8
800039ce:	c0 f0       	breq	800039ec <udc_reset+0x3c>
800039d0:	30 07       	mov	r7,0
800039d2:	48 d6       	lddpc	r6,80003a04 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
800039d4:	0e 9c       	mov	r12,r7
800039d6:	f0 1f 00 0d 	mcall	80003a08 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800039da:	2f f7       	sub	r7,-1
800039dc:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039de:	6c 08       	ld.w	r8,r6[0x0]
800039e0:	70 08       	ld.w	r8,r8[0x0]
800039e2:	11 c8       	ld.ub	r8,r8[0x4]
800039e4:	ee 08 18 00 	cp.b	r8,r7
800039e8:	fe 9b ff f6 	brhi	800039d4 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
800039ec:	30 09       	mov	r9,0
800039ee:	48 58       	lddpc	r8,80003a00 <udc_reset+0x50>
800039f0:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
800039f2:	e0 69 01 00 	mov	r9,256
800039f6:	48 68       	lddpc	r8,80003a0c <udc_reset+0x5c>
800039f8:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
800039fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800039fe:	00 00       	add	r0,r0
80003a00:	00 00       	add	r0,r0
80003a02:	08 7e       	tst	lr,r4
80003a04:	00 00       	add	r0,r0
80003a06:	08 78       	tst	r8,r4
80003a08:	80 00       	ld.sh	r0,r0[0x0]
80003a0a:	39 4c       	mov	r12,-108
80003a0c:	00 00       	add	r0,r0
80003a0e:	08 7c       	tst	r12,r4

80003a10 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a10:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a14:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a18:	30 09       	mov	r9,0
80003a1a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a1c:	30 0a       	mov	r10,0
80003a1e:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a20:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a22:	11 88       	ld.ub	r8,r8[0x0]
80003a24:	10 9a       	mov	r10,r8
80003a26:	f2 08 18 00 	cp.b	r8,r9
80003a2a:	c0 94       	brge	80003a3c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a2c:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a30:	92 3b       	ld.sh	r11,r9[0x6]
80003a32:	30 09       	mov	r9,0
80003a34:	f2 0b 19 00 	cp.h	r11,r9
80003a38:	e0 80 02 0a 	breq	80003e4c <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a3c:	10 99       	mov	r9,r8
80003a3e:	e2 19 00 60 	andl	r9,0x60,COH
80003a42:	e0 81 01 d9 	brne	80003df4 <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a46:	f2 0a 18 00 	cp.b	r10,r9
80003a4a:	e0 84 01 01 	brge	80003c4c <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a4e:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a52:	92 39       	ld.sh	r9,r9[0x6]
80003a54:	58 09       	cp.w	r9,0
80003a56:	e0 80 01 cf 	breq	80003df4 <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a5e:	e0 81 00 9e 	brne	80003b9a <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a62:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003a66:	15 9a       	ld.ub	r10,r10[0x1]
80003a68:	30 6b       	mov	r11,6
80003a6a:	f6 0a 18 00 	cp.b	r10,r11
80003a6e:	c1 a0       	breq	80003aa2 <udc_process_setup+0x92>
80003a70:	30 8b       	mov	r11,8
80003a72:	f6 0a 18 00 	cp.b	r10,r11
80003a76:	e0 80 00 85 	breq	80003b80 <udc_process_setup+0x170>
80003a7a:	30 0b       	mov	r11,0
80003a7c:	f6 0a 18 00 	cp.b	r10,r11
80003a80:	e0 81 00 8d 	brne	80003b9a <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003a84:	30 28       	mov	r8,2
80003a86:	f0 09 19 00 	cp.h	r9,r8
80003a8a:	c0 40       	breq	80003a92 <udc_process_setup+0x82>
80003a8c:	30 0c       	mov	r12,0
80003a8e:	e0 8f 01 af 	bral	80003dec <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003a92:	30 2b       	mov	r11,2
80003a94:	fe fc 03 c0 	ld.w	r12,pc[960]
80003a98:	f0 1f 00 f0 	mcall	80003e58 <udc_process_setup+0x448>
80003a9c:	30 1c       	mov	r12,1
80003a9e:	e0 8f 01 a7 	bral	80003dec <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003aa2:	fe f8 03 ae 	ld.w	r8,pc[942]
80003aa6:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003aa8:	f2 08 16 08 	lsr	r8,r9,0x8
80003aac:	30 2a       	mov	r10,2
80003aae:	f4 08 18 00 	cp.b	r8,r10
80003ab2:	c1 00       	breq	80003ad2 <udc_process_setup+0xc2>
80003ab4:	30 3a       	mov	r10,3
80003ab6:	f4 08 18 00 	cp.b	r8,r10
80003aba:	c2 a0       	breq	80003b0e <udc_process_setup+0xfe>
80003abc:	30 19       	mov	r9,1
80003abe:	f2 08 18 00 	cp.b	r8,r9
80003ac2:	c5 d1       	brne	80003b7c <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003ac4:	fe f8 03 98 	ld.w	r8,pc[920]
80003ac8:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003aca:	19 8b       	ld.ub	r11,r12[0x0]
80003acc:	f0 1f 00 e3 	mcall	80003e58 <udc_process_setup+0x448>
80003ad0:	c4 78       	rjmp	80003b5e <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003ad2:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003ad4:	fe f8 03 88 	ld.w	r8,pc[904]
80003ad8:	70 08       	ld.w	r8,r8[0x0]
80003ada:	f1 38 00 11 	ld.ub	r8,r8[17]
80003ade:	f2 08 18 00 	cp.b	r8,r9
80003ae2:	e0 88 00 4d 	brls	80003b7c <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003ae6:	fe f8 03 76 	ld.w	r8,pc[886]
80003aea:	70 18       	ld.w	r8,r8[0x4]
80003aec:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003af0:	19 a9       	ld.ub	r9,r12[0x2]
80003af2:	19 b8       	ld.ub	r8,r12[0x3]
80003af4:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003af8:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003afa:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003afe:	f0 1f 00 d7 	mcall	80003e58 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b02:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b06:	70 28       	ld.w	r8,r8[0x8]
80003b08:	30 29       	mov	r9,2
80003b0a:	b0 99       	st.b	r8[0x1],r9
80003b0c:	c2 98       	rjmp	80003b5e <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b0e:	5c 59       	castu.b	r9
80003b10:	58 19       	cp.w	r9,1
80003b12:	c1 00       	breq	80003b32 <udc_process_setup+0x122>
80003b14:	58 29       	cp.w	r9,2
80003b16:	c0 40       	breq	80003b1e <udc_process_setup+0x10e>
80003b18:	58 09       	cp.w	r9,0
80003b1a:	c0 60       	breq	80003b26 <udc_process_setup+0x116>
80003b1c:	c3 08       	rjmp	80003b7c <udc_process_setup+0x16c>
80003b1e:	fe fc 03 42 	ld.w	r12,pc[834]
80003b22:	30 3b       	mov	r11,3
80003b24:	c0 a8       	rjmp	80003b38 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b26:	30 4b       	mov	r11,4
80003b28:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b2c:	f0 1f 00 cb 	mcall	80003e58 <udc_process_setup+0x448>
80003b30:	c1 78       	rjmp	80003b5e <udc_process_setup+0x14e>
80003b32:	fe fc 03 36 	ld.w	r12,pc[822]
80003b36:	30 9b       	mov	r11,9
80003b38:	fe fa 03 34 	ld.w	r10,pc[820]
80003b3c:	2f ea       	sub	r10,-2
80003b3e:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b40:	11 39       	ld.ub	r9,r8++
80003b42:	5c c9       	swap.bh	r9
80003b44:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b46:	f0 0c 01 09 	sub	r9,r8,r12
80003b4a:	f6 09 18 00 	cp.b	r9,r11
80003b4e:	cf 93       	brcs	80003b40 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b50:	a1 7b       	lsl	r11,0x1
80003b52:	2f eb       	sub	r11,-2
80003b54:	fe fc 03 18 	ld.w	r12,pc[792]
80003b58:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b5a:	f0 1f 00 c0 	mcall	80003e58 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b5e:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b62:	90 39       	ld.sh	r9,r8[0x6]
80003b64:	90 68       	ld.sh	r8,r8[0xc]
80003b66:	f2 08 19 00 	cp.h	r8,r9
80003b6a:	e0 8b 00 04 	brhi	80003b72 <udc_process_setup+0x162>
80003b6e:	30 1c       	mov	r12,1
80003b70:	c3 e9       	rjmp	80003dec <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003b72:	fe f8 02 de 	ld.w	r8,pc[734]
80003b76:	b0 69       	st.h	r8[0xc],r9
80003b78:	30 1c       	mov	r12,1
80003b7a:	c3 99       	rjmp	80003dec <udc_process_setup+0x3dc>
80003b7c:	30 0c       	mov	r12,0
80003b7e:	c3 79       	rjmp	80003dec <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003b80:	30 18       	mov	r8,1
80003b82:	f0 09 19 00 	cp.h	r9,r8
80003b86:	c0 30       	breq	80003b8c <udc_process_setup+0x17c>
80003b88:	30 0c       	mov	r12,0
80003b8a:	c3 19       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003b8c:	30 1b       	mov	r11,1
80003b8e:	fe fc 02 e2 	ld.w	r12,pc[738]
80003b92:	f0 1f 00 b2 	mcall	80003e58 <udc_process_setup+0x448>
80003b96:	30 1c       	mov	r12,1
80003b98:	c2 a9       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003b9a:	58 18       	cp.w	r8,1
80003b9c:	c3 61       	brne	80003c08 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003b9e:	fe fa 02 b2 	ld.w	r10,pc[690]
80003ba2:	15 9b       	ld.ub	r11,r10[0x1]
80003ba4:	30 aa       	mov	r10,10
80003ba6:	f4 0b 18 00 	cp.b	r11,r10
80003baa:	c2 f1       	brne	80003c08 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003bac:	f0 09 19 00 	cp.h	r9,r8
80003bb0:	c2 a1       	brne	80003c04 <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003bb2:	fe f8 02 be 	ld.w	r8,pc[702]
80003bb6:	11 89       	ld.ub	r9,r8[0x0]
80003bb8:	30 08       	mov	r8,0
80003bba:	f0 09 18 00 	cp.b	r9,r8
80003bbe:	c2 30       	breq	80003c04 <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bc0:	fe f8 02 90 	ld.w	r8,pc[656]
80003bc4:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003bc6:	fe f8 02 ae 	ld.w	r8,pc[686]
80003bca:	70 08       	ld.w	r8,r8[0x0]
80003bcc:	70 08       	ld.w	r8,r8[0x0]
80003bce:	11 c8       	ld.ub	r8,r8[0x4]
80003bd0:	ee 08 18 00 	cp.b	r8,r7
80003bd4:	e0 88 00 18 	brls	80003c04 <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003bd8:	30 0b       	mov	r11,0
80003bda:	0e 9c       	mov	r12,r7
80003bdc:	f0 1f 00 a7 	mcall	80003e78 <udc_process_setup+0x468>
80003be0:	c1 20       	breq	80003c04 <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003be2:	fe f8 02 92 	ld.w	r8,pc[658]
80003be6:	70 08       	ld.w	r8,r8[0x0]
80003be8:	70 18       	ld.w	r8,r8[0x4]
80003bea:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003bee:	70 3c       	ld.w	r12,r8[0xc]
80003bf0:	5d 1c       	icall	r12
80003bf2:	fe f8 02 8a 	ld.w	r8,pc[650]
80003bf6:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003bf8:	30 1b       	mov	r11,1
80003bfa:	10 9c       	mov	r12,r8
80003bfc:	f0 1f 00 97 	mcall	80003e58 <udc_process_setup+0x448>
80003c00:	30 1c       	mov	r12,1
80003c02:	cf 58       	rjmp	80003dec <udc_process_setup+0x3dc>
80003c04:	30 0c       	mov	r12,0
80003c06:	cf 38       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c08:	58 28       	cp.w	r8,2
80003c0a:	e0 81 00 f5 	brne	80003df4 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c0e:	fe f8 02 42 	ld.w	r8,pc[578]
80003c12:	11 9a       	ld.ub	r10,r8[0x1]
80003c14:	30 08       	mov	r8,0
80003c16:	f0 0a 18 00 	cp.b	r10,r8
80003c1a:	e0 81 00 e8 	brne	80003dea <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c1e:	30 28       	mov	r8,2
80003c20:	f0 09 19 00 	cp.h	r9,r8
80003c24:	c0 30       	breq	80003c2a <udc_process_setup+0x21a>
80003c26:	30 0c       	mov	r12,0
80003c28:	ce 28       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c2a:	fe f8 02 26 	ld.w	r8,pc[550]
80003c2e:	11 dc       	ld.ub	r12,r8[0x5]
80003c30:	f0 1f 00 94 	mcall	80003e80 <udc_process_setup+0x470>
80003c34:	e0 68 01 00 	mov	r8,256
80003c38:	f9 b8 00 00 	moveq	r8,0
80003c3c:	fe fc 02 48 	ld.w	r12,pc[584]
80003c40:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c42:	30 2b       	mov	r11,2
80003c44:	f0 1f 00 85 	mcall	80003e58 <udc_process_setup+0x448>
80003c48:	30 1c       	mov	r12,1
80003c4a:	cd 18       	rjmp	80003dec <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c50:	c7 71       	brne	80003d3e <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c52:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c56:	13 99       	ld.ub	r9,r9[0x1]
80003c58:	30 3a       	mov	r10,3
80003c5a:	f4 09 18 00 	cp.b	r9,r10
80003c5e:	e0 80 00 c6 	breq	80003dea <udc_process_setup+0x3da>
80003c62:	e0 8b 00 07 	brhi	80003c70 <udc_process_setup+0x260>
80003c66:	30 1a       	mov	r10,1
80003c68:	f4 09 18 00 	cp.b	r9,r10
80003c6c:	c6 91       	brne	80003d3e <udc_process_setup+0x32e>
80003c6e:	c1 78       	rjmp	80003c9c <udc_process_setup+0x28c>
80003c70:	30 5a       	mov	r10,5
80003c72:	f4 09 18 00 	cp.b	r9,r10
80003c76:	c0 60       	breq	80003c82 <udc_process_setup+0x272>
80003c78:	30 9a       	mov	r10,9
80003c7a:	f4 09 18 00 	cp.b	r9,r10
80003c7e:	c6 01       	brne	80003d3e <udc_process_setup+0x32e>
80003c80:	c2 28       	rjmp	80003cc4 <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c82:	4f 48       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c84:	90 39       	ld.sh	r9,r8[0x6]
80003c86:	30 08       	mov	r8,0
80003c88:	f0 09 19 00 	cp.h	r9,r8
80003c8c:	c0 30       	breq	80003c92 <udc_process_setup+0x282>
80003c8e:	30 0c       	mov	r12,0
80003c90:	ca e8       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003c92:	4f e9       	lddpc	r9,80003e88 <udc_process_setup+0x478>
80003c94:	4e f8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c96:	91 49       	st.w	r8[0x10],r9
80003c98:	30 1c       	mov	r12,1
80003c9a:	ca 98       	rjmp	80003dec <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c9c:	4e d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c9e:	90 39       	ld.sh	r9,r8[0x6]
80003ca0:	30 08       	mov	r8,0
80003ca2:	f0 09 19 00 	cp.h	r9,r8
80003ca6:	c0 d1       	brne	80003cc0 <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003ca8:	4e a8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003caa:	90 19       	ld.sh	r9,r8[0x2]
80003cac:	30 18       	mov	r8,1
80003cae:	f0 09 19 00 	cp.h	r9,r8
80003cb2:	c0 71       	brne	80003cc0 <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003cb4:	4e 88       	lddpc	r8,80003e54 <udc_process_setup+0x444>
80003cb6:	90 09       	ld.sh	r9,r8[0x0]
80003cb8:	a9 d9       	cbr	r9,0x9
80003cba:	b0 09       	st.h	r8[0x0],r9
80003cbc:	30 1c       	mov	r12,1
80003cbe:	c9 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003cc0:	30 0c       	mov	r12,0
80003cc2:	c9 58       	rjmp	80003dec <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003cc4:	4e 38       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cc6:	90 39       	ld.sh	r9,r8[0x6]
80003cc8:	30 08       	mov	r8,0
80003cca:	f0 09 19 00 	cp.h	r9,r8
80003cce:	c3 41       	brne	80003d36 <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003cd0:	f0 1f 00 6f 	mcall	80003e8c <udc_process_setup+0x47c>
80003cd4:	c3 10       	breq	80003d36 <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003cd6:	4d f8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cd8:	11 b9       	ld.ub	r9,r8[0x3]
80003cda:	4e 18       	lddpc	r8,80003e5c <udc_process_setup+0x44c>
80003cdc:	70 08       	ld.w	r8,r8[0x0]
80003cde:	f1 38 00 11 	ld.ub	r8,r8[17]
80003ce2:	10 39       	cp.w	r9,r8
80003ce4:	e0 89 00 29 	brgt	80003d36 <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003ce8:	f0 1f 00 6a 	mcall	80003e90 <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003cec:	4d 98       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cee:	11 b8       	ld.ub	r8,r8[0x3]
80003cf0:	4e 09       	lddpc	r9,80003e70 <udc_process_setup+0x460>
80003cf2:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003cf4:	58 08       	cp.w	r8,0
80003cf6:	c2 20       	breq	80003d3a <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003cf8:	20 18       	sub	r8,1
80003cfa:	4d 99       	lddpc	r9,80003e5c <udc_process_setup+0x44c>
80003cfc:	72 19       	ld.w	r9,r9[0x4]
80003cfe:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d02:	4d d9       	lddpc	r9,80003e74 <udc_process_setup+0x464>
80003d04:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d06:	70 08       	ld.w	r8,r8[0x0]
80003d08:	11 c9       	ld.ub	r9,r8[0x4]
80003d0a:	30 08       	mov	r8,0
80003d0c:	f0 09 18 00 	cp.b	r9,r8
80003d10:	c1 50       	breq	80003d3a <udc_process_setup+0x32a>
80003d12:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d14:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d16:	4d 86       	lddpc	r6,80003e74 <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d18:	0a 9b       	mov	r11,r5
80003d1a:	0e 9c       	mov	r12,r7
80003d1c:	f0 1f 00 5e 	mcall	80003e94 <udc_process_setup+0x484>
80003d20:	c0 b0       	breq	80003d36 <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d22:	2f f7       	sub	r7,-1
80003d24:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d26:	6c 08       	ld.w	r8,r6[0x0]
80003d28:	70 08       	ld.w	r8,r8[0x0]
80003d2a:	11 c8       	ld.ub	r8,r8[0x4]
80003d2c:	ee 08 18 00 	cp.b	r8,r7
80003d30:	fe 9b ff f4 	brhi	80003d18 <udc_process_setup+0x308>
80003d34:	c0 38       	rjmp	80003d3a <udc_process_setup+0x32a>
80003d36:	30 0c       	mov	r12,0
80003d38:	c5 a8       	rjmp	80003dec <udc_process_setup+0x3dc>
80003d3a:	30 1c       	mov	r12,1
80003d3c:	c5 88       	rjmp	80003dec <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d3e:	58 18       	cp.w	r8,1
80003d40:	c2 21       	brne	80003d84 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d42:	4c 49       	lddpc	r9,80003e50 <udc_process_setup+0x440>
80003d44:	13 9a       	ld.ub	r10,r9[0x1]
80003d46:	30 b9       	mov	r9,11
80003d48:	f2 0a 18 00 	cp.b	r10,r9
80003d4c:	c1 c1       	brne	80003d84 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d4e:	4c 18       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d50:	90 39       	ld.sh	r9,r8[0x6]
80003d52:	30 08       	mov	r8,0
80003d54:	f0 09 19 00 	cp.h	r9,r8
80003d58:	c1 41       	brne	80003d80 <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d5a:	4c 68       	lddpc	r8,80003e70 <udc_process_setup+0x460>
80003d5c:	11 89       	ld.ub	r9,r8[0x0]
80003d5e:	30 08       	mov	r8,0
80003d60:	f0 09 18 00 	cp.b	r9,r8
80003d64:	c0 e0       	breq	80003d80 <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003d66:	4b b8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d68:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003d6a:	11 d7       	ld.ub	r7,r8[0x5]
80003d6c:	0e 9c       	mov	r12,r7
80003d6e:	f0 1f 00 4b 	mcall	80003e98 <udc_process_setup+0x488>
80003d72:	c0 70       	breq	80003d80 <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003d74:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003d78:	0e 9c       	mov	r12,r7
80003d7a:	f0 1f 00 47 	mcall	80003e94 <udc_process_setup+0x484>
80003d7e:	c3 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003d80:	30 0c       	mov	r12,0
80003d82:	c3 58       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003d84:	58 28       	cp.w	r8,2
80003d86:	c3 71       	brne	80003df4 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d88:	4b 28       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d8a:	11 98       	ld.ub	r8,r8[0x1]
80003d8c:	30 19       	mov	r9,1
80003d8e:	f2 08 18 00 	cp.b	r8,r9
80003d92:	c0 60       	breq	80003d9e <udc_process_setup+0x38e>
80003d94:	30 39       	mov	r9,3
80003d96:	f2 08 18 00 	cp.b	r8,r9
80003d9a:	c2 81       	brne	80003dea <udc_process_setup+0x3da>
80003d9c:	c1 48       	rjmp	80003dc4 <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003d9e:	4a d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003da0:	90 39       	ld.sh	r9,r8[0x6]
80003da2:	30 08       	mov	r8,0
80003da4:	f0 09 19 00 	cp.h	r9,r8
80003da8:	c0 c1       	brne	80003dc0 <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003daa:	4a a8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dac:	90 19       	ld.sh	r9,r8[0x2]
80003dae:	30 08       	mov	r8,0
80003db0:	f0 09 19 00 	cp.h	r9,r8
80003db4:	c0 61       	brne	80003dc0 <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003db6:	4a 78       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003db8:	11 dc       	ld.ub	r12,r8[0x5]
80003dba:	f0 1f 00 39 	mcall	80003e9c <udc_process_setup+0x48c>
80003dbe:	c1 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003dc0:	30 0c       	mov	r12,0
80003dc2:	c1 58       	rjmp	80003dec <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dc4:	4a 38       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dc6:	90 39       	ld.sh	r9,r8[0x6]
80003dc8:	30 08       	mov	r8,0
80003dca:	f0 09 19 00 	cp.h	r9,r8
80003dce:	c0 c1       	brne	80003de6 <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003dd0:	4a 08       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dd2:	90 19       	ld.sh	r9,r8[0x2]
80003dd4:	30 08       	mov	r8,0
80003dd6:	f0 09 19 00 	cp.h	r9,r8
80003dda:	c0 61       	brne	80003de6 <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003ddc:	49 d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dde:	11 dc       	ld.ub	r12,r8[0x5]
80003de0:	f0 1f 00 30 	mcall	80003ea0 <udc_process_setup+0x490>
80003de4:	c0 48       	rjmp	80003dec <udc_process_setup+0x3dc>
80003de6:	30 0c       	mov	r12,0
80003de8:	c0 28       	rjmp	80003dec <udc_process_setup+0x3dc>
80003dea:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003dec:	58 0c       	cp.w	r12,0
80003dee:	c0 30       	breq	80003df4 <udc_process_setup+0x3e4>
80003df0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003df4:	49 78       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003df6:	11 88       	ld.ub	r8,r8[0x0]
80003df8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003dfc:	58 18       	cp.w	r8,1
80003dfe:	c2 71       	brne	80003e4c <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e00:	49 c8       	lddpc	r8,80003e70 <udc_process_setup+0x460>
80003e02:	11 89       	ld.ub	r9,r8[0x0]
80003e04:	30 08       	mov	r8,0
80003e06:	f0 09 18 00 	cp.b	r9,r8
80003e0a:	c2 10       	breq	80003e4c <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e0c:	49 18       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003e0e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e10:	49 98       	lddpc	r8,80003e74 <udc_process_setup+0x464>
80003e12:	70 08       	ld.w	r8,r8[0x0]
80003e14:	70 08       	ld.w	r8,r8[0x0]
80003e16:	11 c8       	ld.ub	r8,r8[0x4]
80003e18:	ee 08 18 00 	cp.b	r8,r7
80003e1c:	e0 88 00 18 	brls	80003e4c <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e20:	0e 96       	mov	r6,r7
80003e22:	30 0b       	mov	r11,0
80003e24:	0e 9c       	mov	r12,r7
80003e26:	f0 1f 00 15 	mcall	80003e78 <udc_process_setup+0x468>
80003e2a:	c1 10       	breq	80003e4c <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e2c:	49 28       	lddpc	r8,80003e74 <udc_process_setup+0x464>
80003e2e:	70 08       	ld.w	r8,r8[0x0]
80003e30:	70 18       	ld.w	r8,r8[0x4]
80003e32:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e36:	6e 3c       	ld.w	r12,r7[0xc]
80003e38:	5d 1c       	icall	r12
80003e3a:	18 9b       	mov	r11,r12
80003e3c:	0c 9c       	mov	r12,r6
80003e3e:	f0 1f 00 0f 	mcall	80003e78 <udc_process_setup+0x468>
80003e42:	c0 50       	breq	80003e4c <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e44:	6e 2c       	ld.w	r12,r7[0x8]
80003e46:	5d 1c       	icall	r12
80003e48:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e4c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e50:	00 00       	add	r0,r0
80003e52:	0a 00       	add	r0,r5
80003e54:	00 00       	add	r0,r0
80003e56:	08 7c       	tst	r12,r4
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	23 e8       	sub	r8,62
80003e5c:	00 00       	add	r0,r0
80003e5e:	00 b0       	st.h	r0++,r0
80003e60:	00 00       	add	r0,r0
80003e62:	00 cc       	st.b	r0++,r12
80003e64:	00 00       	add	r0,r0
80003e66:	00 f0       	st.b	--r0,r0
80003e68:	00 00       	add	r0,r0
80003e6a:	00 d0       	st.w	--r0,r0
80003e6c:	00 00       	add	r0,r0
80003e6e:	00 dc       	st.w	--r0,r12
80003e70:	00 00       	add	r0,r0
80003e72:	08 7e       	tst	lr,r4
80003e74:	00 00       	add	r0,r0
80003e76:	08 78       	tst	r8,r4
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	38 00       	mov	r0,-128
80003e7c:	00 00       	add	r0,r0
80003e7e:	08 74       	tst	r4,r4
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	23 f4       	sub	r4,63
80003e84:	00 00       	add	r0,r0
80003e86:	08 80       	andn	r0,r4
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	38 d4       	mov	r4,-115
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	23 c2       	sub	r2,60
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	39 b0       	mov	r0,-101
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	38 ec       	mov	r12,-114
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	39 4c       	mov	r12,-108
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	24 84       	sub	r4,72
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	24 08       	sub	r8,64

80003ea4 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003ea4:	eb cd 40 fc 	pushm	r2-r7,lr
80003ea8:	20 1d       	sub	sp,4
80003eaa:	16 94       	mov	r4,r11
80003eac:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003eae:	58 0c       	cp.w	r12,0
80003eb0:	c0 30       	breq	80003eb6 <_read+0x12>
80003eb2:	3f f7       	mov	r7,-1
80003eb4:	c1 98       	rjmp	80003ee6 <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003eb6:	58 0a       	cp.w	r10,0
80003eb8:	e0 89 00 04 	brgt	80003ec0 <_read+0x1c>
80003ebc:	30 07       	mov	r7,0
80003ebe:	c1 48       	rjmp	80003ee6 <_read+0x42>
80003ec0:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003ec2:	48 c3       	lddpc	r3,80003ef0 <_read+0x4c>
80003ec4:	48 c6       	lddpc	r6,80003ef4 <_read+0x50>
80003ec6:	1a 92       	mov	r2,sp
80003ec8:	66 0c       	ld.w	r12,r3[0x0]
80003eca:	6c 08       	ld.w	r8,r6[0x0]
80003ecc:	1a 9b       	mov	r11,sp
80003ece:	5d 18       	icall	r8
		if (c < 0)
80003ed0:	40 08       	lddsp	r8,sp[0x0]
80003ed2:	58 08       	cp.w	r8,0
80003ed4:	c0 95       	brlt	80003ee6 <_read+0x42>
		break;
		*ptr++ = c;
80003ed6:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003eda:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003edc:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003ee0:	58 08       	cp.w	r8,0
80003ee2:	fe 99 ff f3 	brgt	80003ec8 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003ee6:	0e 9c       	mov	r12,r7
80003ee8:	2f fd       	sub	sp,-4
80003eea:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003eee:	00 00       	add	r0,r0
80003ef0:	00 00       	add	r0,r0
80003ef2:	0a 28       	rsub	r8,r5
80003ef4:	00 00       	add	r0,r0
80003ef6:	0a 20       	rsub	r0,r5

80003ef8 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003ef8:	30 19       	mov	r9,1
80003efa:	48 28       	lddpc	r8,80003f00 <stdio_usb_enable+0x8>
80003efc:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003efe:	5e ff       	retal	1
80003f00:	00 00       	add	r0,r0
80003f02:	08 88       	andn	r8,r4

80003f04 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f04:	30 09       	mov	r9,0
80003f06:	48 28       	lddpc	r8,80003f0c <stdio_usb_disable+0x8>
80003f08:	b0 89       	st.b	r8[0x0],r9
}
80003f0a:	5e fc       	retal	r12
80003f0c:	00 00       	add	r0,r0
80003f0e:	08 88       	andn	r8,r4

80003f10 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f10:	d4 01       	pushm	lr
	if (b_high) {
80003f12:	58 0c       	cp.w	r12,0
80003f14:	c0 40       	breq	80003f1c <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f16:	f0 1f 00 04 	mcall	80003f24 <stdio_usb_vbus_event+0x14>
80003f1a:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f1c:	f0 1f 00 03 	mcall	80003f28 <stdio_usb_vbus_event+0x18>
80003f20:	d8 02       	popm	pc
80003f22:	00 00       	add	r0,r0
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	2a 7c       	sub	r12,-89
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	27 2c       	sub	r12,114

80003f2c <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f2c:	d4 01       	pushm	lr
	stdio_base = usart;
80003f2e:	48 98       	lddpc	r8,80003f50 <stdio_usb_init+0x24>
80003f30:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f32:	48 99       	lddpc	r9,80003f54 <stdio_usb_init+0x28>
80003f34:	48 98       	lddpc	r8,80003f58 <stdio_usb_init+0x2c>
80003f36:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f38:	48 99       	lddpc	r9,80003f5c <stdio_usb_init+0x30>
80003f3a:	48 a8       	lddpc	r8,80003f60 <stdio_usb_init+0x34>
80003f3c:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f3e:	f0 1f 00 0a 	mcall	80003f64 <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f42:	f0 1f 00 0a 	mcall	80003f68 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f46:	c0 41       	brne	80003f4e <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f48:	30 1c       	mov	r12,1
80003f4a:	f0 1f 00 09 	mcall	80003f6c <stdio_usb_init+0x40>
80003f4e:	d8 02       	popm	pc
80003f50:	00 00       	add	r0,r0
80003f52:	0a 28       	rsub	r8,r5
80003f54:	80 00       	ld.sh	r0,r0[0x0]
80003f56:	3f 9c       	mov	r12,-7
80003f58:	00 00       	add	r0,r0
80003f5a:	0a 24       	rsub	r4,r5
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	3f 70       	mov	r0,-9
80003f60:	00 00       	add	r0,r0
80003f62:	0a 20       	rsub	r0,r5
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	2a ec       	sub	r12,-82
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	23 9c       	sub	r12,57
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3f 10       	mov	r0,-15

80003f70 <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003f70:	eb cd 40 80 	pushm	r7,lr
80003f74:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f76:	48 88       	lddpc	r8,80003f94 <stdio_usb_getchar+0x24>
80003f78:	11 89       	ld.ub	r9,r8[0x0]
80003f7a:	30 08       	mov	r8,0
80003f7c:	f0 09 18 00 	cp.b	r9,r8
80003f80:	c0 51       	brne	80003f8a <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003f82:	30 08       	mov	r8,0
80003f84:	97 08       	st.w	r11[0x0],r8
		return;
80003f86:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003f8a:	f0 1f 00 04 	mcall	80003f98 <stdio_usb_getchar+0x28>
80003f8e:	8f 0c       	st.w	r7[0x0],r12
80003f90:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f94:	00 00       	add	r0,r0
80003f96:	08 88       	andn	r8,r4
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	34 f4       	mov	r4,79

80003f9c <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003f9c:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f9e:	48 78       	lddpc	r8,80003fb8 <stdio_usb_putchar+0x1c>
80003fa0:	11 89       	ld.ub	r9,r8[0x0]
80003fa2:	30 08       	mov	r8,0
80003fa4:	f0 09 18 00 	cp.b	r9,r8
80003fa8:	c0 60       	breq	80003fb4 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003faa:	16 9c       	mov	r12,r11
80003fac:	f0 1f 00 04 	mcall	80003fbc <stdio_usb_putchar+0x20>
80003fb0:	c0 21       	brne	80003fb4 <stdio_usb_putchar+0x18>
80003fb2:	dc 0a       	popm	pc,r12=-1
80003fb4:	d8 0a       	popm	pc,r12=0
80003fb6:	00 00       	add	r0,r0
80003fb8:	00 00       	add	r0,r0
80003fba:	08 88       	andn	r8,r4
80003fbc:	80 00       	ld.sh	r0,r0[0x0]
80003fbe:	33 f4       	mov	r4,63

80003fc0 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003fc0:	eb cd 40 f8 	pushm	r3-r7,lr
80003fc4:	16 94       	mov	r4,r11
80003fc6:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80003fc8:	20 1c       	sub	r12,1
80003fca:	58 2c       	cp.w	r12,2
80003fcc:	e0 8b 00 13 	brhi	80003ff2 <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fd0:	58 0a       	cp.w	r10,0
80003fd2:	c0 31       	brne	80003fd8 <_write+0x18>
80003fd4:	30 07       	mov	r7,0
80003fd6:	c0 f8       	rjmp	80003ff4 <_write+0x34>
80003fd8:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003fda:	48 93       	lddpc	r3,80003ffc <_write+0x3c>
80003fdc:	48 96       	lddpc	r6,80004000 <_write+0x40>
80003fde:	66 0c       	ld.w	r12,r3[0x0]
80003fe0:	6c 08       	ld.w	r8,r6[0x0]
80003fe2:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80003fe6:	5d 18       	icall	r8
80003fe8:	c0 55       	brlt	80003ff2 <_write+0x32>
				return -1;
			}
			++nChars;
80003fea:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fec:	0e 35       	cp.w	r5,r7
80003fee:	cf 81       	brne	80003fde <_write+0x1e>
80003ff0:	c0 28       	rjmp	80003ff4 <_write+0x34>
80003ff2:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80003ff4:	0e 9c       	mov	r12,r7
80003ff6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003ffa:	00 00       	add	r0,r0
80003ffc:	00 00       	add	r0,r0
80003ffe:	0a 28       	rsub	r8,r5
80004000:	00 00       	add	r0,r0
80004002:	0a 24       	rsub	r4,r5

80004004 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
80004004:	f8 c8 ff f8 	sub	r8,r12,-8
80004008:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
8000400a:	3f f9       	mov	r9,-1
8000400c:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
8000400e:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
80004010:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
80004012:	30 08       	mov	r8,0
80004014:	99 08       	st.w	r12[0x0],r8
}
80004016:	5e fc       	retal	r12

80004018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004018:	30 08       	mov	r8,0
8000401a:	99 48       	st.w	r12[0x10],r8
}
8000401c:	5e fc       	retal	r12

8000401e <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
8000401e:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
80004020:	70 19       	ld.w	r9,r8[0x4]
80004022:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
80004024:	78 19       	ld.w	r9,r12[0x4]
80004026:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004028:	70 19       	ld.w	r9,r8[0x4]
8000402a:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
8000402c:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
8000402e:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004030:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004032:	78 08       	ld.w	r8,r12[0x0]
80004034:	2f f8       	sub	r8,-1
80004036:	99 08       	st.w	r12[0x0],r8
}
80004038:	5e fc       	retal	r12

8000403a <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
8000403a:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
8000403c:	5b fa       	cp.w	r10,-1
8000403e:	c0 31       	brne	80004044 <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80004040:	78 48       	ld.w	r8,r12[0x10]
80004042:	c0 c8       	rjmp	8000405a <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
80004044:	f8 c8 ff f8 	sub	r8,r12,-8
80004048:	70 19       	ld.w	r9,r8[0x4]
8000404a:	72 09       	ld.w	r9,r9[0x0]
8000404c:	12 3a       	cp.w	r10,r9
8000404e:	c0 63       	brcs	8000405a <vListInsert+0x20>
80004050:	70 18       	ld.w	r8,r8[0x4]
80004052:	70 19       	ld.w	r9,r8[0x4]
80004054:	72 09       	ld.w	r9,r9[0x0]
80004056:	12 3a       	cp.w	r10,r9
80004058:	cf c2       	brcc	80004050 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000405a:	70 19       	ld.w	r9,r8[0x4]
8000405c:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
8000405e:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
80004060:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
80004062:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004064:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004066:	78 08       	ld.w	r8,r12[0x0]
80004068:	2f f8       	sub	r8,-1
8000406a:	99 08       	st.w	r12[0x0],r8
}
8000406c:	5e fc       	retal	r12

8000406e <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
8000406e:	78 18       	ld.w	r8,r12[0x4]
80004070:	78 29       	ld.w	r9,r12[0x8]
80004072:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80004074:	78 28       	ld.w	r8,r12[0x8]
80004076:	78 19       	ld.w	r9,r12[0x4]
80004078:	91 19       	st.w	r8[0x4],r9
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
8000407a:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
8000407c:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
8000407e:	18 39       	cp.w	r9,r12
80004080:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
80004084:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
80004088:	30 09       	mov	r9,0
8000408a:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
8000408c:	70 09       	ld.w	r9,r8[0x0]
8000408e:	20 19       	sub	r9,1
80004090:	91 09       	st.w	r8[0x0],r9
}
80004092:	5e fc       	retal	r12

80004094 <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
80004094:	e0 68 08 08 	mov	r8,2056
80004098:	ea 18 08 08 	orh	r8,0x808
8000409c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
8000409e:	e0 68 09 09 	mov	r8,2313
800040a2:	ea 18 09 09 	orh	r8,0x909
800040a6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
800040a8:	e0 68 0a 0a 	mov	r8,2570
800040ac:	ea 18 0a 0a 	orh	r8,0xa0a
800040b0:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
800040b2:	e0 68 0b 0b 	mov	r8,2827
800040b6:	ea 18 0b 0b 	orh	r8,0xb0b
800040ba:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
800040bc:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
800040be:	e0 68 be ef 	mov	r8,48879
800040c2:	ea 18 de ad 	orh	r8,0xdead
800040c6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
800040c8:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
800040ca:	fc 18 00 40 	movh	r8,0x40
800040ce:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
800040d0:	e0 68 00 ff 	mov	r8,255
800040d4:	ea 18 ff 00 	orh	r8,0xff00
800040d8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
800040da:	e0 68 01 01 	mov	r8,257
800040de:	ea 18 01 01 	orh	r8,0x101
800040e2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
800040e4:	e0 68 02 02 	mov	r8,514
800040e8:	ea 18 02 02 	orh	r8,0x202
800040ec:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
800040ee:	e0 68 03 03 	mov	r8,771
800040f2:	ea 18 03 03 	orh	r8,0x303
800040f6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
800040f8:	e0 68 04 04 	mov	r8,1028
800040fc:	ea 18 04 04 	orh	r8,0x404
80004100:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
80004102:	e0 68 05 05 	mov	r8,1285
80004106:	ea 18 05 05 	orh	r8,0x505
8000410a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
8000410c:	e0 68 06 06 	mov	r8,1542
80004110:	ea 18 06 06 	orh	r8,0x606
80004114:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
80004116:	e0 68 07 07 	mov	r8,1799
8000411a:	ea 18 07 07 	orh	r8,0x707
8000411e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
80004120:	30 08       	mov	r8,0
80004122:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
80004124:	5e fc       	retal	r12
80004126:	d7 03       	nop

80004128 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004128:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
8000412a:	48 38       	lddpc	r8,80004134 <vPortEnterCritical+0xc>
8000412c:	70 09       	ld.w	r9,r8[0x0]
8000412e:	2f f9       	sub	r9,-1
80004130:	91 09       	st.w	r8[0x0],r9
}
80004132:	5e fc       	retal	r12
80004134:	00 00       	add	r0,r0
80004136:	00 f4       	st.b	--r0,r4

80004138 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004138:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
8000413a:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
8000413c:	30 0a       	mov	r10,0
8000413e:	14 9b       	mov	r11,r10
80004140:	49 2c       	lddpc	r12,80004188 <xPortStartScheduler+0x50>
80004142:	f0 1f 00 13 	mcall	8000418c <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
80004146:	e0 68 2e e0 	mov	r8,12000
8000414a:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
8000414e:	30 08       	mov	r8,0
80004150:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
80004154:	e0 68 09 5c 	mov	r8,2396
80004158:	ea 18 00 00 	orh	r8,0x0
8000415c:	70 00       	ld.w	r0,r8[0x0]
8000415e:	60 0d       	ld.w	sp,r0[0x0]
80004160:	1b 00       	ld.w	r0,sp++
80004162:	e0 68 00 f4 	mov	r8,244
80004166:	ea 18 00 00 	orh	r8,0x0
8000416a:	91 00       	st.w	r8[0x0],r0
8000416c:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004170:	2f ed       	sub	sp,-8
80004172:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
80004176:	fa f0 ff e0 	ld.w	r0,sp[-32]
8000417a:	e3 b0 00 00 	mtsr	0x0,r0
8000417e:	fa f0 ff dc 	ld.w	r0,sp[-36]
80004182:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
80004186:	d8 0a       	popm	pc,r12=0
80004188:	80 00       	ld.sh	r0,r0[0x0]
8000418a:	42 54       	lddsp	r4,sp[0x94]
8000418c:	80 00       	ld.sh	r0,r0[0x0]
8000418e:	22 0c       	sub	r12,32

80004190 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
80004190:	20 6d       	sub	sp,24
80004192:	eb cd 00 ff 	pushm	r0-r7
80004196:	fa c7 ff c0 	sub	r7,sp,-64
8000419a:	ee f0 ff f8 	ld.w	r0,r7[-8]
8000419e:	ef 40 ff e0 	st.w	r7[-32],r0
800041a2:	ee f0 ff fc 	ld.w	r0,r7[-4]
800041a6:	ef 40 ff e4 	st.w	r7[-28],r0
800041aa:	eb c7 5f 00 	stm	--r7,r8-r12,lr
800041ae:	e0 68 00 f4 	mov	r8,244
800041b2:	ea 18 00 00 	orh	r8,0x0
800041b6:	70 00       	ld.w	r0,r8[0x0]
800041b8:	1a d0       	st.w	--sp,r0
800041ba:	f0 1f 00 1a 	mcall	80004220 <LABEL_RET_SCALL_266+0x14>
800041be:	e0 68 09 5c 	mov	r8,2396
800041c2:	ea 18 00 00 	orh	r8,0x0
800041c6:	70 00       	ld.w	r0,r8[0x0]
800041c8:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
800041ca:	f0 1f 00 17 	mcall	80004224 <LABEL_RET_SCALL_266+0x18>
	portRESTORE_CONTEXT_SCALL();
800041ce:	e0 68 09 5c 	mov	r8,2396
800041d2:	ea 18 00 00 	orh	r8,0x0
800041d6:	70 00       	ld.w	r0,r8[0x0]
800041d8:	60 0d       	ld.w	sp,r0[0x0]
800041da:	1b 00       	ld.w	r0,sp++
800041dc:	e0 68 00 f4 	mov	r8,244
800041e0:	ea 18 00 00 	orh	r8,0x0
800041e4:	91 00       	st.w	r8[0x0],r0
800041e6:	fa c7 ff d8 	sub	r7,sp,-40
800041ea:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
800041ee:	ee f0 ff e0 	ld.w	r0,r7[-32]
800041f2:	e0 61 00 f4 	mov	r1,244
800041f6:	ea 11 00 00 	orh	r1,0x0
800041fa:	62 02       	ld.w	r2,r1[0x0]
800041fc:	58 02       	cp.w	r2,0
800041fe:	c0 70       	breq	8000420c <LABEL_RET_SCALL_266>
80004200:	e4 c2 00 01 	sub	r2,r2,1
80004204:	83 02       	st.w	r1[0x0],r2
80004206:	58 02       	cp.w	r2,0
80004208:	c0 21       	brne	8000420c <LABEL_RET_SCALL_266>
8000420a:	b1 c0       	cbr	r0,0x10

8000420c <LABEL_RET_SCALL_266>:
8000420c:	ef 40 ff f8 	st.w	r7[-8],r0
80004210:	ee f0 ff e4 	ld.w	r0,r7[-28]
80004214:	ef 40 ff fc 	st.w	r7[-4],r0
80004218:	e3 cd 00 ff 	ldm	sp++,r0-r7
8000421c:	2f ad       	sub	sp,-24
8000421e:	d6 13       	rets
80004220:	80 00       	ld.sh	r0,r0[0x0]
80004222:	41 28       	lddsp	r8,sp[0x48]
80004224:	80 00       	ld.sh	r0,r0[0x0]
80004226:	43 68       	lddsp	r8,sp[0xd8]

80004228 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004228:	e1 b8 00 43 	mfsr	r8,0x10c
8000422c:	e3 b8 00 43 	mtsr	0x10c,r8
	}
80004230:	5e fc       	retal	r12
80004232:	d7 03       	nop

80004234 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80004234:	48 78       	lddpc	r8,80004250 <vPortExitCritical+0x1c>
80004236:	70 08       	ld.w	r8,r8[0x0]
80004238:	58 08       	cp.w	r8,0
8000423a:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
8000423c:	48 58       	lddpc	r8,80004250 <vPortExitCritical+0x1c>
8000423e:	70 09       	ld.w	r9,r8[0x0]
80004240:	20 19       	sub	r9,1
80004242:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80004244:	70 08       	ld.w	r8,r8[0x0]
80004246:	58 08       	cp.w	r8,0
80004248:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
8000424a:	d5 03       	csrf	0x10
8000424c:	5e fc       	retal	r12
8000424e:	00 00       	add	r0,r0
80004250:	00 00       	add	r0,r0
80004252:	00 f4       	st.b	--r0,r4

80004254 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80004254:	eb cd 00 ff 	pushm	r0-r7
80004258:	e0 68 00 f4 	mov	r8,244
8000425c:	ea 18 00 00 	orh	r8,0x0
80004260:	70 00       	ld.w	r0,r8[0x0]
80004262:	1a d0       	st.w	--sp,r0
80004264:	7a 90       	ld.w	r0,sp[0x24]
80004266:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
8000426a:	58 10       	cp.w	r0,1
8000426c:	e0 8b 00 08 	brhi	8000427c <LABEL_INT_SKIP_SAVE_CONTEXT_240>
80004270:	e0 68 09 5c 	mov	r8,2396
80004274:	ea 18 00 00 	orh	r8,0x0
80004278:	70 00       	ld.w	r0,r8[0x0]
8000427a:	81 0d       	st.w	r0[0x0],sp

8000427c <LABEL_INT_SKIP_SAVE_CONTEXT_240>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
8000427c:	f0 1f 00 12 	mcall	800042c4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
80004280:	f0 1f 00 12 	mcall	800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
		vTaskIncrementTick();
80004284:	f0 1f 00 12 	mcall	800042cc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x1c>
	portEXIT_CRITICAL();
80004288:	f0 1f 00 12 	mcall	800042d0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
8000428c:	7a 90       	ld.w	r0,sp[0x24]
8000428e:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004292:	58 10       	cp.w	r0,1
80004294:	e0 8b 00 0e 	brhi	800042b0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>
80004298:	f0 1f 00 0c 	mcall	800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
8000429c:	f0 1f 00 0e 	mcall	800042d4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x24>
800042a0:	f0 1f 00 0c 	mcall	800042d0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>
800042a4:	e0 68 09 5c 	mov	r8,2396
800042a8:	ea 18 00 00 	orh	r8,0x0
800042ac:	70 00       	ld.w	r0,r8[0x0]
800042ae:	60 0d       	ld.w	sp,r0[0x0]

800042b0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>:
800042b0:	1b 00       	ld.w	r0,sp++
800042b2:	e0 68 00 f4 	mov	r8,244
800042b6:	ea 18 00 00 	orh	r8,0x0
800042ba:	91 00       	st.w	r8[0x0],r0
800042bc:	e3 cd 00 ff 	ldm	sp++,r0-r7
800042c0:	d6 03       	rete
800042c2:	00 00       	add	r0,r0
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	42 28       	lddsp	r8,sp[0x88]
800042c8:	80 00       	ld.sh	r0,r0[0x0]
800042ca:	41 28       	lddsp	r8,sp[0x48]
800042cc:	80 00       	ld.sh	r0,r0[0x0]
800042ce:	43 e4       	lddsp	r4,sp[0xf8]
800042d0:	80 00       	ld.sh	r0,r0[0x0]
800042d2:	42 34       	lddsp	r4,sp[0x8c]
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	43 68       	lddsp	r8,sp[0xd8]

800042d8 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
800042d8:	d4 01       	pushm	lr
	vTaskSuspendAll();
800042da:	f0 1f 00 02 	mcall	800042e0 <__malloc_lock+0x8>
}
800042de:	d8 02       	popm	pc
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	43 58       	lddsp	r8,sp[0xd4]

800042e4 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
800042e4:	d4 01       	pushm	lr
	xTaskResumeAll();
800042e6:	f0 1f 00 02 	mcall	800042ec <__malloc_unlock+0x8>
}
800042ea:	d8 02       	popm	pc
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	44 fc       	lddsp	r12,sp[0x13c]

800042f0 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
800042f0:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
800042f2:	48 48       	lddpc	r8,80004300 <_init_startup+0x10>
800042f4:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
800042f8:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
800042fa:	f0 1f 00 03 	mcall	80004304 <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
800042fe:	da 0a       	popm	pc,r12=1
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	5c 00       	acr	r0
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	22 3c       	sub	r12,35

80004308 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80004308:	eb cd 40 80 	pushm	r7,lr
8000430c:	18 97       	mov	r7,r12
	if( pv )
8000430e:	58 0c       	cp.w	r12,0
80004310:	c0 80       	breq	80004320 <vPortFree+0x18>
	{
		vTaskSuspendAll();
80004312:	f0 1f 00 05 	mcall	80004324 <vPortFree+0x1c>
		{
			free( pv );
80004316:	0e 9c       	mov	r12,r7
80004318:	f0 1f 00 04 	mcall	80004328 <vPortFree+0x20>
		}
		xTaskResumeAll();
8000431c:	f0 1f 00 04 	mcall	8000432c <vPortFree+0x24>
80004320:	e3 cd 80 80 	ldm	sp++,r7,pc
80004324:	80 00       	ld.sh	r0,r0[0x0]
80004326:	43 58       	lddsp	r8,sp[0xd4]
80004328:	80 00       	ld.sh	r0,r0[0x0]
8000432a:	4a 90       	lddpc	r0,800043cc <vTaskSwitchContext+0x64>
8000432c:	80 00       	ld.sh	r0,r0[0x0]
8000432e:	44 fc       	lddsp	r12,sp[0x13c]

80004330 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80004330:	eb cd 40 80 	pushm	r7,lr
80004334:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
80004336:	f0 1f 00 06 	mcall	8000434c <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
8000433a:	0e 9c       	mov	r12,r7
8000433c:	f0 1f 00 05 	mcall	80004350 <pvPortMalloc+0x20>
80004340:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
80004342:	f0 1f 00 05 	mcall	80004354 <pvPortMalloc+0x24>
		}
	}
	#endif
	
	return pvReturn;
}
80004346:	0e 9c       	mov	r12,r7
80004348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000434c:	80 00       	ld.sh	r0,r0[0x0]
8000434e:	43 58       	lddsp	r8,sp[0xd4]
80004350:	80 00       	ld.sh	r0,r0[0x0]
80004352:	4a a8       	lddpc	r8,800043f8 <vTaskIncrementTick+0x14>
80004354:	80 00       	ld.sh	r0,r0[0x0]
80004356:	44 fc       	lddsp	r12,sp[0x13c]

80004358 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80004358:	48 38       	lddpc	r8,80004364 <vTaskSuspendAll+0xc>
8000435a:	70 09       	ld.w	r9,r8[0x0]
8000435c:	2f f9       	sub	r9,-1
8000435e:	91 09       	st.w	r8[0x0],r9
}
80004360:	5e fc       	retal	r12
80004362:	00 00       	add	r0,r0
80004364:	00 00       	add	r0,r0
80004366:	09 8c       	ld.ub	r12,r4[0x0]

80004368 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80004368:	49 a8       	lddpc	r8,800043d0 <vTaskSwitchContext+0x68>
8000436a:	70 08       	ld.w	r8,r8[0x0]
8000436c:	58 08       	cp.w	r8,0
8000436e:	c0 b1       	brne	80004384 <vTaskSwitchContext+0x1c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004370:	49 98       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
80004372:	70 08       	ld.w	r8,r8[0x0]
80004374:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004378:	49 89       	lddpc	r9,800043d8 <vTaskSwitchContext+0x70>
8000437a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000437e:	58 08       	cp.w	r8,0
80004380:	c0 60       	breq	8000438c <vTaskSwitchContext+0x24>
80004382:	c1 18       	rjmp	800043a4 <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
80004384:	30 19       	mov	r9,1
80004386:	49 68       	lddpc	r8,800043dc <vTaskSwitchContext+0x74>
80004388:	91 09       	st.w	r8[0x0],r9
8000438a:	5e fc       	retal	r12
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
8000438c:	49 28       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
8000438e:	49 3a       	lddpc	r10,800043d8 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80004390:	70 09       	ld.w	r9,r8[0x0]
80004392:	20 19       	sub	r9,1
80004394:	91 09       	st.w	r8[0x0],r9
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004396:	70 09       	ld.w	r9,r8[0x0]
80004398:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000439c:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
800043a0:	58 09       	cp.w	r9,0
800043a2:	cf 70       	breq	80004390 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
800043a4:	48 c8       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
800043a6:	70 08       	ld.w	r8,r8[0x0]
800043a8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043ac:	48 b9       	lddpc	r9,800043d8 <vTaskSwitchContext+0x70>
800043ae:	f2 08 00 28 	add	r8,r9,r8<<0x2
800043b2:	70 19       	ld.w	r9,r8[0x4]
800043b4:	72 19       	ld.w	r9,r9[0x4]
800043b6:	91 19       	st.w	r8[0x4],r9
800043b8:	f0 ca ff f8 	sub	r10,r8,-8
800043bc:	14 39       	cp.w	r9,r10
800043be:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800043c2:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800043c6:	70 18       	ld.w	r8,r8[0x4]
800043c8:	70 39       	ld.w	r9,r8[0xc]
800043ca:	48 68       	lddpc	r8,800043e0 <vTaskSwitchContext+0x78>
800043cc:	91 09       	st.w	r8[0x0],r9
800043ce:	5e fc       	retal	r12
800043d0:	00 00       	add	r0,r0
800043d2:	09 8c       	ld.ub	r12,r4[0x0]
800043d4:	00 00       	add	r0,r0
800043d6:	09 c4       	ld.ub	r4,r4[0x4]
800043d8:	00 00       	add	r0,r0
800043da:	08 a8       	st.w	r4++,r8
800043dc:	00 00       	add	r0,r0
800043de:	09 ac       	ld.ub	r12,r4[0x2]
800043e0:	00 00       	add	r0,r0
800043e2:	09 5c       	ld.sh	r12,--r4

800043e4 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
800043e4:	eb cd 40 fe 	pushm	r1-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
800043e8:	4b a8       	lddpc	r8,800044d0 <vTaskIncrementTick+0xec>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	58 08       	cp.w	r8,0
800043ee:	c6 a1       	brne	800044c2 <vTaskIncrementTick+0xde>
	{
		++xTickCount;
800043f0:	4b 98       	lddpc	r8,800044d4 <vTaskIncrementTick+0xf0>
800043f2:	70 09       	ld.w	r9,r8[0x0]
800043f4:	2f f9       	sub	r9,-1
800043f6:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
800043f8:	70 08       	ld.w	r8,r8[0x0]
800043fa:	58 08       	cp.w	r8,0
800043fc:	c1 a1       	brne	80004430 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
800043fe:	4b 78       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004400:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
80004402:	4b 79       	lddpc	r9,800044dc <vTaskIncrementTick+0xf8>
80004404:	72 0b       	ld.w	r11,r9[0x0]
80004406:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004408:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
8000440a:	4b 69       	lddpc	r9,800044e0 <vTaskIncrementTick+0xfc>
8000440c:	72 0a       	ld.w	r10,r9[0x0]
8000440e:	2f fa       	sub	r10,-1
80004410:	93 0a       	st.w	r9[0x0],r10
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80004412:	70 08       	ld.w	r8,r8[0x0]
80004414:	70 08       	ld.w	r8,r8[0x0]
80004416:	58 08       	cp.w	r8,0
80004418:	c0 51       	brne	80004422 <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
8000441a:	3f f9       	mov	r9,-1
8000441c:	4b 28       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
8000441e:	91 09       	st.w	r8[0x0],r9
80004420:	c0 88       	rjmp	80004430 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80004422:	4a e8       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004424:	70 08       	ld.w	r8,r8[0x0]
80004426:	70 38       	ld.w	r8,r8[0xc]
80004428:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
8000442a:	70 19       	ld.w	r9,r8[0x4]
8000442c:	4a e8       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
8000442e:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80004430:	4a 98       	lddpc	r8,800044d4 <vTaskIncrementTick+0xf0>
80004432:	70 09       	ld.w	r9,r8[0x0]
80004434:	4a c8       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
80004436:	70 08       	ld.w	r8,r8[0x0]
80004438:	10 39       	cp.w	r9,r8
8000443a:	c4 83       	brcs	800044ca <vTaskIncrementTick+0xe6>
8000443c:	4a 78       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
8000443e:	70 08       	ld.w	r8,r8[0x0]
80004440:	70 08       	ld.w	r8,r8[0x0]
80004442:	58 08       	cp.w	r8,0
80004444:	c0 c0       	breq	8000445c <vTaskIncrementTick+0x78>
80004446:	4a 58       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004448:	70 08       	ld.w	r8,r8[0x0]
8000444a:	70 38       	ld.w	r8,r8[0xc]
8000444c:	70 37       	ld.w	r7,r8[0xc]
8000444e:	6e 18       	ld.w	r8,r7[0x4]
80004450:	4a 19       	lddpc	r9,800044d4 <vTaskIncrementTick+0xf0>
80004452:	72 09       	ld.w	r9,r9[0x0]
80004454:	12 38       	cp.w	r8,r9
80004456:	e0 88 00 14 	brls	8000447e <vTaskIncrementTick+0x9a>
8000445a:	c0 e8       	rjmp	80004476 <vTaskIncrementTick+0x92>
8000445c:	3f f9       	mov	r9,-1
8000445e:	4a 28       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
80004460:	91 09       	st.w	r8[0x0],r9
80004462:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004466:	6a 08       	ld.w	r8,r5[0x0]
80004468:	70 38       	ld.w	r8,r8[0xc]
8000446a:	70 37       	ld.w	r7,r8[0xc]
8000446c:	6e 18       	ld.w	r8,r7[0x4]
8000446e:	64 09       	ld.w	r9,r2[0x0]
80004470:	12 38       	cp.w	r8,r9
80004472:	e0 88 00 0b 	brls	80004488 <vTaskIncrementTick+0xa4>
80004476:	49 c9       	lddpc	r9,800044e4 <vTaskIncrementTick+0x100>
80004478:	93 08       	st.w	r9[0x0],r8
8000447a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000447e:	49 b4       	lddpc	r4,800044e8 <vTaskIncrementTick+0x104>
80004480:	08 91       	mov	r1,r4
80004482:	49 b3       	lddpc	r3,800044ec <vTaskIncrementTick+0x108>
80004484:	49 55       	lddpc	r5,800044d8 <vTaskIncrementTick+0xf4>
80004486:	49 42       	lddpc	r2,800044d4 <vTaskIncrementTick+0xf0>
80004488:	ee c6 ff fc 	sub	r6,r7,-4
8000448c:	0c 9c       	mov	r12,r6
8000448e:	f0 1f 00 19 	mcall	800044f0 <vTaskIncrementTick+0x10c>
80004492:	6e a8       	ld.w	r8,r7[0x28]
80004494:	58 08       	cp.w	r8,0
80004496:	c0 50       	breq	800044a0 <vTaskIncrementTick+0xbc>
80004498:	ee cc ff e8 	sub	r12,r7,-24
8000449c:	f0 1f 00 15 	mcall	800044f0 <vTaskIncrementTick+0x10c>
800044a0:	6e bc       	ld.w	r12,r7[0x2c]
800044a2:	68 08       	ld.w	r8,r4[0x0]
800044a4:	10 3c       	cp.w	r12,r8
800044a6:	e3 fc ba 00 	st.whi	r1[0x0],r12
800044aa:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800044ae:	0c 9b       	mov	r11,r6
800044b0:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
800044b4:	f0 1f 00 10 	mcall	800044f4 <vTaskIncrementTick+0x110>
800044b8:	6a 08       	ld.w	r8,r5[0x0]
800044ba:	70 08       	ld.w	r8,r8[0x0]
800044bc:	58 08       	cp.w	r8,0
800044be:	cd 41       	brne	80004466 <vTaskIncrementTick+0x82>
800044c0:	cc eb       	rjmp	8000445c <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
800044c2:	48 e8       	lddpc	r8,800044f8 <vTaskIncrementTick+0x114>
800044c4:	70 09       	ld.w	r9,r8[0x0]
800044c6:	2f f9       	sub	r9,-1
800044c8:	91 09       	st.w	r8[0x0],r9
800044ca:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044ce:	00 00       	add	r0,r0
800044d0:	00 00       	add	r0,r0
800044d2:	09 8c       	ld.ub	r12,r4[0x0]
800044d4:	00 00       	add	r0,r0
800044d6:	09 88       	ld.ub	r8,r4[0x0]
800044d8:	00 00       	add	r0,r0
800044da:	08 94       	mov	r4,r4
800044dc:	00 00       	add	r0,r0
800044de:	08 a4       	st.w	r4++,r4
800044e0:	00 00       	add	r0,r0
800044e2:	08 a0       	st.w	r4++,r0
800044e4:	00 00       	add	r0,r0
800044e6:	00 f8       	st.b	--r0,r8
800044e8:	00 00       	add	r0,r0
800044ea:	09 c4       	ld.ub	r4,r4[0x4]
800044ec:	00 00       	add	r0,r0
800044ee:	08 a8       	st.w	r4++,r8
800044f0:	80 00       	ld.sh	r0,r0[0x0]
800044f2:	40 6e       	lddsp	lr,sp[0x18]
800044f4:	80 00       	ld.sh	r0,r0[0x0]
800044f6:	40 1e       	lddsp	lr,sp[0x4]
800044f8:	00 00       	add	r0,r0
800044fa:	08 8c       	andn	r12,r4

800044fc <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
800044fc:	d4 31       	pushm	r0-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800044fe:	f0 1f 00 2c 	mcall	800045ac <xTaskResumeAll+0xb0>
	{
		--uxSchedulerSuspended;
80004502:	4a c8       	lddpc	r8,800045b0 <xTaskResumeAll+0xb4>
80004504:	70 09       	ld.w	r9,r8[0x0]
80004506:	20 19       	sub	r9,1
80004508:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
8000450a:	70 08       	ld.w	r8,r8[0x0]
8000450c:	58 08       	cp.w	r8,0
8000450e:	c4 a1       	brne	800045a2 <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80004510:	4a 98       	lddpc	r8,800045b4 <xTaskResumeAll+0xb8>
80004512:	70 08       	ld.w	r8,r8[0x0]
80004514:	58 08       	cp.w	r8,0
80004516:	c4 60       	breq	800045a2 <xTaskResumeAll+0xa6>
80004518:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
8000451a:	4a 85       	lddpc	r5,800045b8 <xTaskResumeAll+0xbc>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
8000451c:	4a 83       	lddpc	r3,800045bc <xTaskResumeAll+0xc0>
8000451e:	06 90       	mov	r0,r3
80004520:	4a 82       	lddpc	r2,800045c0 <xTaskResumeAll+0xc4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004522:	4a 91       	lddpc	r1,800045c4 <xTaskResumeAll+0xc8>
80004524:	c1 e8       	rjmp	80004560 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80004526:	6a 38       	ld.w	r8,r5[0xc]
80004528:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
8000452a:	ee cc ff e8 	sub	r12,r7,-24
8000452e:	f0 1f 00 27 	mcall	800045c8 <xTaskResumeAll+0xcc>
					vListRemove( &( pxTCB->xGenericListItem ) );
80004532:	ee c6 ff fc 	sub	r6,r7,-4
80004536:	0c 9c       	mov	r12,r6
80004538:	f0 1f 00 24 	mcall	800045c8 <xTaskResumeAll+0xcc>
					prvAddTaskToReadyQueue( pxTCB );
8000453c:	6e bc       	ld.w	r12,r7[0x2c]
8000453e:	66 08       	ld.w	r8,r3[0x0]
80004540:	10 3c       	cp.w	r12,r8
80004542:	e1 fc ba 00 	st.whi	r0[0x0],r12
80004546:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000454a:	0c 9b       	mov	r11,r6
8000454c:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80004550:	f0 1f 00 1f 	mcall	800045cc <xTaskResumeAll+0xd0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004554:	62 08       	ld.w	r8,r1[0x0]
80004556:	6e b9       	ld.w	r9,r7[0x2c]
80004558:	70 b8       	ld.w	r8,r8[0x2c]
8000455a:	10 39       	cp.w	r9,r8
8000455c:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004560:	6a 08       	ld.w	r8,r5[0x0]
80004562:	58 08       	cp.w	r8,0
80004564:	ce 11       	brne	80004526 <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004566:	49 b8       	lddpc	r8,800045d0 <xTaskResumeAll+0xd4>
80004568:	70 08       	ld.w	r8,r8[0x0]
8000456a:	58 08       	cp.w	r8,0
8000456c:	c0 f0       	breq	8000458a <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000456e:	49 98       	lddpc	r8,800045d0 <xTaskResumeAll+0xd4>
80004570:	70 08       	ld.w	r8,r8[0x0]
80004572:	58 08       	cp.w	r8,0
80004574:	c1 10       	breq	80004596 <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
80004576:	49 77       	lddpc	r7,800045d0 <xTaskResumeAll+0xd4>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
80004578:	f0 1f 00 17 	mcall	800045d4 <xTaskResumeAll+0xd8>
						--uxMissedTicks;
8000457c:	6e 08       	ld.w	r8,r7[0x0]
8000457e:	20 18       	sub	r8,1
80004580:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004582:	6e 08       	ld.w	r8,r7[0x0]
80004584:	58 08       	cp.w	r8,0
80004586:	cf 91       	brne	80004578 <xTaskResumeAll+0x7c>
80004588:	c0 78       	rjmp	80004596 <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
8000458a:	58 14       	cp.w	r4,1
8000458c:	c0 50       	breq	80004596 <xTaskResumeAll+0x9a>
8000458e:	49 38       	lddpc	r8,800045d8 <xTaskResumeAll+0xdc>
80004590:	70 08       	ld.w	r8,r8[0x0]
80004592:	58 18       	cp.w	r8,1
80004594:	c0 71       	brne	800045a2 <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
80004596:	30 09       	mov	r9,0
80004598:	49 08       	lddpc	r8,800045d8 <xTaskResumeAll+0xdc>
8000459a:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
8000459c:	d7 33       	scall
8000459e:	30 17       	mov	r7,1
800045a0:	c0 28       	rjmp	800045a4 <xTaskResumeAll+0xa8>
800045a2:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
800045a4:	f0 1f 00 0e 	mcall	800045dc <xTaskResumeAll+0xe0>

	return xAlreadyYielded;
}
800045a8:	0e 9c       	mov	r12,r7
800045aa:	d8 32       	popm	r0-r7,pc
800045ac:	80 00       	ld.sh	r0,r0[0x0]
800045ae:	41 28       	lddsp	r8,sp[0x48]
800045b0:	00 00       	add	r0,r0
800045b2:	09 8c       	ld.ub	r12,r4[0x0]
800045b4:	00 00       	add	r0,r0
800045b6:	09 a8       	ld.ub	r8,r4[0x2]
800045b8:	00 00       	add	r0,r0
800045ba:	09 60       	ld.uh	r0,--r4
800045bc:	00 00       	add	r0,r0
800045be:	09 c4       	ld.ub	r4,r4[0x4]
800045c0:	00 00       	add	r0,r0
800045c2:	08 a8       	st.w	r4++,r8
800045c4:	00 00       	add	r0,r0
800045c6:	09 5c       	ld.sh	r12,--r4
800045c8:	80 00       	ld.sh	r0,r0[0x0]
800045ca:	40 6e       	lddsp	lr,sp[0x18]
800045cc:	80 00       	ld.sh	r0,r0[0x0]
800045ce:	40 1e       	lddsp	lr,sp[0x4]
800045d0:	00 00       	add	r0,r0
800045d2:	08 8c       	andn	r12,r4
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	43 e4       	lddsp	r4,sp[0xf8]
800045d8:	00 00       	add	r0,r0
800045da:	09 ac       	ld.ub	r12,r4[0x2]
800045dc:	80 00       	ld.sh	r0,r0[0x0]
800045de:	42 34       	lddsp	r4,sp[0x8c]

800045e0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
800045e0:	eb cd 40 80 	pushm	r7,lr
800045e4:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800045e6:	49 08       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
800045e8:	70 08       	ld.w	r8,r8[0x0]
800045ea:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
800045ec:	48 f8       	lddpc	r8,80004628 <prvAddCurrentTaskToDelayedList+0x48>
800045ee:	70 08       	ld.w	r8,r8[0x0]
800045f0:	10 3c       	cp.w	r12,r8
800045f2:	c0 a2       	brcc	80004606 <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
800045f4:	48 c8       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
800045f6:	70 0b       	ld.w	r11,r8[0x0]
800045f8:	48 d8       	lddpc	r8,8000462c <prvAddCurrentTaskToDelayedList+0x4c>
800045fa:	70 0c       	ld.w	r12,r8[0x0]
800045fc:	2f cb       	sub	r11,-4
800045fe:	f0 1f 00 0d 	mcall	80004630 <prvAddCurrentTaskToDelayedList+0x50>
80004602:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004606:	48 88       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
80004608:	70 0b       	ld.w	r11,r8[0x0]
8000460a:	48 b8       	lddpc	r8,80004634 <prvAddCurrentTaskToDelayedList+0x54>
8000460c:	70 0c       	ld.w	r12,r8[0x0]
8000460e:	2f cb       	sub	r11,-4
80004610:	f0 1f 00 08 	mcall	80004630 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
80004614:	48 98       	lddpc	r8,80004638 <prvAddCurrentTaskToDelayedList+0x58>
80004616:	70 08       	ld.w	r8,r8[0x0]
80004618:	10 37       	cp.w	r7,r8
8000461a:	c0 32       	brcc	80004620 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
8000461c:	48 78       	lddpc	r8,80004638 <prvAddCurrentTaskToDelayedList+0x58>
8000461e:	91 07       	st.w	r8[0x0],r7
80004620:	e3 cd 80 80 	ldm	sp++,r7,pc
80004624:	00 00       	add	r0,r0
80004626:	09 5c       	ld.sh	r12,--r4
80004628:	00 00       	add	r0,r0
8000462a:	09 88       	ld.ub	r8,r4[0x0]
8000462c:	00 00       	add	r0,r0
8000462e:	08 a4       	st.w	r4++,r4
80004630:	80 00       	ld.sh	r0,r0[0x0]
80004632:	40 3a       	lddsp	r10,sp[0xc]
80004634:	00 00       	add	r0,r0
80004636:	08 94       	mov	r4,r4
80004638:	00 00       	add	r0,r0
8000463a:	00 f8       	st.b	--r0,r8

8000463c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
8000463c:	eb cd 40 c0 	pushm	r6-r7,lr
80004640:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
80004642:	58 0c       	cp.w	r12,0
80004644:	c1 10       	breq	80004666 <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
80004646:	f0 1f 00 0a 	mcall	8000466c <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
8000464a:	48 a8       	lddpc	r8,80004670 <vTaskDelay+0x34>
8000464c:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000464e:	48 a8       	lddpc	r8,80004674 <vTaskDelay+0x38>
80004650:	70 0c       	ld.w	r12,r8[0x0]
80004652:	2f cc       	sub	r12,-4
80004654:	f0 1f 00 09 	mcall	80004678 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004658:	ee 06 00 0c 	add	r12,r7,r6
8000465c:	f0 1f 00 08 	mcall	8000467c <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80004660:	f0 1f 00 08 	mcall	80004680 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80004664:	c0 21       	brne	80004668 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
80004666:	d7 33       	scall
80004668:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000466c:	80 00       	ld.sh	r0,r0[0x0]
8000466e:	43 58       	lddsp	r8,sp[0xd4]
80004670:	00 00       	add	r0,r0
80004672:	09 88       	ld.ub	r8,r4[0x0]
80004674:	00 00       	add	r0,r0
80004676:	09 5c       	ld.sh	r12,--r4
80004678:	80 00       	ld.sh	r0,r0[0x0]
8000467a:	40 6e       	lddsp	lr,sp[0x18]
8000467c:	80 00       	ld.sh	r0,r0[0x0]
8000467e:	45 e0       	lddsp	r0,sp[0x178]
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	44 fc       	lddsp	r12,sp[0x13c]

80004684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80004684:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80004688:	49 57       	lddpc	r7,800046dc <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000468a:	49 64       	lddpc	r4,800046e0 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
8000468c:	49 63       	lddpc	r3,800046e4 <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
8000468e:	49 75       	lddpc	r5,800046e8 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80004690:	6e 08       	ld.w	r8,r7[0x0]
80004692:	58 08       	cp.w	r8,0
80004694:	c1 e0       	breq	800046d0 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
80004696:	f0 1f 00 16 	mcall	800046ec <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000469a:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
8000469c:	f0 1f 00 15 	mcall	800046f0 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800046a0:	58 06       	cp.w	r6,0
800046a2:	c1 70       	breq	800046d0 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800046a4:	f0 1f 00 14 	mcall	800046f4 <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800046a8:	68 38       	ld.w	r8,r4[0xc]
800046aa:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800046ac:	ec cc ff fc 	sub	r12,r6,-4
800046b0:	f0 1f 00 12 	mcall	800046f8 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
800046b4:	66 08       	ld.w	r8,r3[0x0]
800046b6:	20 18       	sub	r8,1
800046b8:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
800046ba:	6e 08       	ld.w	r8,r7[0x0]
800046bc:	20 18       	sub	r8,1
800046be:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
800046c0:	f0 1f 00 0f 	mcall	800046fc <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800046c4:	6c cc       	ld.w	r12,r6[0x30]
800046c6:	f0 1f 00 0f 	mcall	80004700 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
800046ca:	0c 9c       	mov	r12,r6
800046cc:	f0 1f 00 0d 	mcall	80004700 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046d0:	6a 08       	ld.w	r8,r5[0x0]
800046d2:	58 18       	cp.w	r8,1
800046d4:	fe 98 ff de 	brls	80004690 <prvIdleTask+0xc>
			{
				taskYIELD();
800046d8:	d7 33       	scall
800046da:	cd bb       	rjmp	80004690 <prvIdleTask+0xc>
800046dc:	00 00       	add	r0,r0
800046de:	08 9c       	mov	r12,r4
800046e0:	00 00       	add	r0,r0
800046e2:	09 48       	ld.w	r8,--r4
800046e4:	00 00       	add	r0,r0
800046e6:	09 a8       	ld.ub	r8,r4[0x2]
800046e8:	00 00       	add	r0,r0
800046ea:	08 a8       	st.w	r4++,r8
800046ec:	80 00       	ld.sh	r0,r0[0x0]
800046ee:	43 58       	lddsp	r8,sp[0xd4]
800046f0:	80 00       	ld.sh	r0,r0[0x0]
800046f2:	44 fc       	lddsp	r12,sp[0x13c]
800046f4:	80 00       	ld.sh	r0,r0[0x0]
800046f6:	41 28       	lddsp	r8,sp[0x48]
800046f8:	80 00       	ld.sh	r0,r0[0x0]
800046fa:	40 6e       	lddsp	lr,sp[0x18]
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	42 34       	lddsp	r4,sp[0x8c]
80004700:	80 00       	ld.sh	r0,r0[0x0]
80004702:	43 08       	lddsp	r8,sp[0xc0]

80004704 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80004704:	d4 31       	pushm	r0-r7,lr
80004706:	20 1d       	sub	sp,4
80004708:	fa c4 ff d8 	sub	r4,sp,-40
8000470c:	50 0c       	stdsp	sp[0x0],r12
8000470e:	16 91       	mov	r1,r11
80004710:	14 97       	mov	r7,r10
80004712:	12 90       	mov	r0,r9
80004714:	10 93       	mov	r3,r8
80004716:	68 02       	ld.w	r2,r4[0x0]
80004718:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
8000471a:	34 4c       	mov	r12,68
8000471c:	f0 1f 00 5b 	mcall	80004888 <xTaskGenericCreate+0x184>
80004720:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
80004722:	c0 31       	brne	80004728 <xTaskGenericCreate+0x24>
80004724:	3f fc       	mov	r12,-1
80004726:	ca d8       	rjmp	80004880 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004728:	58 06       	cp.w	r6,0
8000472a:	e0 81 00 ad 	brne	80004884 <xTaskGenericCreate+0x180>
8000472e:	0e 9c       	mov	r12,r7
80004730:	5c 7c       	castu.h	r12
80004732:	a3 6c       	lsl	r12,0x2
80004734:	f0 1f 00 55 	mcall	80004888 <xTaskGenericCreate+0x184>
80004738:	18 96       	mov	r6,r12
8000473a:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
8000473c:	c0 61       	brne	80004748 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000473e:	0a 9c       	mov	r12,r5
80004740:	f0 1f 00 53 	mcall	8000488c <xTaskGenericCreate+0x188>
80004744:	3f fc       	mov	r12,-1
80004746:	c9 d8       	rjmp	80004880 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004748:	5c 77       	castu.h	r7
8000474a:	ee 0a 15 02 	lsl	r10,r7,0x2
8000474e:	e0 6b 00 a5 	mov	r11,165
80004752:	0c 9c       	mov	r12,r6
80004754:	f0 1f 00 4f 	mcall	80004890 <xTaskGenericCreate+0x18c>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80004758:	ee c6 00 01 	sub	r6,r7,1
8000475c:	6a c8       	ld.w	r8,r5[0x30]
8000475e:	f0 06 00 26 	add	r6,r8,r6<<0x2
80004762:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80004766:	31 0a       	mov	r10,16
80004768:	02 9b       	mov	r11,r1
8000476a:	ea cc ff cc 	sub	r12,r5,-52
8000476e:	f0 1f 00 4a 	mcall	80004894 <xTaskGenericCreate+0x190>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
80004772:	30 08       	mov	r8,0
80004774:	eb 68 00 43 	st.b	r5[67],r8
80004778:	58 73       	cp.w	r3,7
8000477a:	e6 07 17 80 	movls	r7,r3
8000477e:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
80004782:	8b b7       	st.w	r5[0x2c],r7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80004784:	ea c4 ff fc 	sub	r4,r5,-4
80004788:	08 9c       	mov	r12,r4
8000478a:	f0 1f 00 44 	mcall	80004898 <xTaskGenericCreate+0x194>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
8000478e:	ea cc ff e8 	sub	r12,r5,-24
80004792:	f0 1f 00 42 	mcall	80004898 <xTaskGenericCreate+0x194>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80004796:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
80004798:	ee 07 11 08 	rsub	r7,r7,8
8000479c:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
8000479e:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800047a0:	00 9a       	mov	r10,r0
800047a2:	40 0b       	lddsp	r11,sp[0x0]
800047a4:	0c 9c       	mov	r12,r6
800047a6:	f0 1f 00 3e 	mcall	8000489c <xTaskGenericCreate+0x198>
800047aa:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
800047ac:	58 02       	cp.w	r2,0
800047ae:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
800047b2:	f0 1f 00 3c 	mcall	800048a0 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
800047b6:	4b c8       	lddpc	r8,800048a4 <xTaskGenericCreate+0x1a0>
800047b8:	70 09       	ld.w	r9,r8[0x0]
800047ba:	2f f9       	sub	r9,-1
800047bc:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
800047be:	4b b8       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
800047c0:	70 08       	ld.w	r8,r8[0x0]
800047c2:	58 08       	cp.w	r8,0
800047c4:	c2 61       	brne	80004810 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800047c6:	4b 98       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
800047c8:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
800047ca:	4b 78       	lddpc	r8,800048a4 <xTaskGenericCreate+0x1a0>
800047cc:	70 08       	ld.w	r8,r8[0x0]
800047ce:	58 18       	cp.w	r8,1
800047d0:	c2 b1       	brne	80004826 <xTaskGenericCreate+0x122>
800047d2:	4b 77       	lddpc	r7,800048ac <xTaskGenericCreate+0x1a8>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
800047d4:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
800047d8:	0e 9c       	mov	r12,r7
800047da:	f0 1f 00 36 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
800047de:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
800047e0:	0c 37       	cp.w	r7,r6
800047e2:	cf b1       	brne	800047d8 <xTaskGenericCreate+0xd4>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
800047e4:	4b 47       	lddpc	r7,800048b4 <xTaskGenericCreate+0x1b0>
800047e6:	0e 9c       	mov	r12,r7
800047e8:	f0 1f 00 32 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
800047ec:	4b 36       	lddpc	r6,800048b8 <xTaskGenericCreate+0x1b4>
800047ee:	0c 9c       	mov	r12,r6
800047f0:	f0 1f 00 30 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xPendingReadyList );
800047f4:	4b 2c       	lddpc	r12,800048bc <xTaskGenericCreate+0x1b8>
800047f6:	f0 1f 00 2f 	mcall	800048b0 <xTaskGenericCreate+0x1ac>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
800047fa:	4b 2c       	lddpc	r12,800048c0 <xTaskGenericCreate+0x1bc>
800047fc:	f0 1f 00 2d 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004800:	4b 1c       	lddpc	r12,800048c4 <xTaskGenericCreate+0x1c0>
80004802:	f0 1f 00 2c 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80004806:	4b 18       	lddpc	r8,800048c8 <xTaskGenericCreate+0x1c4>
80004808:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000480a:	4b 18       	lddpc	r8,800048cc <xTaskGenericCreate+0x1c8>
8000480c:	91 06       	st.w	r8[0x0],r6
8000480e:	c0 c8       	rjmp	80004826 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004810:	4b 08       	lddpc	r8,800048d0 <xTaskGenericCreate+0x1cc>
80004812:	70 08       	ld.w	r8,r8[0x0]
80004814:	58 08       	cp.w	r8,0
80004816:	c0 81       	brne	80004826 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80004818:	4a 48       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
8000481a:	70 08       	ld.w	r8,r8[0x0]
8000481c:	70 b8       	ld.w	r8,r8[0x2c]
8000481e:	10 33       	cp.w	r3,r8
80004820:	c0 33       	brcs	80004826 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
80004822:	4a 28       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
80004824:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
80004826:	6a b8       	ld.w	r8,r5[0x2c]
80004828:	4a b9       	lddpc	r9,800048d4 <xTaskGenericCreate+0x1d0>
8000482a:	72 09       	ld.w	r9,r9[0x0]
8000482c:	12 38       	cp.w	r8,r9
8000482e:	e0 88 00 04 	brls	80004836 <xTaskGenericCreate+0x132>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80004832:	4a 99       	lddpc	r9,800048d4 <xTaskGenericCreate+0x1d0>
80004834:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
80004836:	4a 98       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1d4>
80004838:	70 09       	ld.w	r9,r8[0x0]
8000483a:	2f f9       	sub	r9,-1
8000483c:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
8000483e:	6a b8       	ld.w	r8,r5[0x2c]
80004840:	4a 79       	lddpc	r9,800048dc <xTaskGenericCreate+0x1d8>
80004842:	72 09       	ld.w	r9,r9[0x0]
80004844:	12 38       	cp.w	r8,r9
80004846:	e0 88 00 04 	brls	8000484e <xTaskGenericCreate+0x14a>
8000484a:	4a 59       	lddpc	r9,800048dc <xTaskGenericCreate+0x1d8>
8000484c:	93 08       	st.w	r9[0x0],r8
8000484e:	6a bc       	ld.w	r12,r5[0x2c]
80004850:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004854:	08 9b       	mov	r11,r4
80004856:	49 68       	lddpc	r8,800048ac <xTaskGenericCreate+0x1a8>
80004858:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
8000485c:	f0 1f 00 21 	mcall	800048e0 <xTaskGenericCreate+0x1dc>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80004860:	f0 1f 00 21 	mcall	800048e4 <xTaskGenericCreate+0x1e0>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
80004864:	49 b8       	lddpc	r8,800048d0 <xTaskGenericCreate+0x1cc>
80004866:	70 08       	ld.w	r8,r8[0x0]
80004868:	58 08       	cp.w	r8,0
8000486a:	c0 a0       	breq	8000487e <xTaskGenericCreate+0x17a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
8000486c:	48 f8       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
8000486e:	70 08       	ld.w	r8,r8[0x0]
80004870:	70 b8       	ld.w	r8,r8[0x2c]
80004872:	10 33       	cp.w	r3,r8
80004874:	e0 88 00 05 	brls	8000487e <xTaskGenericCreate+0x17a>
			{
				portYIELD_WITHIN_API();
80004878:	d7 33       	scall
8000487a:	30 1c       	mov	r12,1
8000487c:	c0 28       	rjmp	80004880 <xTaskGenericCreate+0x17c>
8000487e:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
80004880:	2f fd       	sub	sp,-4
80004882:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004884:	99 c6       	st.w	r12[0x30],r6
80004886:	c6 1b       	rjmp	80004748 <xTaskGenericCreate+0x44>
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	43 30       	lddsp	r0,sp[0xcc]
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	43 08       	lddsp	r8,sp[0xc0]
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	4f 10       	lddpc	r0,80004a54 <atexit>
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	50 84       	stdsp	sp[0x20],r4
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	40 18       	lddsp	r8,sp[0x4]
8000489c:	80 00       	ld.sh	r0,r0[0x0]
8000489e:	40 94       	lddsp	r4,sp[0x24]
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	41 28       	lddsp	r8,sp[0x48]
800048a4:	00 00       	add	r0,r0
800048a6:	09 a8       	ld.ub	r8,r4[0x2]
800048a8:	00 00       	add	r0,r0
800048aa:	09 5c       	ld.sh	r12,--r4
800048ac:	00 00       	add	r0,r0
800048ae:	08 a8       	st.w	r4++,r8
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	40 04       	lddsp	r4,sp[0x0]
800048b4:	00 00       	add	r0,r0
800048b6:	09 74       	ld.ub	r4,--r4
800048b8:	00 00       	add	r0,r0
800048ba:	09 90       	ld.ub	r0,r4[0x1]
800048bc:	00 00       	add	r0,r0
800048be:	09 60       	ld.uh	r0,--r4
800048c0:	00 00       	add	r0,r0
800048c2:	09 48       	ld.w	r8,--r4
800048c4:	00 00       	add	r0,r0
800048c6:	09 b0       	ld.ub	r0,r4[0x3]
800048c8:	00 00       	add	r0,r0
800048ca:	08 94       	mov	r4,r4
800048cc:	00 00       	add	r0,r0
800048ce:	08 a4       	st.w	r4++,r4
800048d0:	00 00       	add	r0,r0
800048d2:	08 98       	mov	r8,r4
800048d4:	00 00       	add	r0,r0
800048d6:	08 90       	mov	r0,r4
800048d8:	00 00       	add	r0,r0
800048da:	09 a4       	ld.ub	r4,r4[0x2]
800048dc:	00 00       	add	r0,r0
800048de:	09 c4       	ld.ub	r4,r4[0x4]
800048e0:	80 00       	ld.sh	r0,r0[0x0]
800048e2:	40 1e       	lddsp	lr,sp[0x4]
800048e4:	80 00       	ld.sh	r0,r0[0x0]
800048e6:	42 34       	lddsp	r4,sp[0x8c]

800048e8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
800048e8:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
800048ea:	30 09       	mov	r9,0
800048ec:	1a d9       	st.w	--sp,r9
800048ee:	1a d9       	st.w	--sp,r9
800048f0:	1a d9       	st.w	--sp,r9
800048f2:	12 98       	mov	r8,r9
800048f4:	e0 6a 01 00 	mov	r10,256
800048f8:	48 9b       	lddpc	r11,8000491c <vTaskStartScheduler+0x34>
800048fa:	48 ac       	lddpc	r12,80004920 <vTaskStartScheduler+0x38>
800048fc:	f0 1f 00 0a 	mcall	80004924 <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80004900:	2f dd       	sub	sp,-12
80004902:	58 1c       	cp.w	r12,1
80004904:	c0 a1       	brne	80004918 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
80004906:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004908:	30 19       	mov	r9,1
8000490a:	48 88       	lddpc	r8,80004928 <vTaskStartScheduler+0x40>
8000490c:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
8000490e:	30 09       	mov	r9,0
80004910:	48 78       	lddpc	r8,8000492c <vTaskStartScheduler+0x44>
80004912:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80004914:	f0 1f 00 07 	mcall	80004930 <vTaskStartScheduler+0x48>
80004918:	d8 02       	popm	pc
8000491a:	00 00       	add	r0,r0
8000491c:	80 00       	ld.sh	r0,r0[0x0]
8000491e:	5f 08       	sreq	r8
80004920:	80 00       	ld.sh	r0,r0[0x0]
80004922:	46 84       	lddsp	r4,sp[0x1a0]
80004924:	80 00       	ld.sh	r0,r0[0x0]
80004926:	47 04       	lddsp	r4,sp[0x1c0]
80004928:	00 00       	add	r0,r0
8000492a:	08 98       	mov	r8,r4
8000492c:	00 00       	add	r0,r0
8000492e:	09 88       	ld.ub	r8,r4[0x0]
80004930:	80 00       	ld.sh	r0,r0[0x0]
80004932:	41 38       	lddsp	r8,sp[0x4c]

80004934 <TaskA_LED1>:
	gpio_toggle_pin(LED0_GPIO);
	
	vTaskDelay(delay);
	}
}
void TaskA_LED1() {
80004934:	eb cd 40 c0 	pushm	r6-r7,lr
	const portTickType delay = 500 / portTICK_RATE_MS;
	
	while(1) {
		gpio_toggle_pin(LED1_GPIO);
80004938:	34 96       	mov	r6,73
		
		vTaskDelay(delay);
8000493a:	e0 67 01 f4 	mov	r7,500
}
void TaskA_LED1() {
	const portTickType delay = 500 / portTICK_RATE_MS;
	
	while(1) {
		gpio_toggle_pin(LED1_GPIO);
8000493e:	0c 9c       	mov	r12,r6
80004940:	f0 1f 00 03 	mcall	8000494c <TaskA_LED1+0x18>
		
		vTaskDelay(delay);
80004944:	0e 9c       	mov	r12,r7
80004946:	f0 1f 00 03 	mcall	80004950 <TaskA_LED1+0x1c>
8000494a:	cf ab       	rjmp	8000493e <TaskA_LED1+0xa>
8000494c:	80 00       	ld.sh	r0,r0[0x0]
8000494e:	21 f4       	sub	r4,31
80004950:	80 00       	ld.sh	r0,r0[0x0]
80004952:	46 3c       	lddsp	r12,sp[0x18c]

80004954 <TaskA_LED0>:
		
		vTaskDelay(delay);
	}
}

void TaskA_LED0() {
80004954:	eb cd 40 c0 	pushm	r6-r7,lr
	const portTickType delay = 200 / portTICK_RATE_MS;
	
	while(1) {
	gpio_toggle_pin(LED0_GPIO);
80004958:	32 36       	mov	r6,35
	
	vTaskDelay(delay);
8000495a:	e0 67 00 c8 	mov	r7,200

void TaskA_LED0() {
	const portTickType delay = 200 / portTICK_RATE_MS;
	
	while(1) {
	gpio_toggle_pin(LED0_GPIO);
8000495e:	0c 9c       	mov	r12,r6
80004960:	f0 1f 00 03 	mcall	8000496c <TaskA_LED0+0x18>
	
	vTaskDelay(delay);
80004964:	0e 9c       	mov	r12,r7
80004966:	f0 1f 00 03 	mcall	80004970 <TaskA_LED0+0x1c>
8000496a:	cf ab       	rjmp	8000495e <TaskA_LED0+0xa>
8000496c:	80 00       	ld.sh	r0,r0[0x0]
8000496e:	21 f4       	sub	r4,31
80004970:	80 00       	ld.sh	r0,r0[0x0]
80004972:	46 3c       	lddsp	r12,sp[0x18c]

80004974 <init>:
    for(int i = 0; i < 10; i++){
        asm volatile ("" ::: "memory");
    }
}

void init(){
80004974:	eb cd 40 80 	pushm	r7,lr
	board_init();
80004978:	f0 1f 00 1a 	mcall	800049e0 <init+0x6c>
	
    gpio_configure_pin(TEST_A, GPIO_DIR_INPUT);
8000497c:	30 0b       	mov	r11,0
8000497e:	31 fc       	mov	r12,31
80004980:	f0 1f 00 19 	mcall	800049e4 <init+0x70>
    gpio_configure_pin(TEST_B, GPIO_DIR_INPUT);
80004984:	30 0b       	mov	r11,0
80004986:	31 dc       	mov	r12,29
80004988:	f0 1f 00 17 	mcall	800049e4 <init+0x70>
    gpio_configure_pin(TEST_C, GPIO_DIR_INPUT);
8000498c:	30 0b       	mov	r11,0
8000498e:	31 bc       	mov	r12,27
80004990:	f0 1f 00 15 	mcall	800049e4 <init+0x70>
    gpio_configure_pin(RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004994:	30 3b       	mov	r11,3
80004996:	31 ec       	mov	r12,30
80004998:	f0 1f 00 13 	mcall	800049e4 <init+0x70>
    gpio_configure_pin(RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000499c:	30 3b       	mov	r11,3
8000499e:	31 cc       	mov	r12,28
800049a0:	f0 1f 00 11 	mcall	800049e4 <init+0x70>
    gpio_configure_pin(RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800049a4:	30 3b       	mov	r11,3
800049a6:	32 0c       	mov	r12,32
800049a8:	f0 1f 00 0f 	mcall	800049e4 <init+0x70>

	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800049ac:	30 3a       	mov	r10,3
800049ae:	e0 6b 1b 00 	mov	r11,6912
800049b2:	ea 1b 00 b7 	orh	r11,0xb7
800049b6:	30 0c       	mov	r12,0
800049b8:	f0 1f 00 0c 	mcall	800049e8 <init+0x74>
	
	stdio_usb_init(&CONFIG_USART_IF);
800049bc:	fe 7c 1c 00 	mov	r12,-58368
800049c0:	f0 1f 00 0b 	mcall	800049ec <init+0x78>

    #if defined(__GNUC__) && defined(__AVR32__)
	    setbuf(stdout, NULL);
800049c4:	48 b7       	lddpc	r7,800049f0 <init+0x7c>
800049c6:	6e 08       	ld.w	r8,r7[0x0]
800049c8:	30 0b       	mov	r11,0
800049ca:	70 1c       	ld.w	r12,r8[0x4]
800049cc:	f0 1f 00 0a 	mcall	800049f4 <init+0x80>
	    setbuf(stdin,  NULL);
800049d0:	6e 08       	ld.w	r8,r7[0x0]
800049d2:	30 0b       	mov	r11,0
800049d4:	70 0c       	ld.w	r12,r8[0x0]
800049d6:	f0 1f 00 08 	mcall	800049f4 <init+0x80>
    #endif
}
800049da:	e3 cd 80 80 	ldm	sp++,r7,pc
800049de:	00 00       	add	r0,r0
800049e0:	80 00       	ld.sh	r0,r0[0x0]
800049e2:	21 0c       	sub	r12,16
800049e4:	80 00       	ld.sh	r0,r0[0x0]
800049e6:	21 3c       	sub	r12,19
800049e8:	80 00       	ld.sh	r0,r0[0x0]
800049ea:	23 80       	sub	r0,56
800049ec:	80 00       	ld.sh	r0,r0[0x0]
800049ee:	3f 2c       	mov	r12,-14
800049f0:	00 00       	add	r0,r0
800049f2:	01 ec       	ld.ub	r12,r0[0x6]
800049f4:	80 00       	ld.sh	r0,r0[0x0]
800049f6:	4f 48       	lddpc	r8,80004bc4 <_malloc_r+0x104>

800049f8 <main>:
	}
}



int main(){
800049f8:	eb cd 40 c0 	pushm	r6-r7,lr
	init();
800049fc:	f0 1f 00 10 	mcall	80004a3c <main+0x44>
        
	//	xTaskCreate(taskFn, "", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
	xTaskCreate(TaskA_LED0,"",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY +1, NULL);
80004a00:	49 06       	lddpc	r6,80004a40 <main+0x48>
80004a02:	30 07       	mov	r7,0
80004a04:	1a d7       	st.w	--sp,r7
80004a06:	1a d7       	st.w	--sp,r7
80004a08:	1a d7       	st.w	--sp,r7
80004a0a:	30 18       	mov	r8,1
80004a0c:	0e 99       	mov	r9,r7
80004a0e:	e0 6a 01 00 	mov	r10,256
80004a12:	0c 9b       	mov	r11,r6
80004a14:	48 cc       	lddpc	r12,80004a44 <main+0x4c>
80004a16:	f0 1f 00 0d 	mcall	80004a48 <main+0x50>
	xTaskCreate(TaskA_LED1,"",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY +1, NULL);
80004a1a:	1a d7       	st.w	--sp,r7
80004a1c:	1a d7       	st.w	--sp,r7
80004a1e:	1a d7       	st.w	--sp,r7
80004a20:	30 18       	mov	r8,1
80004a22:	0e 99       	mov	r9,r7
80004a24:	e0 6a 01 00 	mov	r10,256
80004a28:	0c 9b       	mov	r11,r6
80004a2a:	48 9c       	lddpc	r12,80004a4c <main+0x54>
80004a2c:	f0 1f 00 07 	mcall	80004a48 <main+0x50>

	// Start the scheduler, anything after this will not run.
	vTaskStartScheduler();
80004a30:	f0 1f 00 08 	mcall	80004a50 <main+0x58>
80004a34:	2f ad       	sub	sp,-24
    
}
80004a36:	0e 9c       	mov	r12,r7
80004a38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004a3c:	80 00       	ld.sh	r0,r0[0x0]
80004a3e:	49 74       	lddpc	r4,80004a98 <free+0x8>
80004a40:	80 00       	ld.sh	r0,r0[0x0]
80004a42:	5f 0c       	sreq	r12
80004a44:	80 00       	ld.sh	r0,r0[0x0]
80004a46:	49 54       	lddpc	r4,80004a98 <free+0x8>
80004a48:	80 00       	ld.sh	r0,r0[0x0]
80004a4a:	47 04       	lddsp	r4,sp[0x1c0]
80004a4c:	80 00       	ld.sh	r0,r0[0x0]
80004a4e:	49 34       	lddpc	r4,80004a98 <free+0x8>
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	48 e8       	lddpc	r8,80004a88 <exit+0x20>

80004a54 <atexit>:
80004a54:	d4 01       	pushm	lr
80004a56:	30 09       	mov	r9,0
80004a58:	18 9b       	mov	r11,r12
80004a5a:	12 9a       	mov	r10,r9
80004a5c:	12 9c       	mov	r12,r9
80004a5e:	f0 1f 00 02 	mcall	80004a64 <atexit+0x10>
80004a62:	d8 02       	popm	pc
80004a64:	80 00       	ld.sh	r0,r0[0x0]
80004a66:	51 28       	stdsp	sp[0x48],r8

80004a68 <exit>:
80004a68:	d4 21       	pushm	r4-r7,lr
80004a6a:	30 0b       	mov	r11,0
80004a6c:	18 97       	mov	r7,r12
80004a6e:	f0 1f 00 06 	mcall	80004a84 <exit+0x1c>
80004a72:	48 68       	lddpc	r8,80004a88 <exit+0x20>
80004a74:	70 0c       	ld.w	r12,r8[0x0]
80004a76:	78 a8       	ld.w	r8,r12[0x28]
80004a78:	58 08       	cp.w	r8,0
80004a7a:	c0 20       	breq	80004a7e <exit+0x16>
80004a7c:	5d 18       	icall	r8
80004a7e:	0e 9c       	mov	r12,r7
80004a80:	f0 1f 00 03 	mcall	80004a8c <exit+0x24>
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	51 d4       	stdsp	sp[0x74],r4
80004a88:	80 00       	ld.sh	r0,r0[0x0]
80004a8a:	5f 14       	srne	r4
80004a8c:	80 00       	ld.sh	r0,r0[0x0]
80004a8e:	50 ae       	stdsp	sp[0x28],lr

80004a90 <free>:
80004a90:	d4 01       	pushm	lr
80004a92:	48 48       	lddpc	r8,80004aa0 <free+0x10>
80004a94:	18 9b       	mov	r11,r12
80004a96:	70 0c       	ld.w	r12,r8[0x0]
80004a98:	f0 1f 00 03 	mcall	80004aa4 <free+0x14>
80004a9c:	d8 02       	popm	pc
80004a9e:	00 00       	add	r0,r0
80004aa0:	00 00       	add	r0,r0
80004aa2:	01 ec       	ld.ub	r12,r0[0x6]
80004aa4:	80 00       	ld.sh	r0,r0[0x0]
80004aa6:	55 e8       	stdsp	sp[0x178],r8

80004aa8 <malloc>:
80004aa8:	d4 01       	pushm	lr
80004aaa:	48 48       	lddpc	r8,80004ab8 <malloc+0x10>
80004aac:	18 9b       	mov	r11,r12
80004aae:	70 0c       	ld.w	r12,r8[0x0]
80004ab0:	f0 1f 00 03 	mcall	80004abc <malloc+0x14>
80004ab4:	d8 02       	popm	pc
80004ab6:	00 00       	add	r0,r0
80004ab8:	00 00       	add	r0,r0
80004aba:	01 ec       	ld.ub	r12,r0[0x6]
80004abc:	80 00       	ld.sh	r0,r0[0x0]
80004abe:	4a c0       	lddpc	r0,80004b6c <_malloc_r+0xac>

80004ac0 <_malloc_r>:
80004ac0:	d4 31       	pushm	r0-r7,lr
80004ac2:	f6 c8 ff f5 	sub	r8,r11,-11
80004ac6:	18 95       	mov	r5,r12
80004ac8:	10 97       	mov	r7,r8
80004aca:	e0 17 ff f8 	andl	r7,0xfff8
80004ace:	59 68       	cp.w	r8,22
80004ad0:	f9 b7 08 10 	movls	r7,16
80004ad4:	16 37       	cp.w	r7,r11
80004ad6:	5f 38       	srlo	r8
80004ad8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004adc:	c0 50       	breq	80004ae6 <_malloc_r+0x26>
80004ade:	30 c8       	mov	r8,12
80004ae0:	99 38       	st.w	r12[0xc],r8
80004ae2:	e0 8f 01 f3 	bral	80004ec8 <_malloc_r+0x408>
80004ae6:	f0 1f 00 50 	mcall	80004c24 <_malloc_r+0x164>
80004aea:	e0 47 01 f7 	cp.w	r7,503
80004aee:	e0 8b 00 1c 	brhi	80004b26 <_malloc_r+0x66>
80004af2:	ee 03 16 03 	lsr	r3,r7,0x3
80004af6:	4c d8       	lddpc	r8,80004c28 <_malloc_r+0x168>
80004af8:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004afc:	70 36       	ld.w	r6,r8[0xc]
80004afe:	10 36       	cp.w	r6,r8
80004b00:	c0 61       	brne	80004b0c <_malloc_r+0x4c>
80004b02:	ec c8 ff f8 	sub	r8,r6,-8
80004b06:	70 36       	ld.w	r6,r8[0xc]
80004b08:	10 36       	cp.w	r6,r8
80004b0a:	c0 c0       	breq	80004b22 <_malloc_r+0x62>
80004b0c:	6c 18       	ld.w	r8,r6[0x4]
80004b0e:	e0 18 ff fc 	andl	r8,0xfffc
80004b12:	6c 3a       	ld.w	r10,r6[0xc]
80004b14:	ec 08 00 09 	add	r9,r6,r8
80004b18:	0a 9c       	mov	r12,r5
80004b1a:	6c 28       	ld.w	r8,r6[0x8]
80004b1c:	95 28       	st.w	r10[0x8],r8
80004b1e:	91 3a       	st.w	r8[0xc],r10
80004b20:	c4 68       	rjmp	80004bac <_malloc_r+0xec>
80004b22:	2f e3       	sub	r3,-2
80004b24:	c4 c8       	rjmp	80004bbc <_malloc_r+0xfc>
80004b26:	ee 03 16 09 	lsr	r3,r7,0x9
80004b2a:	c0 41       	brne	80004b32 <_malloc_r+0x72>
80004b2c:	ee 03 16 03 	lsr	r3,r7,0x3
80004b30:	c2 68       	rjmp	80004b7c <_malloc_r+0xbc>
80004b32:	58 43       	cp.w	r3,4
80004b34:	e0 8b 00 06 	brhi	80004b40 <_malloc_r+0x80>
80004b38:	ee 03 16 06 	lsr	r3,r7,0x6
80004b3c:	2c 83       	sub	r3,-56
80004b3e:	c1 f8       	rjmp	80004b7c <_malloc_r+0xbc>
80004b40:	59 43       	cp.w	r3,20
80004b42:	e0 8b 00 04 	brhi	80004b4a <_malloc_r+0x8a>
80004b46:	2a 53       	sub	r3,-91
80004b48:	c1 a8       	rjmp	80004b7c <_malloc_r+0xbc>
80004b4a:	e0 43 00 54 	cp.w	r3,84
80004b4e:	e0 8b 00 06 	brhi	80004b5a <_malloc_r+0x9a>
80004b52:	ee 03 16 0c 	lsr	r3,r7,0xc
80004b56:	29 23       	sub	r3,-110
80004b58:	c1 28       	rjmp	80004b7c <_malloc_r+0xbc>
80004b5a:	e0 43 01 54 	cp.w	r3,340
80004b5e:	e0 8b 00 06 	brhi	80004b6a <_malloc_r+0xaa>
80004b62:	ee 03 16 0f 	lsr	r3,r7,0xf
80004b66:	28 93       	sub	r3,-119
80004b68:	c0 a8       	rjmp	80004b7c <_malloc_r+0xbc>
80004b6a:	e0 43 05 54 	cp.w	r3,1364
80004b6e:	e0 88 00 04 	brls	80004b76 <_malloc_r+0xb6>
80004b72:	37 e3       	mov	r3,126
80004b74:	c0 48       	rjmp	80004b7c <_malloc_r+0xbc>
80004b76:	ee 03 16 12 	lsr	r3,r7,0x12
80004b7a:	28 43       	sub	r3,-124
80004b7c:	4a ba       	lddpc	r10,80004c28 <_malloc_r+0x168>
80004b7e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004b82:	74 36       	ld.w	r6,r10[0xc]
80004b84:	c1 98       	rjmp	80004bb6 <_malloc_r+0xf6>
80004b86:	6c 19       	ld.w	r9,r6[0x4]
80004b88:	e0 19 ff fc 	andl	r9,0xfffc
80004b8c:	f2 07 01 0b 	sub	r11,r9,r7
80004b90:	58 fb       	cp.w	r11,15
80004b92:	e0 8a 00 04 	brle	80004b9a <_malloc_r+0xda>
80004b96:	20 13       	sub	r3,1
80004b98:	c1 18       	rjmp	80004bba <_malloc_r+0xfa>
80004b9a:	6c 38       	ld.w	r8,r6[0xc]
80004b9c:	58 0b       	cp.w	r11,0
80004b9e:	c0 b5       	brlt	80004bb4 <_malloc_r+0xf4>
80004ba0:	6c 2a       	ld.w	r10,r6[0x8]
80004ba2:	ec 09 00 09 	add	r9,r6,r9
80004ba6:	0a 9c       	mov	r12,r5
80004ba8:	91 2a       	st.w	r8[0x8],r10
80004baa:	95 38       	st.w	r10[0xc],r8
80004bac:	72 18       	ld.w	r8,r9[0x4]
80004bae:	a1 a8       	sbr	r8,0x0
80004bb0:	93 18       	st.w	r9[0x4],r8
80004bb2:	cb c8       	rjmp	80004d2a <_malloc_r+0x26a>
80004bb4:	10 96       	mov	r6,r8
80004bb6:	14 36       	cp.w	r6,r10
80004bb8:	ce 71       	brne	80004b86 <_malloc_r+0xc6>
80004bba:	2f f3       	sub	r3,-1
80004bbc:	49 ba       	lddpc	r10,80004c28 <_malloc_r+0x168>
80004bbe:	f4 cc ff f8 	sub	r12,r10,-8
80004bc2:	78 26       	ld.w	r6,r12[0x8]
80004bc4:	18 36       	cp.w	r6,r12
80004bc6:	c6 e0       	breq	80004ca2 <_malloc_r+0x1e2>
80004bc8:	6c 19       	ld.w	r9,r6[0x4]
80004bca:	e0 19 ff fc 	andl	r9,0xfffc
80004bce:	f2 07 01 08 	sub	r8,r9,r7
80004bd2:	58 f8       	cp.w	r8,15
80004bd4:	e0 89 00 90 	brgt	80004cf4 <_malloc_r+0x234>
80004bd8:	99 3c       	st.w	r12[0xc],r12
80004bda:	99 2c       	st.w	r12[0x8],r12
80004bdc:	58 08       	cp.w	r8,0
80004bde:	c0 55       	brlt	80004be8 <_malloc_r+0x128>
80004be0:	ec 09 00 09 	add	r9,r6,r9
80004be4:	0a 9c       	mov	r12,r5
80004be6:	ce 3b       	rjmp	80004bac <_malloc_r+0xec>
80004be8:	e0 49 01 ff 	cp.w	r9,511
80004bec:	e0 8b 00 13 	brhi	80004c12 <_malloc_r+0x152>
80004bf0:	a3 99       	lsr	r9,0x3
80004bf2:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004bf6:	70 2b       	ld.w	r11,r8[0x8]
80004bf8:	8d 38       	st.w	r6[0xc],r8
80004bfa:	8d 2b       	st.w	r6[0x8],r11
80004bfc:	97 36       	st.w	r11[0xc],r6
80004bfe:	91 26       	st.w	r8[0x8],r6
80004c00:	a3 49       	asr	r9,0x2
80004c02:	74 18       	ld.w	r8,r10[0x4]
80004c04:	30 1b       	mov	r11,1
80004c06:	f6 09 09 49 	lsl	r9,r11,r9
80004c0a:	f1 e9 10 09 	or	r9,r8,r9
80004c0e:	95 19       	st.w	r10[0x4],r9
80004c10:	c4 98       	rjmp	80004ca2 <_malloc_r+0x1e2>
80004c12:	f2 0a 16 09 	lsr	r10,r9,0x9
80004c16:	58 4a       	cp.w	r10,4
80004c18:	e0 8b 00 0a 	brhi	80004c2c <_malloc_r+0x16c>
80004c1c:	f2 0a 16 06 	lsr	r10,r9,0x6
80004c20:	2c 8a       	sub	r10,-56
80004c22:	c2 38       	rjmp	80004c68 <_malloc_r+0x1a8>
80004c24:	80 00       	ld.sh	r0,r0[0x0]
80004c26:	42 d8       	lddsp	r8,sp[0xb4]
80004c28:	00 00       	add	r0,r0
80004c2a:	01 f0       	ld.ub	r0,r0[0x7]
80004c2c:	59 4a       	cp.w	r10,20
80004c2e:	e0 8b 00 04 	brhi	80004c36 <_malloc_r+0x176>
80004c32:	2a 5a       	sub	r10,-91
80004c34:	c1 a8       	rjmp	80004c68 <_malloc_r+0x1a8>
80004c36:	e0 4a 00 54 	cp.w	r10,84
80004c3a:	e0 8b 00 06 	brhi	80004c46 <_malloc_r+0x186>
80004c3e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004c42:	29 2a       	sub	r10,-110
80004c44:	c1 28       	rjmp	80004c68 <_malloc_r+0x1a8>
80004c46:	e0 4a 01 54 	cp.w	r10,340
80004c4a:	e0 8b 00 06 	brhi	80004c56 <_malloc_r+0x196>
80004c4e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004c52:	28 9a       	sub	r10,-119
80004c54:	c0 a8       	rjmp	80004c68 <_malloc_r+0x1a8>
80004c56:	e0 4a 05 54 	cp.w	r10,1364
80004c5a:	e0 88 00 04 	brls	80004c62 <_malloc_r+0x1a2>
80004c5e:	37 ea       	mov	r10,126
80004c60:	c0 48       	rjmp	80004c68 <_malloc_r+0x1a8>
80004c62:	f2 0a 16 12 	lsr	r10,r9,0x12
80004c66:	28 4a       	sub	r10,-124
80004c68:	4c 8b       	lddpc	r11,80004d88 <_malloc_r+0x2c8>
80004c6a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004c6e:	68 28       	ld.w	r8,r4[0x8]
80004c70:	08 38       	cp.w	r8,r4
80004c72:	c0 e1       	brne	80004c8e <_malloc_r+0x1ce>
80004c74:	76 19       	ld.w	r9,r11[0x4]
80004c76:	a3 4a       	asr	r10,0x2
80004c78:	30 1e       	mov	lr,1
80004c7a:	fc 0a 09 4a 	lsl	r10,lr,r10
80004c7e:	f3 ea 10 0a 	or	r10,r9,r10
80004c82:	10 99       	mov	r9,r8
80004c84:	97 1a       	st.w	r11[0x4],r10
80004c86:	c0 a8       	rjmp	80004c9a <_malloc_r+0x1da>
80004c88:	70 28       	ld.w	r8,r8[0x8]
80004c8a:	08 38       	cp.w	r8,r4
80004c8c:	c0 60       	breq	80004c98 <_malloc_r+0x1d8>
80004c8e:	70 1a       	ld.w	r10,r8[0x4]
80004c90:	e0 1a ff fc 	andl	r10,0xfffc
80004c94:	14 39       	cp.w	r9,r10
80004c96:	cf 93       	brcs	80004c88 <_malloc_r+0x1c8>
80004c98:	70 39       	ld.w	r9,r8[0xc]
80004c9a:	8d 39       	st.w	r6[0xc],r9
80004c9c:	8d 28       	st.w	r6[0x8],r8
80004c9e:	91 36       	st.w	r8[0xc],r6
80004ca0:	93 26       	st.w	r9[0x8],r6
80004ca2:	e6 08 14 02 	asr	r8,r3,0x2
80004ca6:	30 1b       	mov	r11,1
80004ca8:	4b 84       	lddpc	r4,80004d88 <_malloc_r+0x2c8>
80004caa:	f6 08 09 4b 	lsl	r11,r11,r8
80004cae:	68 18       	ld.w	r8,r4[0x4]
80004cb0:	10 3b       	cp.w	r11,r8
80004cb2:	e0 8b 00 6f 	brhi	80004d90 <_malloc_r+0x2d0>
80004cb6:	f7 e8 00 09 	and	r9,r11,r8
80004cba:	c0 b1       	brne	80004cd0 <_malloc_r+0x210>
80004cbc:	e0 13 ff fc 	andl	r3,0xfffc
80004cc0:	a1 7b       	lsl	r11,0x1
80004cc2:	2f c3       	sub	r3,-4
80004cc4:	c0 38       	rjmp	80004cca <_malloc_r+0x20a>
80004cc6:	2f c3       	sub	r3,-4
80004cc8:	a1 7b       	lsl	r11,0x1
80004cca:	f7 e8 00 09 	and	r9,r11,r8
80004cce:	cf c0       	breq	80004cc6 <_malloc_r+0x206>
80004cd0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004cd4:	06 92       	mov	r2,r3
80004cd6:	1c 91       	mov	r1,lr
80004cd8:	62 36       	ld.w	r6,r1[0xc]
80004cda:	c2 e8       	rjmp	80004d36 <_malloc_r+0x276>
80004cdc:	6c 1a       	ld.w	r10,r6[0x4]
80004cde:	e0 1a ff fc 	andl	r10,0xfffc
80004ce2:	f4 07 01 08 	sub	r8,r10,r7
80004ce6:	58 f8       	cp.w	r8,15
80004ce8:	e0 8a 00 15 	brle	80004d12 <_malloc_r+0x252>
80004cec:	6c 3a       	ld.w	r10,r6[0xc]
80004cee:	6c 29       	ld.w	r9,r6[0x8]
80004cf0:	95 29       	st.w	r10[0x8],r9
80004cf2:	93 3a       	st.w	r9[0xc],r10
80004cf4:	0e 99       	mov	r9,r7
80004cf6:	ec 07 00 07 	add	r7,r6,r7
80004cfa:	a1 a9       	sbr	r9,0x0
80004cfc:	99 37       	st.w	r12[0xc],r7
80004cfe:	99 27       	st.w	r12[0x8],r7
80004d00:	8d 19       	st.w	r6[0x4],r9
80004d02:	ee 08 09 08 	st.w	r7[r8],r8
80004d06:	8f 2c       	st.w	r7[0x8],r12
80004d08:	8f 3c       	st.w	r7[0xc],r12
80004d0a:	a1 a8       	sbr	r8,0x0
80004d0c:	0a 9c       	mov	r12,r5
80004d0e:	8f 18       	st.w	r7[0x4],r8
80004d10:	c0 d8       	rjmp	80004d2a <_malloc_r+0x26a>
80004d12:	6c 39       	ld.w	r9,r6[0xc]
80004d14:	58 08       	cp.w	r8,0
80004d16:	c0 f5       	brlt	80004d34 <_malloc_r+0x274>
80004d18:	ec 0a 00 0a 	add	r10,r6,r10
80004d1c:	74 18       	ld.w	r8,r10[0x4]
80004d1e:	a1 a8       	sbr	r8,0x0
80004d20:	0a 9c       	mov	r12,r5
80004d22:	95 18       	st.w	r10[0x4],r8
80004d24:	6c 28       	ld.w	r8,r6[0x8]
80004d26:	93 28       	st.w	r9[0x8],r8
80004d28:	91 39       	st.w	r8[0xc],r9
80004d2a:	f0 1f 00 19 	mcall	80004d8c <_malloc_r+0x2cc>
80004d2e:	ec cc ff f8 	sub	r12,r6,-8
80004d32:	d8 32       	popm	r0-r7,pc
80004d34:	12 96       	mov	r6,r9
80004d36:	02 36       	cp.w	r6,r1
80004d38:	cd 21       	brne	80004cdc <_malloc_r+0x21c>
80004d3a:	2f f2       	sub	r2,-1
80004d3c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004d40:	c0 30       	breq	80004d46 <_malloc_r+0x286>
80004d42:	2f 81       	sub	r1,-8
80004d44:	cc ab       	rjmp	80004cd8 <_malloc_r+0x218>
80004d46:	1c 98       	mov	r8,lr
80004d48:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004d4c:	c0 81       	brne	80004d5c <_malloc_r+0x29c>
80004d4e:	68 19       	ld.w	r9,r4[0x4]
80004d50:	f6 08 11 ff 	rsub	r8,r11,-1
80004d54:	f3 e8 00 08 	and	r8,r9,r8
80004d58:	89 18       	st.w	r4[0x4],r8
80004d5a:	c0 78       	rjmp	80004d68 <_malloc_r+0x2a8>
80004d5c:	f0 c9 00 08 	sub	r9,r8,8
80004d60:	20 13       	sub	r3,1
80004d62:	70 08       	ld.w	r8,r8[0x0]
80004d64:	12 38       	cp.w	r8,r9
80004d66:	cf 10       	breq	80004d48 <_malloc_r+0x288>
80004d68:	a1 7b       	lsl	r11,0x1
80004d6a:	68 18       	ld.w	r8,r4[0x4]
80004d6c:	10 3b       	cp.w	r11,r8
80004d6e:	e0 8b 00 11 	brhi	80004d90 <_malloc_r+0x2d0>
80004d72:	58 0b       	cp.w	r11,0
80004d74:	c0 e0       	breq	80004d90 <_malloc_r+0x2d0>
80004d76:	04 93       	mov	r3,r2
80004d78:	c0 38       	rjmp	80004d7e <_malloc_r+0x2be>
80004d7a:	2f c3       	sub	r3,-4
80004d7c:	a1 7b       	lsl	r11,0x1
80004d7e:	f7 e8 00 09 	and	r9,r11,r8
80004d82:	ca 71       	brne	80004cd0 <_malloc_r+0x210>
80004d84:	cf bb       	rjmp	80004d7a <_malloc_r+0x2ba>
80004d86:	00 00       	add	r0,r0
80004d88:	00 00       	add	r0,r0
80004d8a:	01 f0       	ld.ub	r0,r0[0x7]
80004d8c:	80 00       	ld.sh	r0,r0[0x0]
80004d8e:	42 e4       	lddsp	r4,sp[0xb8]
80004d90:	68 23       	ld.w	r3,r4[0x8]
80004d92:	66 12       	ld.w	r2,r3[0x4]
80004d94:	e0 12 ff fc 	andl	r2,0xfffc
80004d98:	0e 32       	cp.w	r2,r7
80004d9a:	5f 39       	srlo	r9
80004d9c:	e4 07 01 08 	sub	r8,r2,r7
80004da0:	58 f8       	cp.w	r8,15
80004da2:	5f aa       	srle	r10
80004da4:	f5 e9 10 09 	or	r9,r10,r9
80004da8:	e0 80 00 a2 	breq	80004eec <_malloc_r+0x42c>
80004dac:	4c 88       	lddpc	r8,80004ecc <_malloc_r+0x40c>
80004dae:	70 01       	ld.w	r1,r8[0x0]
80004db0:	4c 88       	lddpc	r8,80004ed0 <_malloc_r+0x410>
80004db2:	2f 01       	sub	r1,-16
80004db4:	70 08       	ld.w	r8,r8[0x0]
80004db6:	0e 01       	add	r1,r7
80004db8:	5b f8       	cp.w	r8,-1
80004dba:	c0 40       	breq	80004dc2 <_malloc_r+0x302>
80004dbc:	28 11       	sub	r1,-127
80004dbe:	e0 11 ff 80 	andl	r1,0xff80
80004dc2:	02 9b       	mov	r11,r1
80004dc4:	0a 9c       	mov	r12,r5
80004dc6:	f0 1f 00 44 	mcall	80004ed4 <_malloc_r+0x414>
80004dca:	18 96       	mov	r6,r12
80004dcc:	5b fc       	cp.w	r12,-1
80004dce:	c6 e0       	breq	80004eaa <_malloc_r+0x3ea>
80004dd0:	e6 02 00 08 	add	r8,r3,r2
80004dd4:	10 3c       	cp.w	r12,r8
80004dd6:	c0 32       	brcc	80004ddc <_malloc_r+0x31c>
80004dd8:	08 33       	cp.w	r3,r4
80004dda:	c6 81       	brne	80004eaa <_malloc_r+0x3ea>
80004ddc:	4b fa       	lddpc	r10,80004ed8 <_malloc_r+0x418>
80004dde:	74 09       	ld.w	r9,r10[0x0]
80004de0:	e2 09 00 09 	add	r9,r1,r9
80004de4:	95 09       	st.w	r10[0x0],r9
80004de6:	10 36       	cp.w	r6,r8
80004de8:	c0 a1       	brne	80004dfc <_malloc_r+0x33c>
80004dea:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004dee:	c0 71       	brne	80004dfc <_malloc_r+0x33c>
80004df0:	e2 02 00 02 	add	r2,r1,r2
80004df4:	68 28       	ld.w	r8,r4[0x8]
80004df6:	a1 a2       	sbr	r2,0x0
80004df8:	91 12       	st.w	r8[0x4],r2
80004dfa:	c4 c8       	rjmp	80004e92 <_malloc_r+0x3d2>
80004dfc:	4b 5a       	lddpc	r10,80004ed0 <_malloc_r+0x410>
80004dfe:	74 0b       	ld.w	r11,r10[0x0]
80004e00:	5b fb       	cp.w	r11,-1
80004e02:	c0 31       	brne	80004e08 <_malloc_r+0x348>
80004e04:	95 06       	st.w	r10[0x0],r6
80004e06:	c0 68       	rjmp	80004e12 <_malloc_r+0x352>
80004e08:	ec 09 00 09 	add	r9,r6,r9
80004e0c:	4b 3a       	lddpc	r10,80004ed8 <_malloc_r+0x418>
80004e0e:	10 19       	sub	r9,r8
80004e10:	95 09       	st.w	r10[0x0],r9
80004e12:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004e16:	f0 09 11 08 	rsub	r9,r8,8
80004e1a:	58 08       	cp.w	r8,0
80004e1c:	f2 08 17 10 	movne	r8,r9
80004e20:	ed d8 e1 06 	addne	r6,r6,r8
80004e24:	28 08       	sub	r8,-128
80004e26:	ec 01 00 01 	add	r1,r6,r1
80004e2a:	0a 9c       	mov	r12,r5
80004e2c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004e30:	f0 01 01 01 	sub	r1,r8,r1
80004e34:	02 9b       	mov	r11,r1
80004e36:	f0 1f 00 28 	mcall	80004ed4 <_malloc_r+0x414>
80004e3a:	4a 88       	lddpc	r8,80004ed8 <_malloc_r+0x418>
80004e3c:	5b fc       	cp.w	r12,-1
80004e3e:	ec 0c 17 00 	moveq	r12,r6
80004e42:	f9 b1 00 00 	moveq	r1,0
80004e46:	70 09       	ld.w	r9,r8[0x0]
80004e48:	0c 1c       	sub	r12,r6
80004e4a:	89 26       	st.w	r4[0x8],r6
80004e4c:	02 0c       	add	r12,r1
80004e4e:	12 01       	add	r1,r9
80004e50:	a1 ac       	sbr	r12,0x0
80004e52:	91 01       	st.w	r8[0x0],r1
80004e54:	8d 1c       	st.w	r6[0x4],r12
80004e56:	08 33       	cp.w	r3,r4
80004e58:	c1 d0       	breq	80004e92 <_malloc_r+0x3d2>
80004e5a:	58 f2       	cp.w	r2,15
80004e5c:	e0 8b 00 05 	brhi	80004e66 <_malloc_r+0x3a6>
80004e60:	30 18       	mov	r8,1
80004e62:	8d 18       	st.w	r6[0x4],r8
80004e64:	c2 38       	rjmp	80004eaa <_malloc_r+0x3ea>
80004e66:	30 59       	mov	r9,5
80004e68:	20 c2       	sub	r2,12
80004e6a:	e0 12 ff f8 	andl	r2,0xfff8
80004e6e:	e6 02 00 08 	add	r8,r3,r2
80004e72:	91 29       	st.w	r8[0x8],r9
80004e74:	91 19       	st.w	r8[0x4],r9
80004e76:	66 18       	ld.w	r8,r3[0x4]
80004e78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e7c:	e5 e8 10 08 	or	r8,r2,r8
80004e80:	87 18       	st.w	r3[0x4],r8
80004e82:	58 f2       	cp.w	r2,15
80004e84:	e0 88 00 07 	brls	80004e92 <_malloc_r+0x3d2>
80004e88:	e6 cb ff f8 	sub	r11,r3,-8
80004e8c:	0a 9c       	mov	r12,r5
80004e8e:	f0 1f 00 14 	mcall	80004edc <_malloc_r+0x41c>
80004e92:	49 49       	lddpc	r9,80004ee0 <_malloc_r+0x420>
80004e94:	72 0a       	ld.w	r10,r9[0x0]
80004e96:	49 18       	lddpc	r8,80004ed8 <_malloc_r+0x418>
80004e98:	70 08       	ld.w	r8,r8[0x0]
80004e9a:	14 38       	cp.w	r8,r10
80004e9c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004ea0:	49 19       	lddpc	r9,80004ee4 <_malloc_r+0x424>
80004ea2:	72 0a       	ld.w	r10,r9[0x0]
80004ea4:	14 38       	cp.w	r8,r10
80004ea6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004eaa:	68 28       	ld.w	r8,r4[0x8]
80004eac:	70 18       	ld.w	r8,r8[0x4]
80004eae:	e0 18 ff fc 	andl	r8,0xfffc
80004eb2:	0e 38       	cp.w	r8,r7
80004eb4:	5f 39       	srlo	r9
80004eb6:	0e 18       	sub	r8,r7
80004eb8:	58 f8       	cp.w	r8,15
80004eba:	5f aa       	srle	r10
80004ebc:	f5 e9 10 09 	or	r9,r10,r9
80004ec0:	c1 60       	breq	80004eec <_malloc_r+0x42c>
80004ec2:	0a 9c       	mov	r12,r5
80004ec4:	f0 1f 00 09 	mcall	80004ee8 <_malloc_r+0x428>
80004ec8:	d8 3a       	popm	r0-r7,pc,r12=0
80004eca:	00 00       	add	r0,r0
80004ecc:	00 00       	add	r0,r0
80004ece:	09 d0       	ld.ub	r0,r4[0x5]
80004ed0:	00 00       	add	r0,r0
80004ed2:	05 fc       	ld.ub	r12,r2[0x7]
80004ed4:	80 00       	ld.sh	r0,r0[0x0]
80004ed6:	4f 20       	lddpc	r0,8000509c <strncpy+0x18>
80004ed8:	00 00       	add	r0,r0
80004eda:	09 d4       	ld.ub	r4,r4[0x5]
80004edc:	80 00       	ld.sh	r0,r0[0x0]
80004ede:	55 e8       	stdsp	sp[0x178],r8
80004ee0:	00 00       	add	r0,r0
80004ee2:	09 cc       	ld.ub	r12,r4[0x4]
80004ee4:	00 00       	add	r0,r0
80004ee6:	09 c8       	ld.ub	r8,r4[0x4]
80004ee8:	80 00       	ld.sh	r0,r0[0x0]
80004eea:	42 e4       	lddsp	r4,sp[0xb8]
80004eec:	68 26       	ld.w	r6,r4[0x8]
80004eee:	a1 a8       	sbr	r8,0x0
80004ef0:	0e 99       	mov	r9,r7
80004ef2:	a1 a9       	sbr	r9,0x0
80004ef4:	8d 19       	st.w	r6[0x4],r9
80004ef6:	ec 07 00 07 	add	r7,r6,r7
80004efa:	0a 9c       	mov	r12,r5
80004efc:	89 27       	st.w	r4[0x8],r7
80004efe:	8f 18       	st.w	r7[0x4],r8
80004f00:	f0 1f 00 03 	mcall	80004f0c <_malloc_r+0x44c>
80004f04:	ec cc ff f8 	sub	r12,r6,-8
80004f08:	d8 32       	popm	r0-r7,pc
80004f0a:	00 00       	add	r0,r0
80004f0c:	80 00       	ld.sh	r0,r0[0x0]
80004f0e:	42 e4       	lddsp	r4,sp[0xb8]

80004f10 <memset>:
80004f10:	18 98       	mov	r8,r12
80004f12:	c0 38       	rjmp	80004f18 <memset+0x8>
80004f14:	10 cb       	st.b	r8++,r11
80004f16:	20 1a       	sub	r10,1
80004f18:	58 0a       	cp.w	r10,0
80004f1a:	cf d1       	brne	80004f14 <memset+0x4>
80004f1c:	5e fc       	retal	r12
80004f1e:	d7 03       	nop

80004f20 <_sbrk_r>:
80004f20:	d4 21       	pushm	r4-r7,lr
80004f22:	30 08       	mov	r8,0
80004f24:	18 97       	mov	r7,r12
80004f26:	48 76       	lddpc	r6,80004f40 <_sbrk_r+0x20>
80004f28:	16 9c       	mov	r12,r11
80004f2a:	8d 08       	st.w	r6[0x0],r8
80004f2c:	f0 1f 00 06 	mcall	80004f44 <_sbrk_r+0x24>
80004f30:	5b fc       	cp.w	r12,-1
80004f32:	c0 51       	brne	80004f3c <_sbrk_r+0x1c>
80004f34:	6c 08       	ld.w	r8,r6[0x0]
80004f36:	58 08       	cp.w	r8,0
80004f38:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004f3c:	d8 22       	popm	r4-r7,pc
80004f3e:	00 00       	add	r0,r0
80004f40:	00 00       	add	r0,r0
80004f42:	0a 2c       	rsub	r12,r5
80004f44:	80 00       	ld.sh	r0,r0[0x0]
80004f46:	50 e8       	stdsp	sp[0x38],r8

80004f48 <setbuf>:
80004f48:	d4 01       	pushm	lr
80004f4a:	e0 69 04 00 	mov	r9,1024
80004f4e:	58 0b       	cp.w	r11,0
80004f50:	f9 ba 00 02 	moveq	r10,2
80004f54:	f9 ba 01 00 	movne	r10,0
80004f58:	f0 1f 00 02 	mcall	80004f60 <setbuf+0x18>
80004f5c:	d8 02       	popm	pc
80004f5e:	00 00       	add	r0,r0
80004f60:	80 00       	ld.sh	r0,r0[0x0]
80004f62:	4f 64       	lddpc	r4,80005138 <__register_exitproc+0x10>

80004f64 <setvbuf>:
80004f64:	d4 31       	pushm	r0-r7,lr
80004f66:	4b f8       	lddpc	r8,80005060 <setvbuf+0xfc>
80004f68:	18 97       	mov	r7,r12
80004f6a:	16 96       	mov	r6,r11
80004f6c:	14 95       	mov	r5,r10
80004f6e:	12 94       	mov	r4,r9
80004f70:	70 0c       	ld.w	r12,r8[0x0]
80004f72:	58 0c       	cp.w	r12,0
80004f74:	c0 60       	breq	80004f80 <setvbuf+0x1c>
80004f76:	78 68       	ld.w	r8,r12[0x18]
80004f78:	58 08       	cp.w	r8,0
80004f7a:	c0 31       	brne	80004f80 <setvbuf+0x1c>
80004f7c:	f0 1f 00 3a 	mcall	80005064 <setvbuf+0x100>
80004f80:	4b a8       	lddpc	r8,80005068 <setvbuf+0x104>
80004f82:	10 37       	cp.w	r7,r8
80004f84:	c0 51       	brne	80004f8e <setvbuf+0x2a>
80004f86:	4b 78       	lddpc	r8,80005060 <setvbuf+0xfc>
80004f88:	70 08       	ld.w	r8,r8[0x0]
80004f8a:	70 07       	ld.w	r7,r8[0x0]
80004f8c:	c0 e8       	rjmp	80004fa8 <setvbuf+0x44>
80004f8e:	4b 88       	lddpc	r8,8000506c <setvbuf+0x108>
80004f90:	10 37       	cp.w	r7,r8
80004f92:	c0 51       	brne	80004f9c <setvbuf+0x38>
80004f94:	4b 38       	lddpc	r8,80005060 <setvbuf+0xfc>
80004f96:	70 08       	ld.w	r8,r8[0x0]
80004f98:	70 17       	ld.w	r7,r8[0x4]
80004f9a:	c0 78       	rjmp	80004fa8 <setvbuf+0x44>
80004f9c:	4b 58       	lddpc	r8,80005070 <setvbuf+0x10c>
80004f9e:	10 37       	cp.w	r7,r8
80004fa0:	c0 41       	brne	80004fa8 <setvbuf+0x44>
80004fa2:	4b 08       	lddpc	r8,80005060 <setvbuf+0xfc>
80004fa4:	70 08       	ld.w	r8,r8[0x0]
80004fa6:	70 27       	ld.w	r7,r8[0x8]
80004fa8:	58 25       	cp.w	r5,2
80004faa:	5f b8       	srhi	r8
80004fac:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80004fb0:	c0 20       	breq	80004fb4 <setvbuf+0x50>
80004fb2:	dc 3a       	popm	r0-r7,pc,r12=-1
80004fb4:	4a b3       	lddpc	r3,80005060 <setvbuf+0xfc>
80004fb6:	0e 9b       	mov	r11,r7
80004fb8:	66 0c       	ld.w	r12,r3[0x0]
80004fba:	f0 1f 00 2f 	mcall	80005074 <setvbuf+0x110>
80004fbe:	30 08       	mov	r8,0
80004fc0:	8f 68       	st.w	r7[0x18],r8
80004fc2:	8f 18       	st.w	r7[0x4],r8
80004fc4:	8e 68       	ld.sh	r8,r7[0xc]
80004fc6:	ed b8 00 07 	bld	r8,0x7
80004fca:	c0 51       	brne	80004fd4 <setvbuf+0x70>
80004fcc:	66 0c       	ld.w	r12,r3[0x0]
80004fce:	6e 4b       	ld.w	r11,r7[0x10]
80004fd0:	f0 1f 00 2a 	mcall	80005078 <setvbuf+0x114>
80004fd4:	8e 68       	ld.sh	r8,r7[0xc]
80004fd6:	e0 18 ff 7c 	andl	r8,0xff7c
80004fda:	ae 68       	st.h	r7[0xc],r8
80004fdc:	58 25       	cp.w	r5,2
80004fde:	c0 31       	brne	80004fe4 <setvbuf+0x80>
80004fe0:	30 0c       	mov	r12,0
80004fe2:	c1 38       	rjmp	80005008 <setvbuf+0xa4>
80004fe4:	58 06       	cp.w	r6,0
80004fe6:	c2 11       	brne	80005028 <setvbuf+0xc4>
80004fe8:	e0 63 04 00 	mov	r3,1024
80004fec:	58 04       	cp.w	r4,0
80004fee:	e6 04 17 00 	moveq	r4,r3
80004ff2:	08 9c       	mov	r12,r4
80004ff4:	f0 1f 00 22 	mcall	8000507c <setvbuf+0x118>
80004ff8:	18 96       	mov	r6,r12
80004ffa:	c1 41       	brne	80005022 <setvbuf+0xbe>
80004ffc:	06 9c       	mov	r12,r3
80004ffe:	f0 1f 00 20 	mcall	8000507c <setvbuf+0x118>
80005002:	18 96       	mov	r6,r12
80005004:	c0 e1       	brne	80005020 <setvbuf+0xbc>
80005006:	3f fc       	mov	r12,-1
80005008:	8e 68       	ld.sh	r8,r7[0xc]
8000500a:	a1 b8       	sbr	r8,0x1
8000500c:	ae 68       	st.h	r7[0xc],r8
8000500e:	ee c8 ff b9 	sub	r8,r7,-71
80005012:	8f 48       	st.w	r7[0x10],r8
80005014:	8f 08       	st.w	r7[0x0],r8
80005016:	30 08       	mov	r8,0
80005018:	8f 28       	st.w	r7[0x8],r8
8000501a:	30 18       	mov	r8,1
8000501c:	8f 58       	st.w	r7[0x14],r8
8000501e:	d8 32       	popm	r0-r7,pc
80005020:	06 94       	mov	r4,r3
80005022:	8e 68       	ld.sh	r8,r7[0xc]
80005024:	a7 b8       	sbr	r8,0x7
80005026:	ae 68       	st.h	r7[0xc],r8
80005028:	58 15       	cp.w	r5,1
8000502a:	c0 71       	brne	80005038 <setvbuf+0xd4>
8000502c:	8e 68       	ld.sh	r8,r7[0xc]
8000502e:	a1 a8       	sbr	r8,0x0
80005030:	ae 68       	st.h	r7[0xc],r8
80005032:	e8 08 11 00 	rsub	r8,r4,0
80005036:	8f 68       	st.w	r7[0x18],r8
80005038:	48 a8       	lddpc	r8,80005060 <setvbuf+0xfc>
8000503a:	49 29       	lddpc	r9,80005080 <setvbuf+0x11c>
8000503c:	70 08       	ld.w	r8,r8[0x0]
8000503e:	8f 46       	st.w	r7[0x10],r6
80005040:	91 a9       	st.w	r8[0x28],r9
80005042:	8f 06       	st.w	r7[0x0],r6
80005044:	8f 54       	st.w	r7[0x14],r4
80005046:	8e 68       	ld.sh	r8,r7[0xc]
80005048:	10 9c       	mov	r12,r8
8000504a:	e2 1c 00 08 	andl	r12,0x8,COH
8000504e:	c0 70       	breq	8000505c <setvbuf+0xf8>
80005050:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80005054:	30 0c       	mov	r12,0
80005056:	f9 b4 01 00 	movne	r4,0
8000505a:	8f 24       	st.w	r7[0x8],r4
8000505c:	d8 32       	popm	r0-r7,pc
8000505e:	00 00       	add	r0,r0
80005060:	00 00       	add	r0,r0
80005062:	01 ec       	ld.ub	r12,r0[0x6]
80005064:	80 00       	ld.sh	r0,r0[0x0]
80005066:	54 90       	stdsp	sp[0x124],r0
80005068:	80 00       	ld.sh	r0,r0[0x0]
8000506a:	5f 18       	srne	r8
8000506c:	80 00       	ld.sh	r0,r0[0x0]
8000506e:	5f 38       	srlo	r8
80005070:	80 00       	ld.sh	r0,r0[0x0]
80005072:	5f 58       	srlt	r8
80005074:	80 00       	ld.sh	r0,r0[0x0]
80005076:	52 b4       	stdsp	sp[0xac],r4
80005078:	80 00       	ld.sh	r0,r0[0x0]
8000507a:	55 e8       	stdsp	sp[0x178],r8
8000507c:	80 00       	ld.sh	r0,r0[0x0]
8000507e:	4a a8       	lddpc	r8,80005124 <_sbrk+0x3c>
80005080:	80 00       	ld.sh	r0,r0[0x0]
80005082:	53 d0       	stdsp	sp[0xf4],r0

80005084 <strncpy>:
80005084:	30 08       	mov	r8,0
80005086:	10 3a       	cp.w	r10,r8
80005088:	5e 0c       	reteq	r12
8000508a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000508e:	f8 08 0b 09 	st.b	r12[r8],r9
80005092:	2f f8       	sub	r8,-1
80005094:	58 09       	cp.w	r9,0
80005096:	cf 81       	brne	80005086 <strncpy+0x2>
80005098:	10 3a       	cp.w	r10,r8
8000509a:	5e 0c       	reteq	r12
8000509c:	f8 08 0b 09 	st.b	r12[r8],r9
800050a0:	2f f8       	sub	r8,-1
800050a2:	cf bb       	rjmp	80005098 <strncpy+0x14>

800050a4 <_init_argv>:
800050a4:	30 e8       	mov	r8,14
800050a6:	d6 73       	breakpoint
800050a8:	3f fc       	mov	r12,-1
800050aa:	35 8b       	mov	r11,88
800050ac:	5e fc       	retal	r12

800050ae <_exit>:
800050ae:	30 d8       	mov	r8,13
800050b0:	d6 73       	breakpoint
800050b2:	3f fc       	mov	r12,-1
800050b4:	35 8b       	mov	r11,88
800050b6:	c0 08       	rjmp	800050b6 <_exit+0x8>

800050b8 <_close>:
800050b8:	30 28       	mov	r8,2
800050ba:	d6 73       	breakpoint
800050bc:	3f fc       	mov	r12,-1
800050be:	35 8b       	mov	r11,88
800050c0:	58 0c       	cp.w	r12,0
800050c2:	5e 4c       	retge	r12
800050c4:	48 2a       	lddpc	r10,800050cc <_close+0x14>
800050c6:	95 0b       	st.w	r10[0x0],r11
800050c8:	5e fc       	retal	r12
800050ca:	00 00       	add	r0,r0
800050cc:	00 00       	add	r0,r0
800050ce:	0a 2c       	rsub	r12,r5

800050d0 <_lseek>:
800050d0:	30 58       	mov	r8,5
800050d2:	d6 73       	breakpoint
800050d4:	3f fc       	mov	r12,-1
800050d6:	35 8b       	mov	r11,88
800050d8:	58 0c       	cp.w	r12,0
800050da:	5e 4c       	retge	r12
800050dc:	48 2a       	lddpc	r10,800050e4 <_lseek+0x14>
800050de:	95 0b       	st.w	r10[0x0],r11
800050e0:	5e fc       	retal	r12
800050e2:	00 00       	add	r0,r0
800050e4:	00 00       	add	r0,r0
800050e6:	0a 2c       	rsub	r12,r5

800050e8 <_sbrk>:
800050e8:	d4 01       	pushm	lr
800050ea:	48 c8       	lddpc	r8,80005118 <_sbrk+0x30>
800050ec:	70 09       	ld.w	r9,r8[0x0]
800050ee:	58 09       	cp.w	r9,0
800050f0:	c0 31       	brne	800050f6 <_sbrk+0xe>
800050f2:	48 b9       	lddpc	r9,8000511c <_sbrk+0x34>
800050f4:	91 09       	st.w	r8[0x0],r9
800050f6:	48 99       	lddpc	r9,80005118 <_sbrk+0x30>
800050f8:	48 aa       	lddpc	r10,80005120 <_sbrk+0x38>
800050fa:	72 08       	ld.w	r8,r9[0x0]
800050fc:	f0 0c 00 0c 	add	r12,r8,r12
80005100:	14 3c       	cp.w	r12,r10
80005102:	e0 8b 00 04 	brhi	8000510a <_sbrk+0x22>
80005106:	93 0c       	st.w	r9[0x0],r12
80005108:	c0 68       	rjmp	80005114 <_sbrk+0x2c>
8000510a:	f0 1f 00 07 	mcall	80005124 <_sbrk+0x3c>
8000510e:	30 c8       	mov	r8,12
80005110:	99 08       	st.w	r12[0x0],r8
80005112:	3f f8       	mov	r8,-1
80005114:	10 9c       	mov	r12,r8
80005116:	d8 02       	popm	pc
80005118:	00 00       	add	r0,r0
8000511a:	09 fc       	ld.ub	r12,r4[0x7]
8000511c:	00 00       	add	r0,r0
8000511e:	0a 30       	cp.w	r0,r5
80005120:	00 00       	add	r0,r0
80005122:	f0 00       	*unknown*
80005124:	80 00       	ld.sh	r0,r0[0x0]
80005126:	52 a8       	stdsp	sp[0xa8],r8

80005128 <__register_exitproc>:
80005128:	d4 31       	pushm	r0-r7,lr
8000512a:	4a 98       	lddpc	r8,800051cc <__register_exitproc+0xa4>
8000512c:	70 03       	ld.w	r3,r8[0x0]
8000512e:	67 24       	ld.w	r4,r3[0x48]
80005130:	e6 c8 ff b4 	sub	r8,r3,-76
80005134:	58 04       	cp.w	r4,0
80005136:	f0 04 17 00 	moveq	r4,r8
8000513a:	e7 f4 0a 12 	st.weq	r3[0x48],r4
8000513e:	18 97       	mov	r7,r12
80005140:	16 96       	mov	r6,r11
80005142:	14 95       	mov	r5,r10
80005144:	12 92       	mov	r2,r9
80005146:	68 18       	ld.w	r8,r4[0x4]
80005148:	59 f8       	cp.w	r8,31
8000514a:	e0 8a 00 0e 	brle	80005166 <__register_exitproc+0x3e>
8000514e:	e0 6c 00 8c 	mov	r12,140
80005152:	f0 1f 00 20 	mcall	800051d0 <__register_exitproc+0xa8>
80005156:	18 94       	mov	r4,r12
80005158:	c3 80       	breq	800051c8 <__register_exitproc+0xa0>
8000515a:	67 28       	ld.w	r8,r3[0x48]
8000515c:	99 08       	st.w	r12[0x0],r8
8000515e:	e7 4c 00 48 	st.w	r3[72],r12
80005162:	30 08       	mov	r8,0
80005164:	99 18       	st.w	r12[0x4],r8
80005166:	58 07       	cp.w	r7,0
80005168:	c2 70       	breq	800051b6 <__register_exitproc+0x8e>
8000516a:	e8 fc 00 88 	ld.w	r12,r4[136]
8000516e:	58 0c       	cp.w	r12,0
80005170:	c0 d1       	brne	8000518a <__register_exitproc+0x62>
80005172:	e0 6c 01 08 	mov	r12,264
80005176:	f0 1f 00 17 	mcall	800051d0 <__register_exitproc+0xa8>
8000517a:	c2 70       	breq	800051c8 <__register_exitproc+0xa0>
8000517c:	30 08       	mov	r8,0
8000517e:	e9 4c 00 88 	st.w	r4[136],r12
80005182:	f9 48 01 04 	st.w	r12[260],r8
80005186:	f9 48 01 00 	st.w	r12[256],r8
8000518a:	68 18       	ld.w	r8,r4[0x4]
8000518c:	f0 c9 ff e0 	sub	r9,r8,-32
80005190:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80005194:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80005198:	30 1a       	mov	r10,1
8000519a:	f8 f9 01 00 	ld.w	r9,r12[256]
8000519e:	f4 08 09 48 	lsl	r8,r10,r8
800051a2:	10 49       	or	r9,r8
800051a4:	f9 49 01 00 	st.w	r12[256],r9
800051a8:	58 27       	cp.w	r7,2
800051aa:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
800051ae:	f3 d8 e0 38 	oreq	r8,r9,r8
800051b2:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800051b6:	68 18       	ld.w	r8,r4[0x4]
800051b8:	30 0c       	mov	r12,0
800051ba:	f0 c9 ff ff 	sub	r9,r8,-1
800051be:	2f e8       	sub	r8,-2
800051c0:	89 19       	st.w	r4[0x4],r9
800051c2:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
800051c6:	d8 32       	popm	r0-r7,pc
800051c8:	dc 3a       	popm	r0-r7,pc,r12=-1
800051ca:	00 00       	add	r0,r0
800051cc:	80 00       	ld.sh	r0,r0[0x0]
800051ce:	5f 14       	srne	r4
800051d0:	80 00       	ld.sh	r0,r0[0x0]
800051d2:	4a a8       	lddpc	r8,80005278 <__call_exitprocs+0xa4>

800051d4 <__call_exitprocs>:
800051d4:	d4 31       	pushm	r0-r7,lr
800051d6:	20 3d       	sub	sp,12
800051d8:	4b 28       	lddpc	r8,800052a0 <__call_exitprocs+0xcc>
800051da:	50 2c       	stdsp	sp[0x8],r12
800051dc:	70 08       	ld.w	r8,r8[0x0]
800051de:	16 91       	mov	r1,r11
800051e0:	50 08       	stdsp	sp[0x0],r8
800051e2:	2b 88       	sub	r8,-72
800051e4:	50 18       	stdsp	sp[0x4],r8
800051e6:	40 0a       	lddsp	r10,sp[0x0]
800051e8:	40 14       	lddsp	r4,sp[0x4]
800051ea:	75 27       	ld.w	r7,r10[0x48]
800051ec:	c5 58       	rjmp	80005296 <__call_exitprocs+0xc2>
800051ee:	6e 15       	ld.w	r5,r7[0x4]
800051f0:	ee f6 00 88 	ld.w	r6,r7[136]
800051f4:	ea c2 ff ff 	sub	r2,r5,-1
800051f8:	20 15       	sub	r5,1
800051fa:	ee 02 00 22 	add	r2,r7,r2<<0x2
800051fe:	ec 05 00 23 	add	r3,r6,r5<<0x2
80005202:	c3 58       	rjmp	8000526c <__call_exitprocs+0x98>
80005204:	58 01       	cp.w	r1,0
80005206:	c0 70       	breq	80005214 <__call_exitprocs+0x40>
80005208:	58 06       	cp.w	r6,0
8000520a:	c2 e0       	breq	80005266 <__call_exitprocs+0x92>
8000520c:	e6 f8 00 80 	ld.w	r8,r3[128]
80005210:	02 38       	cp.w	r8,r1
80005212:	c2 a1       	brne	80005266 <__call_exitprocs+0x92>
80005214:	6e 19       	ld.w	r9,r7[0x4]
80005216:	64 08       	ld.w	r8,r2[0x0]
80005218:	20 19       	sub	r9,1
8000521a:	12 35       	cp.w	r5,r9
8000521c:	ef f5 0a 01 	st.weq	r7[0x4],r5
80005220:	f9 b9 01 00 	movne	r9,0
80005224:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80005228:	58 08       	cp.w	r8,0
8000522a:	c1 e0       	breq	80005266 <__call_exitprocs+0x92>
8000522c:	6e 10       	ld.w	r0,r7[0x4]
8000522e:	58 06       	cp.w	r6,0
80005230:	c0 90       	breq	80005242 <__call_exitprocs+0x6e>
80005232:	30 1a       	mov	r10,1
80005234:	f4 05 09 49 	lsl	r9,r10,r5
80005238:	ec fa 01 00 	ld.w	r10,r6[256]
8000523c:	f3 ea 00 0a 	and	r10,r9,r10
80005240:	c0 31       	brne	80005246 <__call_exitprocs+0x72>
80005242:	5d 18       	icall	r8
80005244:	c0 b8       	rjmp	8000525a <__call_exitprocs+0x86>
80005246:	ec fa 01 04 	ld.w	r10,r6[260]
8000524a:	66 0b       	ld.w	r11,r3[0x0]
8000524c:	14 69       	and	r9,r10
8000524e:	c0 41       	brne	80005256 <__call_exitprocs+0x82>
80005250:	40 2c       	lddsp	r12,sp[0x8]
80005252:	5d 18       	icall	r8
80005254:	c0 38       	rjmp	8000525a <__call_exitprocs+0x86>
80005256:	16 9c       	mov	r12,r11
80005258:	5d 18       	icall	r8
8000525a:	6e 18       	ld.w	r8,r7[0x4]
8000525c:	10 30       	cp.w	r0,r8
8000525e:	cc 41       	brne	800051e6 <__call_exitprocs+0x12>
80005260:	68 08       	ld.w	r8,r4[0x0]
80005262:	0e 38       	cp.w	r8,r7
80005264:	cc 11       	brne	800051e6 <__call_exitprocs+0x12>
80005266:	20 15       	sub	r5,1
80005268:	20 43       	sub	r3,4
8000526a:	20 42       	sub	r2,4
8000526c:	58 05       	cp.w	r5,0
8000526e:	cc b4       	brge	80005204 <__call_exitprocs+0x30>
80005270:	6e 18       	ld.w	r8,r7[0x4]
80005272:	58 08       	cp.w	r8,0
80005274:	c0 f1       	brne	80005292 <__call_exitprocs+0xbe>
80005276:	6e 08       	ld.w	r8,r7[0x0]
80005278:	58 08       	cp.w	r8,0
8000527a:	c0 c0       	breq	80005292 <__call_exitprocs+0xbe>
8000527c:	89 08       	st.w	r4[0x0],r8
8000527e:	58 06       	cp.w	r6,0
80005280:	c0 40       	breq	80005288 <__call_exitprocs+0xb4>
80005282:	0c 9c       	mov	r12,r6
80005284:	f0 1f 00 08 	mcall	800052a4 <__call_exitprocs+0xd0>
80005288:	0e 9c       	mov	r12,r7
8000528a:	f0 1f 00 07 	mcall	800052a4 <__call_exitprocs+0xd0>
8000528e:	68 07       	ld.w	r7,r4[0x0]
80005290:	c0 38       	rjmp	80005296 <__call_exitprocs+0xc2>
80005292:	0e 94       	mov	r4,r7
80005294:	6e 07       	ld.w	r7,r7[0x0]
80005296:	58 07       	cp.w	r7,0
80005298:	ca b1       	brne	800051ee <__call_exitprocs+0x1a>
8000529a:	2f dd       	sub	sp,-12
8000529c:	d8 32       	popm	r0-r7,pc
8000529e:	00 00       	add	r0,r0
800052a0:	80 00       	ld.sh	r0,r0[0x0]
800052a2:	5f 14       	srne	r4
800052a4:	80 00       	ld.sh	r0,r0[0x0]
800052a6:	4a 90       	lddpc	r0,80005348 <_fflush_r+0x94>

800052a8 <__errno>:
800052a8:	48 28       	lddpc	r8,800052b0 <__errno+0x8>
800052aa:	70 0c       	ld.w	r12,r8[0x0]
800052ac:	2f 4c       	sub	r12,-12
800052ae:	5e fc       	retal	r12
800052b0:	00 00       	add	r0,r0
800052b2:	01 ec       	ld.ub	r12,r0[0x6]

800052b4 <_fflush_r>:
800052b4:	d4 21       	pushm	r4-r7,lr
800052b6:	16 97       	mov	r7,r11
800052b8:	18 96       	mov	r6,r12
800052ba:	76 48       	ld.w	r8,r11[0x10]
800052bc:	58 08       	cp.w	r8,0
800052be:	c7 d0       	breq	800053b8 <_fflush_r+0x104>
800052c0:	58 0c       	cp.w	r12,0
800052c2:	c0 60       	breq	800052ce <_fflush_r+0x1a>
800052c4:	78 68       	ld.w	r8,r12[0x18]
800052c6:	58 08       	cp.w	r8,0
800052c8:	c0 31       	brne	800052ce <_fflush_r+0x1a>
800052ca:	f0 1f 00 3d 	mcall	800053bc <_fflush_r+0x108>
800052ce:	4b d8       	lddpc	r8,800053c0 <_fflush_r+0x10c>
800052d0:	10 37       	cp.w	r7,r8
800052d2:	c0 31       	brne	800052d8 <_fflush_r+0x24>
800052d4:	6c 07       	ld.w	r7,r6[0x0]
800052d6:	c0 a8       	rjmp	800052ea <_fflush_r+0x36>
800052d8:	4b b8       	lddpc	r8,800053c4 <_fflush_r+0x110>
800052da:	10 37       	cp.w	r7,r8
800052dc:	c0 31       	brne	800052e2 <_fflush_r+0x2e>
800052de:	6c 17       	ld.w	r7,r6[0x4]
800052e0:	c0 58       	rjmp	800052ea <_fflush_r+0x36>
800052e2:	4b a8       	lddpc	r8,800053c8 <_fflush_r+0x114>
800052e4:	10 37       	cp.w	r7,r8
800052e6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800052ea:	8e 6a       	ld.sh	r10,r7[0xc]
800052ec:	14 98       	mov	r8,r10
800052ee:	ed ba 00 03 	bld	r10,0x3
800052f2:	c4 20       	breq	80005376 <_fflush_r+0xc2>
800052f4:	ab ba       	sbr	r10,0xb
800052f6:	ae 6a       	st.h	r7[0xc],r10
800052f8:	6e 18       	ld.w	r8,r7[0x4]
800052fa:	58 08       	cp.w	r8,0
800052fc:	e0 89 00 06 	brgt	80005308 <_fflush_r+0x54>
80005300:	6f 08       	ld.w	r8,r7[0x40]
80005302:	58 08       	cp.w	r8,0
80005304:	e0 8a 00 5a 	brle	800053b8 <_fflush_r+0x104>
80005308:	6e b8       	ld.w	r8,r7[0x2c]
8000530a:	58 08       	cp.w	r8,0
8000530c:	c5 60       	breq	800053b8 <_fflush_r+0x104>
8000530e:	e2 1a 10 00 	andl	r10,0x1000,COH
80005312:	c0 30       	breq	80005318 <_fflush_r+0x64>
80005314:	6f 55       	ld.w	r5,r7[0x54]
80005316:	c0 f8       	rjmp	80005334 <_fflush_r+0x80>
80005318:	30 19       	mov	r9,1
8000531a:	6e 8b       	ld.w	r11,r7[0x20]
8000531c:	0c 9c       	mov	r12,r6
8000531e:	5d 18       	icall	r8
80005320:	18 95       	mov	r5,r12
80005322:	5b fc       	cp.w	r12,-1
80005324:	c0 81       	brne	80005334 <_fflush_r+0x80>
80005326:	6c 38       	ld.w	r8,r6[0xc]
80005328:	59 d8       	cp.w	r8,29
8000532a:	c4 70       	breq	800053b8 <_fflush_r+0x104>
8000532c:	8e 68       	ld.sh	r8,r7[0xc]
8000532e:	a7 a8       	sbr	r8,0x6
80005330:	ae 68       	st.h	r7[0xc],r8
80005332:	d8 22       	popm	r4-r7,pc
80005334:	8e 68       	ld.sh	r8,r7[0xc]
80005336:	ed b8 00 02 	bld	r8,0x2
8000533a:	c0 91       	brne	8000534c <_fflush_r+0x98>
8000533c:	6e 18       	ld.w	r8,r7[0x4]
8000533e:	10 15       	sub	r5,r8
80005340:	6e d8       	ld.w	r8,r7[0x34]
80005342:	58 08       	cp.w	r8,0
80005344:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80005348:	eb d8 e1 15 	subne	r5,r5,r8
8000534c:	6e b8       	ld.w	r8,r7[0x2c]
8000534e:	0c 9c       	mov	r12,r6
80005350:	30 09       	mov	r9,0
80005352:	0a 9a       	mov	r10,r5
80005354:	6e 8b       	ld.w	r11,r7[0x20]
80005356:	5d 18       	icall	r8
80005358:	8e 68       	ld.sh	r8,r7[0xc]
8000535a:	0a 3c       	cp.w	r12,r5
8000535c:	c2 61       	brne	800053a8 <_fflush_r+0xf4>
8000535e:	ab d8       	cbr	r8,0xb
80005360:	30 0c       	mov	r12,0
80005362:	6e 49       	ld.w	r9,r7[0x10]
80005364:	ae 68       	st.h	r7[0xc],r8
80005366:	8f 1c       	st.w	r7[0x4],r12
80005368:	8f 09       	st.w	r7[0x0],r9
8000536a:	ed b8 00 0c 	bld	r8,0xc
8000536e:	c2 51       	brne	800053b8 <_fflush_r+0x104>
80005370:	ef 45 00 54 	st.w	r7[84],r5
80005374:	d8 22       	popm	r4-r7,pc
80005376:	6e 45       	ld.w	r5,r7[0x10]
80005378:	58 05       	cp.w	r5,0
8000537a:	c1 f0       	breq	800053b8 <_fflush_r+0x104>
8000537c:	6e 04       	ld.w	r4,r7[0x0]
8000537e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80005382:	8f 05       	st.w	r7[0x0],r5
80005384:	f9 b8 01 00 	movne	r8,0
80005388:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000538c:	0a 14       	sub	r4,r5
8000538e:	8f 28       	st.w	r7[0x8],r8
80005390:	c1 18       	rjmp	800053b2 <_fflush_r+0xfe>
80005392:	08 99       	mov	r9,r4
80005394:	0a 9a       	mov	r10,r5
80005396:	6e a8       	ld.w	r8,r7[0x28]
80005398:	6e 8b       	ld.w	r11,r7[0x20]
8000539a:	0c 9c       	mov	r12,r6
8000539c:	5d 18       	icall	r8
8000539e:	18 14       	sub	r4,r12
800053a0:	58 0c       	cp.w	r12,0
800053a2:	e0 89 00 07 	brgt	800053b0 <_fflush_r+0xfc>
800053a6:	8e 68       	ld.sh	r8,r7[0xc]
800053a8:	a7 a8       	sbr	r8,0x6
800053aa:	3f fc       	mov	r12,-1
800053ac:	ae 68       	st.h	r7[0xc],r8
800053ae:	d8 22       	popm	r4-r7,pc
800053b0:	18 05       	add	r5,r12
800053b2:	58 04       	cp.w	r4,0
800053b4:	fe 99 ff ef 	brgt	80005392 <_fflush_r+0xde>
800053b8:	d8 2a       	popm	r4-r7,pc,r12=0
800053ba:	00 00       	add	r0,r0
800053bc:	80 00       	ld.sh	r0,r0[0x0]
800053be:	54 90       	stdsp	sp[0x124],r0
800053c0:	80 00       	ld.sh	r0,r0[0x0]
800053c2:	5f 18       	srne	r8
800053c4:	80 00       	ld.sh	r0,r0[0x0]
800053c6:	5f 38       	srlo	r8
800053c8:	80 00       	ld.sh	r0,r0[0x0]
800053ca:	5f 58       	srlt	r8

800053cc <__sfp_lock_acquire>:
800053cc:	5e fc       	retal	r12

800053ce <__sfp_lock_release>:
800053ce:	5e fc       	retal	r12

800053d0 <_cleanup_r>:
800053d0:	d4 01       	pushm	lr
800053d2:	48 3b       	lddpc	r11,800053dc <_cleanup_r+0xc>
800053d4:	f0 1f 00 03 	mcall	800053e0 <_cleanup_r+0x10>
800053d8:	d8 02       	popm	pc
800053da:	00 00       	add	r0,r0
800053dc:	80 00       	ld.sh	r0,r0[0x0]
800053de:	59 94       	cp.w	r4,25
800053e0:	80 00       	ld.sh	r0,r0[0x0]
800053e2:	57 88       	stdsp	sp[0x1e0],r8

800053e4 <__sfmoreglue>:
800053e4:	d4 21       	pushm	r4-r7,lr
800053e6:	16 95       	mov	r5,r11
800053e8:	f6 06 10 5c 	mul	r6,r11,92
800053ec:	ec cb ff f4 	sub	r11,r6,-12
800053f0:	f0 1f 00 07 	mcall	8000540c <__sfmoreglue+0x28>
800053f4:	18 97       	mov	r7,r12
800053f6:	c0 90       	breq	80005408 <__sfmoreglue+0x24>
800053f8:	99 15       	st.w	r12[0x4],r5
800053fa:	30 0b       	mov	r11,0
800053fc:	2f 4c       	sub	r12,-12
800053fe:	0c 9a       	mov	r10,r6
80005400:	8f 2c       	st.w	r7[0x8],r12
80005402:	8f 0b       	st.w	r7[0x0],r11
80005404:	f0 1f 00 03 	mcall	80005410 <__sfmoreglue+0x2c>
80005408:	0e 9c       	mov	r12,r7
8000540a:	d8 22       	popm	r4-r7,pc
8000540c:	80 00       	ld.sh	r0,r0[0x0]
8000540e:	4a c0       	lddpc	r0,800054bc <__sinit+0x2c>
80005410:	80 00       	ld.sh	r0,r0[0x0]
80005412:	4f 10       	lddpc	r0,800055d4 <_malloc_trim_r+0x94>

80005414 <__sfp>:
80005414:	d4 21       	pushm	r4-r7,lr
80005416:	49 c8       	lddpc	r8,80005484 <__sfp+0x70>
80005418:	18 96       	mov	r6,r12
8000541a:	70 07       	ld.w	r7,r8[0x0]
8000541c:	6e 68       	ld.w	r8,r7[0x18]
8000541e:	58 08       	cp.w	r8,0
80005420:	c0 41       	brne	80005428 <__sfp+0x14>
80005422:	0e 9c       	mov	r12,r7
80005424:	f0 1f 00 19 	mcall	80005488 <__sfp+0x74>
80005428:	ee c7 ff 28 	sub	r7,r7,-216
8000542c:	30 05       	mov	r5,0
8000542e:	6e 2c       	ld.w	r12,r7[0x8]
80005430:	6e 18       	ld.w	r8,r7[0x4]
80005432:	c0 68       	rjmp	8000543e <__sfp+0x2a>
80005434:	98 69       	ld.sh	r9,r12[0xc]
80005436:	ea 09 19 00 	cp.h	r9,r5
8000543a:	c1 20       	breq	8000545e <__sfp+0x4a>
8000543c:	2a 4c       	sub	r12,-92
8000543e:	20 18       	sub	r8,1
80005440:	cf a7       	brpl	80005434 <__sfp+0x20>
80005442:	6e 08       	ld.w	r8,r7[0x0]
80005444:	58 08       	cp.w	r8,0
80005446:	c0 71       	brne	80005454 <__sfp+0x40>
80005448:	30 4b       	mov	r11,4
8000544a:	0c 9c       	mov	r12,r6
8000544c:	f0 1f 00 10 	mcall	8000548c <__sfp+0x78>
80005450:	8f 0c       	st.w	r7[0x0],r12
80005452:	c0 30       	breq	80005458 <__sfp+0x44>
80005454:	6e 07       	ld.w	r7,r7[0x0]
80005456:	ce cb       	rjmp	8000542e <__sfp+0x1a>
80005458:	30 c8       	mov	r8,12
8000545a:	8d 38       	st.w	r6[0xc],r8
8000545c:	d8 22       	popm	r4-r7,pc
8000545e:	30 08       	mov	r8,0
80005460:	f9 48 00 4c 	st.w	r12[76],r8
80005464:	99 08       	st.w	r12[0x0],r8
80005466:	99 28       	st.w	r12[0x8],r8
80005468:	99 18       	st.w	r12[0x4],r8
8000546a:	99 48       	st.w	r12[0x10],r8
8000546c:	99 58       	st.w	r12[0x14],r8
8000546e:	99 68       	st.w	r12[0x18],r8
80005470:	99 d8       	st.w	r12[0x34],r8
80005472:	99 e8       	st.w	r12[0x38],r8
80005474:	f9 48 00 48 	st.w	r12[72],r8
80005478:	3f f8       	mov	r8,-1
8000547a:	b8 78       	st.h	r12[0xe],r8
8000547c:	30 18       	mov	r8,1
8000547e:	b8 68       	st.h	r12[0xc],r8
80005480:	d8 22       	popm	r4-r7,pc
80005482:	00 00       	add	r0,r0
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	5f 14       	srne	r4
80005488:	80 00       	ld.sh	r0,r0[0x0]
8000548a:	54 90       	stdsp	sp[0x124],r0
8000548c:	80 00       	ld.sh	r0,r0[0x0]
8000548e:	53 e4       	stdsp	sp[0xf8],r4

80005490 <__sinit>:
80005490:	d4 21       	pushm	r4-r7,lr
80005492:	18 96       	mov	r6,r12
80005494:	78 67       	ld.w	r7,r12[0x18]
80005496:	58 07       	cp.w	r7,0
80005498:	c4 71       	brne	80005526 <__sinit+0x96>
8000549a:	4a 48       	lddpc	r8,80005528 <__sinit+0x98>
8000549c:	30 15       	mov	r5,1
8000549e:	99 a8       	st.w	r12[0x28],r8
800054a0:	f9 47 00 d8 	st.w	r12[216],r7
800054a4:	f9 47 00 dc 	st.w	r12[220],r7
800054a8:	f9 47 00 e0 	st.w	r12[224],r7
800054ac:	99 65       	st.w	r12[0x18],r5
800054ae:	f0 1f 00 20 	mcall	8000552c <__sinit+0x9c>
800054b2:	8d 0c       	st.w	r6[0x0],r12
800054b4:	0c 9c       	mov	r12,r6
800054b6:	f0 1f 00 1e 	mcall	8000552c <__sinit+0x9c>
800054ba:	8d 1c       	st.w	r6[0x4],r12
800054bc:	0c 9c       	mov	r12,r6
800054be:	f0 1f 00 1c 	mcall	8000552c <__sinit+0x9c>
800054c2:	6c 09       	ld.w	r9,r6[0x0]
800054c4:	30 48       	mov	r8,4
800054c6:	93 07       	st.w	r9[0x0],r7
800054c8:	b2 68       	st.h	r9[0xc],r8
800054ca:	93 17       	st.w	r9[0x4],r7
800054cc:	93 27       	st.w	r9[0x8],r7
800054ce:	6c 18       	ld.w	r8,r6[0x4]
800054d0:	b2 77       	st.h	r9[0xe],r7
800054d2:	93 47       	st.w	r9[0x10],r7
800054d4:	93 57       	st.w	r9[0x14],r7
800054d6:	93 67       	st.w	r9[0x18],r7
800054d8:	93 89       	st.w	r9[0x20],r9
800054da:	91 07       	st.w	r8[0x0],r7
800054dc:	91 17       	st.w	r8[0x4],r7
800054de:	91 27       	st.w	r8[0x8],r7
800054e0:	49 4e       	lddpc	lr,80005530 <__sinit+0xa0>
800054e2:	49 5b       	lddpc	r11,80005534 <__sinit+0xa4>
800054e4:	93 9e       	st.w	r9[0x24],lr
800054e6:	93 ab       	st.w	r9[0x28],r11
800054e8:	49 4a       	lddpc	r10,80005538 <__sinit+0xa8>
800054ea:	49 54       	lddpc	r4,8000553c <__sinit+0xac>
800054ec:	93 ba       	st.w	r9[0x2c],r10
800054ee:	93 c4       	st.w	r9[0x30],r4
800054f0:	30 99       	mov	r9,9
800054f2:	b0 69       	st.h	r8[0xc],r9
800054f4:	b0 75       	st.h	r8[0xe],r5
800054f6:	91 c4       	st.w	r8[0x30],r4
800054f8:	91 47       	st.w	r8[0x10],r7
800054fa:	91 57       	st.w	r8[0x14],r7
800054fc:	91 67       	st.w	r8[0x18],r7
800054fe:	91 88       	st.w	r8[0x20],r8
80005500:	91 9e       	st.w	r8[0x24],lr
80005502:	91 ab       	st.w	r8[0x28],r11
80005504:	91 ba       	st.w	r8[0x2c],r10
80005506:	8d 2c       	st.w	r6[0x8],r12
80005508:	31 28       	mov	r8,18
8000550a:	99 07       	st.w	r12[0x0],r7
8000550c:	b8 68       	st.h	r12[0xc],r8
8000550e:	99 17       	st.w	r12[0x4],r7
80005510:	99 27       	st.w	r12[0x8],r7
80005512:	30 28       	mov	r8,2
80005514:	b8 78       	st.h	r12[0xe],r8
80005516:	99 c4       	st.w	r12[0x30],r4
80005518:	99 67       	st.w	r12[0x18],r7
8000551a:	99 9e       	st.w	r12[0x24],lr
8000551c:	99 ab       	st.w	r12[0x28],r11
8000551e:	99 ba       	st.w	r12[0x2c],r10
80005520:	99 47       	st.w	r12[0x10],r7
80005522:	99 57       	st.w	r12[0x14],r7
80005524:	99 8c       	st.w	r12[0x20],r12
80005526:	d8 22       	popm	r4-r7,pc
80005528:	80 00       	ld.sh	r0,r0[0x0]
8000552a:	53 d0       	stdsp	sp[0xf4],r0
8000552c:	80 00       	ld.sh	r0,r0[0x0]
8000552e:	54 14       	stdsp	sp[0x104],r4
80005530:	80 00       	ld.sh	r0,r0[0x0]
80005532:	58 4c       	cp.w	r12,4
80005534:	80 00       	ld.sh	r0,r0[0x0]
80005536:	58 14       	cp.w	r4,1
80005538:	80 00       	ld.sh	r0,r0[0x0]
8000553a:	57 ec       	stdsp	sp[0x1f8],r12
8000553c:	80 00       	ld.sh	r0,r0[0x0]
8000553e:	57 dc       	stdsp	sp[0x1f4],r12

80005540 <_malloc_trim_r>:
80005540:	d4 21       	pushm	r4-r7,lr
80005542:	16 95       	mov	r5,r11
80005544:	18 97       	mov	r7,r12
80005546:	f0 1f 00 23 	mcall	800055d0 <_malloc_trim_r+0x90>
8000554a:	4a 34       	lddpc	r4,800055d4 <_malloc_trim_r+0x94>
8000554c:	68 28       	ld.w	r8,r4[0x8]
8000554e:	70 16       	ld.w	r6,r8[0x4]
80005550:	e0 16 ff fc 	andl	r6,0xfffc
80005554:	ec c8 ff 91 	sub	r8,r6,-111
80005558:	f0 05 01 05 	sub	r5,r8,r5
8000555c:	e0 15 ff 80 	andl	r5,0xff80
80005560:	ea c5 00 80 	sub	r5,r5,128
80005564:	e0 45 00 7f 	cp.w	r5,127
80005568:	e0 8a 00 23 	brle	800055ae <_malloc_trim_r+0x6e>
8000556c:	30 0b       	mov	r11,0
8000556e:	0e 9c       	mov	r12,r7
80005570:	f0 1f 00 1a 	mcall	800055d8 <_malloc_trim_r+0x98>
80005574:	68 28       	ld.w	r8,r4[0x8]
80005576:	0c 08       	add	r8,r6
80005578:	10 3c       	cp.w	r12,r8
8000557a:	c1 a1       	brne	800055ae <_malloc_trim_r+0x6e>
8000557c:	ea 0b 11 00 	rsub	r11,r5,0
80005580:	0e 9c       	mov	r12,r7
80005582:	f0 1f 00 16 	mcall	800055d8 <_malloc_trim_r+0x98>
80005586:	5b fc       	cp.w	r12,-1
80005588:	c1 71       	brne	800055b6 <_malloc_trim_r+0x76>
8000558a:	30 0b       	mov	r11,0
8000558c:	0e 9c       	mov	r12,r7
8000558e:	f0 1f 00 13 	mcall	800055d8 <_malloc_trim_r+0x98>
80005592:	68 28       	ld.w	r8,r4[0x8]
80005594:	f8 08 01 09 	sub	r9,r12,r8
80005598:	58 f9       	cp.w	r9,15
8000559a:	e0 8a 00 0a 	brle	800055ae <_malloc_trim_r+0x6e>
8000559e:	a1 a9       	sbr	r9,0x0
800055a0:	91 19       	st.w	r8[0x4],r9
800055a2:	48 f8       	lddpc	r8,800055dc <_malloc_trim_r+0x9c>
800055a4:	70 09       	ld.w	r9,r8[0x0]
800055a6:	48 f8       	lddpc	r8,800055e0 <_malloc_trim_r+0xa0>
800055a8:	f8 09 01 09 	sub	r9,r12,r9
800055ac:	91 09       	st.w	r8[0x0],r9
800055ae:	0e 9c       	mov	r12,r7
800055b0:	f0 1f 00 0d 	mcall	800055e4 <_malloc_trim_r+0xa4>
800055b4:	d8 2a       	popm	r4-r7,pc,r12=0
800055b6:	68 28       	ld.w	r8,r4[0x8]
800055b8:	0a 16       	sub	r6,r5
800055ba:	a1 a6       	sbr	r6,0x0
800055bc:	91 16       	st.w	r8[0x4],r6
800055be:	48 98       	lddpc	r8,800055e0 <_malloc_trim_r+0xa0>
800055c0:	70 09       	ld.w	r9,r8[0x0]
800055c2:	0a 19       	sub	r9,r5
800055c4:	0e 9c       	mov	r12,r7
800055c6:	91 09       	st.w	r8[0x0],r9
800055c8:	f0 1f 00 07 	mcall	800055e4 <_malloc_trim_r+0xa4>
800055cc:	da 2a       	popm	r4-r7,pc,r12=1
800055ce:	00 00       	add	r0,r0
800055d0:	80 00       	ld.sh	r0,r0[0x0]
800055d2:	42 d8       	lddsp	r8,sp[0xb4]
800055d4:	00 00       	add	r0,r0
800055d6:	01 f0       	ld.ub	r0,r0[0x7]
800055d8:	80 00       	ld.sh	r0,r0[0x0]
800055da:	4f 20       	lddpc	r0,800057a0 <_fwalk+0x18>
800055dc:	00 00       	add	r0,r0
800055de:	05 fc       	ld.ub	r12,r2[0x7]
800055e0:	00 00       	add	r0,r0
800055e2:	09 d4       	ld.ub	r4,r4[0x5]
800055e4:	80 00       	ld.sh	r0,r0[0x0]
800055e6:	42 e4       	lddsp	r4,sp[0xb8]

800055e8 <_free_r>:
800055e8:	d4 21       	pushm	r4-r7,lr
800055ea:	16 96       	mov	r6,r11
800055ec:	18 97       	mov	r7,r12
800055ee:	58 0b       	cp.w	r11,0
800055f0:	e0 80 00 c8 	breq	80005780 <_free_r+0x198>
800055f4:	f0 1f 00 4c 	mcall	80005724 <_free_r+0x13c>
800055f8:	20 86       	sub	r6,8
800055fa:	4c ca       	lddpc	r10,80005728 <_free_r+0x140>
800055fc:	6c 18       	ld.w	r8,r6[0x4]
800055fe:	74 2e       	ld.w	lr,r10[0x8]
80005600:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80005604:	a1 c8       	cbr	r8,0x0
80005606:	ec 08 00 09 	add	r9,r6,r8
8000560a:	72 1b       	ld.w	r11,r9[0x4]
8000560c:	e0 1b ff fc 	andl	r11,0xfffc
80005610:	1c 39       	cp.w	r9,lr
80005612:	c1 d1       	brne	8000564c <_free_r+0x64>
80005614:	f6 08 00 08 	add	r8,r11,r8
80005618:	58 0c       	cp.w	r12,0
8000561a:	c0 81       	brne	8000562a <_free_r+0x42>
8000561c:	6c 09       	ld.w	r9,r6[0x0]
8000561e:	12 16       	sub	r6,r9
80005620:	12 08       	add	r8,r9
80005622:	6c 3b       	ld.w	r11,r6[0xc]
80005624:	6c 29       	ld.w	r9,r6[0x8]
80005626:	97 29       	st.w	r11[0x8],r9
80005628:	93 3b       	st.w	r9[0xc],r11
8000562a:	10 99       	mov	r9,r8
8000562c:	95 26       	st.w	r10[0x8],r6
8000562e:	a1 a9       	sbr	r9,0x0
80005630:	8d 19       	st.w	r6[0x4],r9
80005632:	4b f9       	lddpc	r9,8000572c <_free_r+0x144>
80005634:	72 09       	ld.w	r9,r9[0x0]
80005636:	12 38       	cp.w	r8,r9
80005638:	c0 63       	brcs	80005644 <_free_r+0x5c>
8000563a:	4b e8       	lddpc	r8,80005730 <_free_r+0x148>
8000563c:	0e 9c       	mov	r12,r7
8000563e:	70 0b       	ld.w	r11,r8[0x0]
80005640:	f0 1f 00 3d 	mcall	80005734 <_free_r+0x14c>
80005644:	0e 9c       	mov	r12,r7
80005646:	f0 1f 00 3d 	mcall	80005738 <_free_r+0x150>
8000564a:	d8 22       	popm	r4-r7,pc
8000564c:	93 1b       	st.w	r9[0x4],r11
8000564e:	58 0c       	cp.w	r12,0
80005650:	c0 30       	breq	80005656 <_free_r+0x6e>
80005652:	30 0c       	mov	r12,0
80005654:	c1 08       	rjmp	80005674 <_free_r+0x8c>
80005656:	6c 0e       	ld.w	lr,r6[0x0]
80005658:	f4 c5 ff f8 	sub	r5,r10,-8
8000565c:	1c 16       	sub	r6,lr
8000565e:	1c 08       	add	r8,lr
80005660:	6c 2e       	ld.w	lr,r6[0x8]
80005662:	0a 3e       	cp.w	lr,r5
80005664:	f9 bc 00 01 	moveq	r12,1
80005668:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000566c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80005670:	fd f5 1a 03 	st.wne	lr[0xc],r5
80005674:	f2 0b 00 0e 	add	lr,r9,r11
80005678:	7c 1e       	ld.w	lr,lr[0x4]
8000567a:	ed be 00 00 	bld	lr,0x0
8000567e:	c1 30       	breq	800056a4 <_free_r+0xbc>
80005680:	16 08       	add	r8,r11
80005682:	58 0c       	cp.w	r12,0
80005684:	c0 c1       	brne	8000569c <_free_r+0xb4>
80005686:	4a 9e       	lddpc	lr,80005728 <_free_r+0x140>
80005688:	72 2b       	ld.w	r11,r9[0x8]
8000568a:	2f 8e       	sub	lr,-8
8000568c:	1c 3b       	cp.w	r11,lr
8000568e:	c0 71       	brne	8000569c <_free_r+0xb4>
80005690:	97 36       	st.w	r11[0xc],r6
80005692:	97 26       	st.w	r11[0x8],r6
80005694:	8d 2b       	st.w	r6[0x8],r11
80005696:	8d 3b       	st.w	r6[0xc],r11
80005698:	30 1c       	mov	r12,1
8000569a:	c0 58       	rjmp	800056a4 <_free_r+0xbc>
8000569c:	72 2b       	ld.w	r11,r9[0x8]
8000569e:	72 39       	ld.w	r9,r9[0xc]
800056a0:	93 2b       	st.w	r9[0x8],r11
800056a2:	97 39       	st.w	r11[0xc],r9
800056a4:	10 99       	mov	r9,r8
800056a6:	ec 08 09 08 	st.w	r6[r8],r8
800056aa:	a1 a9       	sbr	r9,0x0
800056ac:	8d 19       	st.w	r6[0x4],r9
800056ae:	58 0c       	cp.w	r12,0
800056b0:	c6 51       	brne	8000577a <_free_r+0x192>
800056b2:	e0 48 01 ff 	cp.w	r8,511
800056b6:	e0 8b 00 13 	brhi	800056dc <_free_r+0xf4>
800056ba:	a3 98       	lsr	r8,0x3
800056bc:	f4 08 00 39 	add	r9,r10,r8<<0x3
800056c0:	72 2b       	ld.w	r11,r9[0x8]
800056c2:	8d 39       	st.w	r6[0xc],r9
800056c4:	8d 2b       	st.w	r6[0x8],r11
800056c6:	97 36       	st.w	r11[0xc],r6
800056c8:	93 26       	st.w	r9[0x8],r6
800056ca:	a3 48       	asr	r8,0x2
800056cc:	74 19       	ld.w	r9,r10[0x4]
800056ce:	30 1b       	mov	r11,1
800056d0:	f6 08 09 48 	lsl	r8,r11,r8
800056d4:	f3 e8 10 08 	or	r8,r9,r8
800056d8:	95 18       	st.w	r10[0x4],r8
800056da:	c5 08       	rjmp	8000577a <_free_r+0x192>
800056dc:	f0 0b 16 09 	lsr	r11,r8,0x9
800056e0:	58 4b       	cp.w	r11,4
800056e2:	e0 8b 00 06 	brhi	800056ee <_free_r+0x106>
800056e6:	f0 0b 16 06 	lsr	r11,r8,0x6
800056ea:	2c 8b       	sub	r11,-56
800056ec:	c2 b8       	rjmp	80005742 <_free_r+0x15a>
800056ee:	59 4b       	cp.w	r11,20
800056f0:	e0 8b 00 04 	brhi	800056f8 <_free_r+0x110>
800056f4:	2a 5b       	sub	r11,-91
800056f6:	c2 68       	rjmp	80005742 <_free_r+0x15a>
800056f8:	e0 4b 00 54 	cp.w	r11,84
800056fc:	e0 8b 00 06 	brhi	80005708 <_free_r+0x120>
80005700:	f0 0b 16 0c 	lsr	r11,r8,0xc
80005704:	29 2b       	sub	r11,-110
80005706:	c1 e8       	rjmp	80005742 <_free_r+0x15a>
80005708:	e0 4b 01 54 	cp.w	r11,340
8000570c:	e0 8b 00 06 	brhi	80005718 <_free_r+0x130>
80005710:	f0 0b 16 0f 	lsr	r11,r8,0xf
80005714:	28 9b       	sub	r11,-119
80005716:	c1 68       	rjmp	80005742 <_free_r+0x15a>
80005718:	e0 4b 05 54 	cp.w	r11,1364
8000571c:	e0 88 00 10 	brls	8000573c <_free_r+0x154>
80005720:	37 eb       	mov	r11,126
80005722:	c1 08       	rjmp	80005742 <_free_r+0x15a>
80005724:	80 00       	ld.sh	r0,r0[0x0]
80005726:	42 d8       	lddsp	r8,sp[0xb4]
80005728:	00 00       	add	r0,r0
8000572a:	01 f0       	ld.ub	r0,r0[0x7]
8000572c:	00 00       	add	r0,r0
8000572e:	05 f8       	ld.ub	r8,r2[0x7]
80005730:	00 00       	add	r0,r0
80005732:	09 d0       	ld.ub	r0,r4[0x5]
80005734:	80 00       	ld.sh	r0,r0[0x0]
80005736:	55 40       	stdsp	sp[0x150],r0
80005738:	80 00       	ld.sh	r0,r0[0x0]
8000573a:	42 e4       	lddsp	r4,sp[0xb8]
8000573c:	f0 0b 16 12 	lsr	r11,r8,0x12
80005740:	28 4b       	sub	r11,-124
80005742:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80005746:	78 29       	ld.w	r9,r12[0x8]
80005748:	18 39       	cp.w	r9,r12
8000574a:	c0 e1       	brne	80005766 <_free_r+0x17e>
8000574c:	74 18       	ld.w	r8,r10[0x4]
8000574e:	a3 4b       	asr	r11,0x2
80005750:	30 1c       	mov	r12,1
80005752:	f8 0b 09 4b 	lsl	r11,r12,r11
80005756:	f1 eb 10 0b 	or	r11,r8,r11
8000575a:	12 98       	mov	r8,r9
8000575c:	95 1b       	st.w	r10[0x4],r11
8000575e:	c0 a8       	rjmp	80005772 <_free_r+0x18a>
80005760:	72 29       	ld.w	r9,r9[0x8]
80005762:	18 39       	cp.w	r9,r12
80005764:	c0 60       	breq	80005770 <_free_r+0x188>
80005766:	72 1a       	ld.w	r10,r9[0x4]
80005768:	e0 1a ff fc 	andl	r10,0xfffc
8000576c:	14 38       	cp.w	r8,r10
8000576e:	cf 93       	brcs	80005760 <_free_r+0x178>
80005770:	72 38       	ld.w	r8,r9[0xc]
80005772:	8d 38       	st.w	r6[0xc],r8
80005774:	8d 29       	st.w	r6[0x8],r9
80005776:	93 36       	st.w	r9[0xc],r6
80005778:	91 26       	st.w	r8[0x8],r6
8000577a:	0e 9c       	mov	r12,r7
8000577c:	f0 1f 00 02 	mcall	80005784 <_free_r+0x19c>
80005780:	d8 22       	popm	r4-r7,pc
80005782:	00 00       	add	r0,r0
80005784:	80 00       	ld.sh	r0,r0[0x0]
80005786:	42 e4       	lddsp	r4,sp[0xb8]

80005788 <_fwalk>:
80005788:	d4 31       	pushm	r0-r7,lr
8000578a:	30 05       	mov	r5,0
8000578c:	16 91       	mov	r1,r11
8000578e:	f8 c7 ff 28 	sub	r7,r12,-216
80005792:	0a 92       	mov	r2,r5
80005794:	f0 1f 00 10 	mcall	800057d4 <_fwalk+0x4c>
80005798:	3f f3       	mov	r3,-1
8000579a:	c1 68       	rjmp	800057c6 <_fwalk+0x3e>
8000579c:	6e 26       	ld.w	r6,r7[0x8]
8000579e:	6e 14       	ld.w	r4,r7[0x4]
800057a0:	2f 46       	sub	r6,-12
800057a2:	c0 c8       	rjmp	800057ba <_fwalk+0x32>
800057a4:	8c 08       	ld.sh	r8,r6[0x0]
800057a6:	e4 08 19 00 	cp.h	r8,r2
800057aa:	c0 70       	breq	800057b8 <_fwalk+0x30>
800057ac:	8c 18       	ld.sh	r8,r6[0x2]
800057ae:	e6 08 19 00 	cp.h	r8,r3
800057b2:	c0 30       	breq	800057b8 <_fwalk+0x30>
800057b4:	5d 11       	icall	r1
800057b6:	18 45       	or	r5,r12
800057b8:	2a 46       	sub	r6,-92
800057ba:	20 14       	sub	r4,1
800057bc:	ec cc 00 0c 	sub	r12,r6,12
800057c0:	58 04       	cp.w	r4,0
800057c2:	cf 14       	brge	800057a4 <_fwalk+0x1c>
800057c4:	6e 07       	ld.w	r7,r7[0x0]
800057c6:	58 07       	cp.w	r7,0
800057c8:	ce a1       	brne	8000579c <_fwalk+0x14>
800057ca:	f0 1f 00 04 	mcall	800057d8 <_fwalk+0x50>
800057ce:	0a 9c       	mov	r12,r5
800057d0:	d8 32       	popm	r0-r7,pc
800057d2:	00 00       	add	r0,r0
800057d4:	80 00       	ld.sh	r0,r0[0x0]
800057d6:	53 cc       	stdsp	sp[0xf0],r12
800057d8:	80 00       	ld.sh	r0,r0[0x0]
800057da:	53 ce       	stdsp	sp[0xf0],lr

800057dc <__sclose>:
800057dc:	d4 01       	pushm	lr
800057de:	96 7b       	ld.sh	r11,r11[0xe]
800057e0:	f0 1f 00 02 	mcall	800057e8 <__sclose+0xc>
800057e4:	d8 02       	popm	pc
800057e6:	00 00       	add	r0,r0
800057e8:	80 00       	ld.sh	r0,r0[0x0]
800057ea:	58 9c       	cp.w	r12,9

800057ec <__sseek>:
800057ec:	d4 21       	pushm	r4-r7,lr
800057ee:	16 97       	mov	r7,r11
800057f0:	96 7b       	ld.sh	r11,r11[0xe]
800057f2:	f0 1f 00 08 	mcall	80005810 <__sseek+0x24>
800057f6:	8e 68       	ld.sh	r8,r7[0xc]
800057f8:	10 99       	mov	r9,r8
800057fa:	ad c8       	cbr	r8,0xc
800057fc:	ad a9       	sbr	r9,0xc
800057fe:	5b fc       	cp.w	r12,-1
80005800:	ef f8 0c 06 	st.heq	r7[0xc],r8
80005804:	ef f9 1c 06 	st.hne	r7[0xc],r9
80005808:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000580c:	d8 22       	popm	r4-r7,pc
8000580e:	00 00       	add	r0,r0
80005810:	80 00       	ld.sh	r0,r0[0x0]
80005812:	59 ac       	cp.w	r12,26

80005814 <__swrite>:
80005814:	d4 21       	pushm	r4-r7,lr
80005816:	96 68       	ld.sh	r8,r11[0xc]
80005818:	16 97       	mov	r7,r11
8000581a:	14 95       	mov	r5,r10
8000581c:	12 94       	mov	r4,r9
8000581e:	e2 18 01 00 	andl	r8,0x100,COH
80005822:	18 96       	mov	r6,r12
80005824:	c0 60       	breq	80005830 <__swrite+0x1c>
80005826:	30 29       	mov	r9,2
80005828:	30 0a       	mov	r10,0
8000582a:	96 7b       	ld.sh	r11,r11[0xe]
8000582c:	f0 1f 00 06 	mcall	80005844 <__swrite+0x30>
80005830:	8e 68       	ld.sh	r8,r7[0xc]
80005832:	ad c8       	cbr	r8,0xc
80005834:	08 99       	mov	r9,r4
80005836:	0a 9a       	mov	r10,r5
80005838:	8e 7b       	ld.sh	r11,r7[0xe]
8000583a:	0c 9c       	mov	r12,r6
8000583c:	ae 68       	st.h	r7[0xc],r8
8000583e:	f0 1f 00 03 	mcall	80005848 <__swrite+0x34>
80005842:	d8 22       	popm	r4-r7,pc
80005844:	80 00       	ld.sh	r0,r0[0x0]
80005846:	59 ac       	cp.w	r12,26
80005848:	80 00       	ld.sh	r0,r0[0x0]
8000584a:	58 70       	cp.w	r0,7

8000584c <__sread>:
8000584c:	d4 21       	pushm	r4-r7,lr
8000584e:	16 97       	mov	r7,r11
80005850:	96 7b       	ld.sh	r11,r11[0xe]
80005852:	f0 1f 00 07 	mcall	8000586c <__sread+0x20>
80005856:	c0 65       	brlt	80005862 <__sread+0x16>
80005858:	6f 58       	ld.w	r8,r7[0x54]
8000585a:	18 08       	add	r8,r12
8000585c:	ef 48 00 54 	st.w	r7[84],r8
80005860:	d8 22       	popm	r4-r7,pc
80005862:	8e 68       	ld.sh	r8,r7[0xc]
80005864:	ad c8       	cbr	r8,0xc
80005866:	ae 68       	st.h	r7[0xc],r8
80005868:	d8 22       	popm	r4-r7,pc
8000586a:	00 00       	add	r0,r0
8000586c:	80 00       	ld.sh	r0,r0[0x0]
8000586e:	59 d8       	cp.w	r8,29

80005870 <_write_r>:
80005870:	d4 21       	pushm	r4-r7,lr
80005872:	16 98       	mov	r8,r11
80005874:	18 97       	mov	r7,r12
80005876:	10 9c       	mov	r12,r8
80005878:	30 08       	mov	r8,0
8000587a:	14 9b       	mov	r11,r10
8000587c:	48 66       	lddpc	r6,80005894 <_write_r+0x24>
8000587e:	12 9a       	mov	r10,r9
80005880:	8d 08       	st.w	r6[0x0],r8
80005882:	f0 1f 00 06 	mcall	80005898 <_write_r+0x28>
80005886:	5b fc       	cp.w	r12,-1
80005888:	c0 51       	brne	80005892 <_write_r+0x22>
8000588a:	6c 08       	ld.w	r8,r6[0x0]
8000588c:	58 08       	cp.w	r8,0
8000588e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005892:	d8 22       	popm	r4-r7,pc
80005894:	00 00       	add	r0,r0
80005896:	0a 2c       	rsub	r12,r5
80005898:	80 00       	ld.sh	r0,r0[0x0]
8000589a:	3f c0       	mov	r0,-4

8000589c <_close_r>:
8000589c:	d4 21       	pushm	r4-r7,lr
8000589e:	30 08       	mov	r8,0
800058a0:	18 97       	mov	r7,r12
800058a2:	48 76       	lddpc	r6,800058bc <_close_r+0x20>
800058a4:	16 9c       	mov	r12,r11
800058a6:	8d 08       	st.w	r6[0x0],r8
800058a8:	f0 1f 00 06 	mcall	800058c0 <_close_r+0x24>
800058ac:	5b fc       	cp.w	r12,-1
800058ae:	c0 51       	brne	800058b8 <_close_r+0x1c>
800058b0:	6c 08       	ld.w	r8,r6[0x0]
800058b2:	58 08       	cp.w	r8,0
800058b4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800058b8:	d8 22       	popm	r4-r7,pc
800058ba:	00 00       	add	r0,r0
800058bc:	00 00       	add	r0,r0
800058be:	0a 2c       	rsub	r12,r5
800058c0:	80 00       	ld.sh	r0,r0[0x0]
800058c2:	50 b8       	stdsp	sp[0x2c],r8

800058c4 <_fclose_r>:
800058c4:	d4 21       	pushm	r4-r7,lr
800058c6:	18 96       	mov	r6,r12
800058c8:	16 97       	mov	r7,r11
800058ca:	58 0b       	cp.w	r11,0
800058cc:	c0 31       	brne	800058d2 <_fclose_r+0xe>
800058ce:	16 95       	mov	r5,r11
800058d0:	c5 08       	rjmp	80005970 <_fclose_r+0xac>
800058d2:	f0 1f 00 29 	mcall	80005974 <_fclose_r+0xb0>
800058d6:	58 06       	cp.w	r6,0
800058d8:	c0 70       	breq	800058e6 <_fclose_r+0x22>
800058da:	6c 68       	ld.w	r8,r6[0x18]
800058dc:	58 08       	cp.w	r8,0
800058de:	c0 41       	brne	800058e6 <_fclose_r+0x22>
800058e0:	0c 9c       	mov	r12,r6
800058e2:	f0 1f 00 26 	mcall	80005978 <_fclose_r+0xb4>
800058e6:	4a 68       	lddpc	r8,8000597c <_fclose_r+0xb8>
800058e8:	10 37       	cp.w	r7,r8
800058ea:	c0 31       	brne	800058f0 <_fclose_r+0x2c>
800058ec:	6c 07       	ld.w	r7,r6[0x0]
800058ee:	c0 a8       	rjmp	80005902 <_fclose_r+0x3e>
800058f0:	4a 48       	lddpc	r8,80005980 <_fclose_r+0xbc>
800058f2:	10 37       	cp.w	r7,r8
800058f4:	c0 31       	brne	800058fa <_fclose_r+0x36>
800058f6:	6c 17       	ld.w	r7,r6[0x4]
800058f8:	c0 58       	rjmp	80005902 <_fclose_r+0x3e>
800058fa:	4a 38       	lddpc	r8,80005984 <_fclose_r+0xc0>
800058fc:	10 37       	cp.w	r7,r8
800058fe:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80005902:	8e 69       	ld.sh	r9,r7[0xc]
80005904:	30 08       	mov	r8,0
80005906:	f0 09 19 00 	cp.h	r9,r8
8000590a:	c0 51       	brne	80005914 <_fclose_r+0x50>
8000590c:	f0 1f 00 1f 	mcall	80005988 <_fclose_r+0xc4>
80005910:	30 05       	mov	r5,0
80005912:	c2 f8       	rjmp	80005970 <_fclose_r+0xac>
80005914:	0e 9b       	mov	r11,r7
80005916:	0c 9c       	mov	r12,r6
80005918:	f0 1f 00 1d 	mcall	8000598c <_fclose_r+0xc8>
8000591c:	6e c8       	ld.w	r8,r7[0x30]
8000591e:	18 95       	mov	r5,r12
80005920:	58 08       	cp.w	r8,0
80005922:	c0 60       	breq	8000592e <_fclose_r+0x6a>
80005924:	6e 8b       	ld.w	r11,r7[0x20]
80005926:	0c 9c       	mov	r12,r6
80005928:	5d 18       	icall	r8
8000592a:	f9 b5 05 ff 	movlt	r5,-1
8000592e:	8e 68       	ld.sh	r8,r7[0xc]
80005930:	ed b8 00 07 	bld	r8,0x7
80005934:	c0 51       	brne	8000593e <_fclose_r+0x7a>
80005936:	6e 4b       	ld.w	r11,r7[0x10]
80005938:	0c 9c       	mov	r12,r6
8000593a:	f0 1f 00 16 	mcall	80005990 <_fclose_r+0xcc>
8000593e:	6e db       	ld.w	r11,r7[0x34]
80005940:	58 0b       	cp.w	r11,0
80005942:	c0 a0       	breq	80005956 <_fclose_r+0x92>
80005944:	ee c8 ff bc 	sub	r8,r7,-68
80005948:	10 3b       	cp.w	r11,r8
8000594a:	c0 40       	breq	80005952 <_fclose_r+0x8e>
8000594c:	0c 9c       	mov	r12,r6
8000594e:	f0 1f 00 11 	mcall	80005990 <_fclose_r+0xcc>
80005952:	30 08       	mov	r8,0
80005954:	8f d8       	st.w	r7[0x34],r8
80005956:	6f 2b       	ld.w	r11,r7[0x48]
80005958:	58 0b       	cp.w	r11,0
8000595a:	c0 70       	breq	80005968 <_fclose_r+0xa4>
8000595c:	0c 9c       	mov	r12,r6
8000595e:	f0 1f 00 0d 	mcall	80005990 <_fclose_r+0xcc>
80005962:	30 08       	mov	r8,0
80005964:	ef 48 00 48 	st.w	r7[72],r8
80005968:	30 08       	mov	r8,0
8000596a:	ae 68       	st.h	r7[0xc],r8
8000596c:	f0 1f 00 07 	mcall	80005988 <_fclose_r+0xc4>
80005970:	0a 9c       	mov	r12,r5
80005972:	d8 22       	popm	r4-r7,pc
80005974:	80 00       	ld.sh	r0,r0[0x0]
80005976:	53 cc       	stdsp	sp[0xf0],r12
80005978:	80 00       	ld.sh	r0,r0[0x0]
8000597a:	54 90       	stdsp	sp[0x124],r0
8000597c:	80 00       	ld.sh	r0,r0[0x0]
8000597e:	5f 18       	srne	r8
80005980:	80 00       	ld.sh	r0,r0[0x0]
80005982:	5f 38       	srlo	r8
80005984:	80 00       	ld.sh	r0,r0[0x0]
80005986:	5f 58       	srlt	r8
80005988:	80 00       	ld.sh	r0,r0[0x0]
8000598a:	53 ce       	stdsp	sp[0xf0],lr
8000598c:	80 00       	ld.sh	r0,r0[0x0]
8000598e:	52 b4       	stdsp	sp[0xac],r4
80005990:	80 00       	ld.sh	r0,r0[0x0]
80005992:	55 e8       	stdsp	sp[0x178],r8

80005994 <fclose>:
80005994:	d4 01       	pushm	lr
80005996:	48 48       	lddpc	r8,800059a4 <fclose+0x10>
80005998:	18 9b       	mov	r11,r12
8000599a:	70 0c       	ld.w	r12,r8[0x0]
8000599c:	f0 1f 00 03 	mcall	800059a8 <fclose+0x14>
800059a0:	d8 02       	popm	pc
800059a2:	00 00       	add	r0,r0
800059a4:	00 00       	add	r0,r0
800059a6:	01 ec       	ld.ub	r12,r0[0x6]
800059a8:	80 00       	ld.sh	r0,r0[0x0]
800059aa:	58 c4       	cp.w	r4,12

800059ac <_lseek_r>:
800059ac:	d4 21       	pushm	r4-r7,lr
800059ae:	16 98       	mov	r8,r11
800059b0:	18 97       	mov	r7,r12
800059b2:	10 9c       	mov	r12,r8
800059b4:	30 08       	mov	r8,0
800059b6:	14 9b       	mov	r11,r10
800059b8:	48 66       	lddpc	r6,800059d0 <_lseek_r+0x24>
800059ba:	12 9a       	mov	r10,r9
800059bc:	8d 08       	st.w	r6[0x0],r8
800059be:	f0 1f 00 06 	mcall	800059d4 <_lseek_r+0x28>
800059c2:	5b fc       	cp.w	r12,-1
800059c4:	c0 51       	brne	800059ce <_lseek_r+0x22>
800059c6:	6c 08       	ld.w	r8,r6[0x0]
800059c8:	58 08       	cp.w	r8,0
800059ca:	ef f8 1a 03 	st.wne	r7[0xc],r8
800059ce:	d8 22       	popm	r4-r7,pc
800059d0:	00 00       	add	r0,r0
800059d2:	0a 2c       	rsub	r12,r5
800059d4:	80 00       	ld.sh	r0,r0[0x0]
800059d6:	50 d0       	stdsp	sp[0x34],r0

800059d8 <_read_r>:
800059d8:	d4 21       	pushm	r4-r7,lr
800059da:	16 98       	mov	r8,r11
800059dc:	18 97       	mov	r7,r12
800059de:	10 9c       	mov	r12,r8
800059e0:	30 08       	mov	r8,0
800059e2:	14 9b       	mov	r11,r10
800059e4:	48 66       	lddpc	r6,800059fc <_read_r+0x24>
800059e6:	12 9a       	mov	r10,r9
800059e8:	8d 08       	st.w	r6[0x0],r8
800059ea:	f0 1f 00 06 	mcall	80005a00 <_read_r+0x28>
800059ee:	5b fc       	cp.w	r12,-1
800059f0:	c0 51       	brne	800059fa <_read_r+0x22>
800059f2:	6c 08       	ld.w	r8,r6[0x0]
800059f4:	58 08       	cp.w	r8,0
800059f6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800059fa:	d8 22       	popm	r4-r7,pc
800059fc:	00 00       	add	r0,r0
800059fe:	0a 2c       	rsub	r12,r5
80005a00:	80 00       	ld.sh	r0,r0[0x0]
80005a02:	3e a4       	mov	r4,-22

80005a04 <__do_global_ctors_aux>:
80005a04:	d4 21       	pushm	r4-r7,lr
80005a06:	48 57       	lddpc	r7,80005a18 <__do_global_ctors_aux+0x14>
80005a08:	c0 28       	rjmp	80005a0c <__do_global_ctors_aux+0x8>
80005a0a:	5d 18       	icall	r8
80005a0c:	20 47       	sub	r7,4
80005a0e:	6e 08       	ld.w	r8,r7[0x0]
80005a10:	5b f8       	cp.w	r8,-1
80005a12:	cf c1       	brne	80005a0a <__do_global_ctors_aux+0x6>
80005a14:	d8 22       	popm	r4-r7,pc
80005a16:	00 00       	add	r0,r0
80005a18:	00 00       	add	r0,r0
80005a1a:	00 0c       	add	r12,r0

Disassembly of section .exception:

80005c00 <_evba>:
80005c00:	c0 08       	rjmp	80005c00 <_evba>
	...

80005c04 <_handle_TLB_Multiple_Hit>:
80005c04:	c0 08       	rjmp	80005c04 <_handle_TLB_Multiple_Hit>
	...

80005c08 <_handle_Bus_Error_Data_Fetch>:
80005c08:	c0 08       	rjmp	80005c08 <_handle_Bus_Error_Data_Fetch>
	...

80005c0c <_handle_Bus_Error_Instruction_Fetch>:
80005c0c:	c0 08       	rjmp	80005c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80005c10 <_handle_NMI>:
80005c10:	c0 08       	rjmp	80005c10 <_handle_NMI>
	...

80005c14 <_handle_Instruction_Address>:
80005c14:	c0 08       	rjmp	80005c14 <_handle_Instruction_Address>
	...

80005c18 <_handle_ITLB_Protection>:
80005c18:	c0 08       	rjmp	80005c18 <_handle_ITLB_Protection>
	...

80005c1c <_handle_Breakpoint>:
80005c1c:	c0 08       	rjmp	80005c1c <_handle_Breakpoint>
	...

80005c20 <_handle_Illegal_Opcode>:
80005c20:	c0 08       	rjmp	80005c20 <_handle_Illegal_Opcode>
	...

80005c24 <_handle_Unimplemented_Instruction>:
80005c24:	c0 08       	rjmp	80005c24 <_handle_Unimplemented_Instruction>
	...

80005c28 <_handle_Privilege_Violation>:
80005c28:	c0 08       	rjmp	80005c28 <_handle_Privilege_Violation>
	...

80005c2c <_handle_Floating_Point>:
80005c2c:	c0 08       	rjmp	80005c2c <_handle_Floating_Point>
	...

80005c30 <_handle_Coprocessor_Absent>:
80005c30:	c0 08       	rjmp	80005c30 <_handle_Coprocessor_Absent>
	...

80005c34 <_handle_Data_Address_Read>:
80005c34:	c0 08       	rjmp	80005c34 <_handle_Data_Address_Read>
	...

80005c38 <_handle_Data_Address_Write>:
80005c38:	c0 08       	rjmp	80005c38 <_handle_Data_Address_Write>
	...

80005c3c <_handle_DTLB_Protection_Read>:
80005c3c:	c0 08       	rjmp	80005c3c <_handle_DTLB_Protection_Read>
	...

80005c40 <_handle_DTLB_Protection_Write>:
80005c40:	c0 08       	rjmp	80005c40 <_handle_DTLB_Protection_Write>
	...

80005c44 <_handle_DTLB_Modified>:
80005c44:	c0 08       	rjmp	80005c44 <_handle_DTLB_Modified>
	...

80005c50 <_handle_ITLB_Miss>:
80005c50:	c0 08       	rjmp	80005c50 <_handle_ITLB_Miss>
	...

80005c60 <_handle_DTLB_Miss_Read>:
80005c60:	c0 08       	rjmp	80005c60 <_handle_DTLB_Miss_Read>
	...

80005c70 <_handle_DTLB_Miss_Write>:
80005c70:	c0 08       	rjmp	80005c70 <_handle_DTLB_Miss_Write>
	...

80005d00 <_handle_Supervisor_Call>:
80005d00:	49 3f       	lddpc	pc,80005d4c <ipr_val+0x10>
	...

80005d04 <_int0>:
80005d04:	30 0c       	mov	r12,0
80005d06:	f0 1f 00 13 	mcall	80005d50 <ipr_val+0x14>
80005d0a:	58 0c       	cp.w	r12,0
80005d0c:	f8 0f 17 10 	movne	pc,r12
80005d10:	d6 03       	rete

80005d12 <_int1>:
80005d12:	30 1c       	mov	r12,1
80005d14:	f0 1f 00 0f 	mcall	80005d50 <ipr_val+0x14>
80005d18:	58 0c       	cp.w	r12,0
80005d1a:	f8 0f 17 10 	movne	pc,r12
80005d1e:	d6 03       	rete

80005d20 <_int2>:
80005d20:	30 2c       	mov	r12,2
80005d22:	f0 1f 00 0c 	mcall	80005d50 <ipr_val+0x14>
80005d26:	58 0c       	cp.w	r12,0
80005d28:	f8 0f 17 10 	movne	pc,r12
80005d2c:	d6 03       	rete

80005d2e <_int3>:
80005d2e:	30 3c       	mov	r12,3
80005d30:	f0 1f 00 08 	mcall	80005d50 <ipr_val+0x14>
80005d34:	58 0c       	cp.w	r12,0
80005d36:	f8 0f 17 10 	movne	pc,r12
80005d3a:	d6 03       	rete

80005d3c <ipr_val>:
80005d3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80005d4c:	80 00 41 90 80 00 22 90 00 00 00 00 00 00 00 00     ..A...".........
	...

Disassembly of section .fini:

80005e00 <_fini>:
80005e00:	eb cd 40 40 	pushm	r6,lr
80005e04:	48 26       	lddpc	r6,80005e0c <_fini+0xc>
80005e06:	1e 26       	rsub	r6,pc
80005e08:	c0 48       	rjmp	80005e10 <_fini+0x10>
80005e0a:	00 00       	add	r0,r0
80005e0c:	80 00       	ld.sh	r0,r0[0x0]
80005e0e:	5d ea       	*unknown*
80005e10:	f0 16 00 02 	mcall	r6[8]
80005e14:	e3 cd 80 40 	ldm	sp++,r6,pc
